2024-12-05 00:04:07,449 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:04:07,451 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:04:48,104 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:04:48,105 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:05:55,675 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:05:55,677 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:06:12,453 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:06:12,454 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:06:40,860 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:06:40,861 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:08:02,400 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:08:02,401 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:10:14,656 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:10:14,658 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:10:21,116 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:10:21,117 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:10:25,856 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:10:25,857 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:10:32,918 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:10:32,919 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:12:40,032 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:12:40,059 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:12:40,060 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:25:13,847 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:25:13,847 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 00:25:13,874 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:25:13,875 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:28:45,992 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:28:45,992 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 00:28:46,019 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:28:46,020 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:29:10,580 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:29:10,580 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 00:29:10,607 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:29:10,609 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:33:28,578 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:33:28,578 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 00:33:28,605 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:33:28,606 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:33:46,901 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:33:46,901 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 00:36:17,695 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:36:17,696 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 00:36:17,724 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:36:17,726 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:36:38,304 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:36:38,304 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 00:36:38,331 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 00:36:38,333 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:05:46,947 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:05:46,948 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 22:05:46,975 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:05:46,976 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:06:39,223 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:06:39,223 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 22:06:39,250 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:06:39,251 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:11:39,607 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:11:39,607 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 22:11:39,635 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:11:39,636 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:12:06,624 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:12:06,624 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 22:12:06,651 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:12:06,653 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:13:57,308 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:13:57,308 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 22:13:57,336 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:13:57,337 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:14:00,496 - common.logger - INFO - Processing URL: https://about.gitlab.com/direction/
2024-12-05 22:14:00,496 - common.logger - INFO - URL https://about.gitlab.com/direction/ is not a sitemap.
2024-12-05 22:14:00,496 - common.logger - INFO - Processing regular URL: https://about.gitlab.com/direction/
2024-12-05 22:14:00,496 - common.logger - ERROR - unstructured package not found, please install it with `pip install unstructured`
2024-12-05 22:14:00,496 - common.logger - ERROR - HTTP error occurred while processing URL https://about.gitlab.com/direction/: Error fetching content from URL: unstructured package not found, please install it with `pip install unstructured`
2024-12-05 22:14:00,496 - common.logger - ERROR - 500: Error fetching content from URL: unstructured package not found, please install it with `pip install unstructured`
2024-12-05 22:14:38,785 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:14:38,785 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 22:14:38,813 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:14:38,814 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:14:45,838 - common.logger - INFO - Processing URL: https://about.gitlab.com/direction/
2024-12-05 22:14:45,838 - common.logger - INFO - URL https://about.gitlab.com/direction/ is not a sitemap.
2024-12-05 22:14:45,838 - common.logger - INFO - Processing regular URL: https://about.gitlab.com/direction/
2024-12-05 22:14:50,343 - common.logger - INFO - document loaded successfully!
2024-12-05 22:14:50,343 - common.logger - ERROR - Could not import tiktoken python package. This is needed in order to for OpenAIEmbeddings. Please install it with `pip install tiktoken`.
2024-12-05 22:14:50,344 - common.logger - ERROR - HTTP error occurred while processing URL https://about.gitlab.com/direction/: Error indexing documents in Faiss: Could not import tiktoken python package. This is needed in order to for OpenAIEmbeddings. Please install it with `pip install tiktoken`.
2024-12-05 22:14:50,344 - common.logger - ERROR - 500: Error indexing documents in Faiss: Could not import tiktoken python package. This is needed in order to for OpenAIEmbeddings. Please install it with `pip install tiktoken`.
2024-12-05 22:15:13,165 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:15:13,165 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 22:15:13,192 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:15:13,193 - common.logger - INFO - Faiss index not found, initializing as None.
2024-12-05 22:15:19,723 - common.logger - INFO - Processing URL: https://about.gitlab.com/direction/
2024-12-05 22:15:19,723 - common.logger - INFO - URL https://about.gitlab.com/direction/ is not a sitemap.
2024-12-05 22:15:19,723 - common.logger - INFO - Processing regular URL: https://about.gitlab.com/direction/
2024-12-05 22:15:21,030 - common.logger - INFO - document loaded successfully!
2024-12-05 22:15:29,755 - common.logger - INFO - Faiss index saved to faiss_index_file.index
2024-12-05 22:15:29,756 - common.logger - INFO - Successfully indexed documents from https://about.gitlab.com/direction/
2024-12-05 22:15:29,756 - common.logger - INFO - https://about.gitlab.com/direction/ uploaded successfully!
2024-12-05 23:56:22,527 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-05 23:56:22,527 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 23:56:58,285 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-05 23:56:58,285 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 23:57:14,775 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-05 23:57:14,775 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 23:57:38,176 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-05 23:57:38,176 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 23:57:52,582 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-05 23:57:52,582 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 23:58:19,367 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-05 23:58:19,367 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 23:59:22,301 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-05 23:59:22,302 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 23:59:22,480 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-05 23:59:45,491 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-05 23:59:45,491 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-05 23:59:45,641 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-05 23:59:45,707 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:00:33,234 - common.logger - ERROR - Error processing query: 1 validation error for RetrievalQA
retriever
  Input should be a valid dictionary or instance of BaseRetriever [type=model_type, input_value=<common.vector_db.FaissIn...r object at 0x117316ac0>, input_type=FaissIndexer]
    For further information visit https://errors.pydantic.dev/2.9/v/model_type
2024-12-06 00:07:10,257 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:07:10,257 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:08:02,822 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:08:02,823 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:09:21,163 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:09:21,164 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:09:37,821 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:09:37,821 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:12:03,329 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:12:03,329 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:12:03,519 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:13:57,755 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:13:57,756 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:13:57,929 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:14:56,845 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:14:56,845 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:14:57,020 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:15:48,737 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:15:48,737 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:15:48,913 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:16:39,026 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:16:39,026 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:16:39,206 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:17:50,794 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:17:50,794 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:17:50,972 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:19:01,418 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:19:01,418 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:19:01,579 - common.logger - INFO - Faiss index loaded from faiss_index_file.index
2024-12-06 00:28:37,178 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:28:37,179 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:28:38,621 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:30:04,279 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:30:04,280 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:30:05,195 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:30:54,634 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:30:54,634 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:30:55,599 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:30:56,247 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:31:25,073 - common.logger - INFO - Processing URL: https://about.gitlab.com/direction/
2024-12-06 00:31:25,073 - common.logger - INFO - URL https://about.gitlab.com/direction/ is not a sitemap.
2024-12-06 00:31:25,074 - common.logger - INFO - Processing regular URL: https://about.gitlab.com/direction/
2024-12-06 00:31:25,074 - common.logger - ERROR - name 'UnstructuredURLLoader' is not defined
2024-12-06 00:31:25,074 - common.logger - ERROR - HTTP error occurred while processing URL https://about.gitlab.com/direction/: Error fetching content from URL: name 'UnstructuredURLLoader' is not defined
2024-12-06 00:31:25,074 - common.logger - ERROR - 500: Error fetching content from URL: name 'UnstructuredURLLoader' is not defined
2024-12-06 00:32:13,655 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:32:13,655 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:32:14,832 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:32:15,761 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:32:19,951 - common.logger - INFO - Processing URL: https://about.gitlab.com/direction/
2024-12-06 00:32:19,951 - common.logger - INFO - URL https://about.gitlab.com/direction/ is not a sitemap.
2024-12-06 00:32:19,951 - common.logger - INFO - Processing regular URL: https://about.gitlab.com/direction/
2024-12-06 00:32:21,751 - common.logger - INFO - Document loaded successfully!
2024-12-06 00:32:24,024 - common.logger - INFO - Faiss index saved to faiss_index_file
2024-12-06 00:32:24,025 - common.logger - INFO - Successfully indexed documents from https://about.gitlab.com/direction/
2024-12-06 00:32:24,025 - common.logger - INFO - https://about.gitlab.com/direction/ uploaded successfully!
2024-12-06 00:32:33,570 - common.logger - ERROR - Error processing query: 1 validation error for RetrievalQA
retriever
  Input should be a valid dictionary or instance of BaseRetriever [type=model_type, input_value=<langchain_community.vect...S object at 0x13195e220>, input_type=FAISS]
    For further information visit https://errors.pydantic.dev/2.9/v/model_type
2024-12-06 00:37:32,970 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:37:32,971 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:37:33,614 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:37:33,691 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 00:37:44,528 - common.logger - ERROR - Error processing query: Missing some input keys: {'format_instructions', 'question'}
2024-12-06 00:43:52,524 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:43:52,524 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:43:54,043 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:43:54,124 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 00:44:48,717 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:44:48,717 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:44:49,313 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:44:49,400 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 00:48:39,635 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:48:39,636 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:48:41,269 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:48:41,348 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 00:51:32,874 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:51:32,875 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:51:33,531 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:51:33,593 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 00:53:42,843 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:53:42,844 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:53:44,000 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:53:44,062 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 00:54:13,017 - common.logger - ERROR - Error processing query: local variable 'parser' referenced before assignment
2024-12-06 00:54:56,816 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:54:56,817 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:54:57,972 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:54:58,049 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 00:55:00,992 - common.logger - ERROR - Error processing query: name 'StuffDocumentsChain' is not defined
2024-12-06 00:56:27,764 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:56:27,765 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:56:29,237 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:56:29,324 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 00:56:35,260 - common.logger - ERROR - Error processing query: name 'document_prompt' is not defined
2024-12-06 00:57:18,892 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:57:18,892 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:57:20,129 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:57:20,211 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 00:57:23,427 - common.logger - ERROR - Error processing query: 1 validation error for StuffDocumentsChain
  Value error, document_variable_name must be provided if there are multiple llm_chain_variables [type=value_error, input_value={'llm_chain': LLMChain(ve...riable_name': 'Context'}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.9/v/value_error
2024-12-06 00:59:45,250 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:59:45,251 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 00:59:45,923 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 00:59:45,998 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 00:59:48,233 - common.logger - ERROR - Error processing query: 1 validation error for LLMChain
doccument_variable_name
  Extra inputs are not permitted [type=extra_forbidden, input_value='Context', input_type=str]
    For further information visit https://errors.pydantic.dev/2.9/v/extra_forbidden
2024-12-06 01:00:12,785 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:00:12,786 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:00:14,225 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:00:14,305 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:01:17,637 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:01:17,638 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:01:19,048 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:01:19,137 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:01:24,131 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:01:24,131 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:01:25,558 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:01:25,635 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:01:28,432 - common.logger - ERROR - Error processing query: 1 validation error for StuffDocumentsChain
  Value error, document_variable_name must be provided if there are multiple llm_chain_variables [type=value_error, input_value={'llm_chain': LLMChain(ve...ent}\nsource:{source}')}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.9/v/value_error
2024-12-06 01:03:12,467 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:03:12,468 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:03:13,312 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:03:13,395 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:03:16,160 - common.logger - ERROR - Error processing query: 1 validation error for StuffDocumentsChain
  Value error, document_variable_name must be provided if there are multiple llm_chain_variables [type=value_error, input_value={'llm_chain': LLMChain(ve...ent}\nsource:{source}')}, input_type=dict]
    For further information visit https://errors.pydantic.dev/2.9/v/value_error
2024-12-06 01:04:14,856 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:04:14,857 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:04:15,473 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:04:15,553 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:04:18,450 - common.logger - ERROR - Error processing query: Missing some input keys: {'input_documents'}
2024-12-06 01:05:32,385 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:05:32,386 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:05:33,032 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:05:33,117 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:05:36,541 - common.logger - ERROR - Error processing query: expected string or buffer
2024-12-06 01:06:18,357 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:06:18,358 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:06:18,942 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:06:19,024 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:06:25,913 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 01:06:31,664 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 01:06:33,393 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 01:07:11,719 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:07:11,720 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:07:12,520 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:07:12,607 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:07:16,212 - common.logger - ERROR - Error processing query: Missing some input keys: {'input_documents'}
2024-12-06 01:07:34,572 - common.logger - ERROR - Error processing query: Missing some input keys: {'input_documents'}
2024-12-06 01:07:57,634 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:07:57,634 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:07:58,305 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:07:58,391 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:07:58,928 - common.logger - ERROR - Error processing query: Missing some input keys: {'input_documents'}
2024-12-06 01:08:07,617 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:08:07,618 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:08:08,268 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:08:08,355 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:09:05,789 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:09:05,789 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:09:06,705 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:09:06,794 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:09:14,016 - common.logger - ERROR - Error processing query: Missing some input keys: {'input_documents'}
2024-12-06 01:09:23,241 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:09:23,241 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:09:23,827 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:09:23,913 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:12:53,039 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 01:13:21,160 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 01:13:23,569 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 01:13:25,262 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 01:13:27,204 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 01:14:25,544 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 01:16:18,414 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:16:18,414 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:16:19,136 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:16:19,216 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:16:25,280 - common.logger - ERROR - Error processing query: Missing some input keys: {'input_documents'}
2024-12-06 01:16:27,844 - common.logger - ERROR - Error processing query: Missing some input keys: {'input_documents'}
2024-12-06 01:16:29,584 - common.logger - ERROR - Error processing query: Missing some input keys: {'input_documents'}
2024-12-06 01:16:36,924 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:16:36,924 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:16:38,120 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:16:38,196 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:16:39,116 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 01:16:56,640 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:16:56,640 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 01:16:57,782 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 01:16:57,872 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 01:16:59,487 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 01:17:02,078 - common.logger - ERROR - Error processing query: Missing some input keys: {'question'}
2024-12-06 08:54:35,659 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 08:54:35,659 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 08:54:50,720 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 08:54:50,721 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 08:55:23,286 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 08:55:23,287 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 08:57:50,518 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 08:57:50,518 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 09:00:04,380 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 09:00:04,380 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 09:00:29,860 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 09:00:29,861 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 09:00:55,195 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 09:00:55,197 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 09:00:55,854 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:19:48,693 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:19:48,693 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:19:49,340 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:22:34,285 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:22:34,285 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:22:35,024 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:23:14,424 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:23:14,425 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:23:15,225 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:24:11,369 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:24:11,369 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:24:12,054 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:26:57,524 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:26:57,525 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:26:58,267 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:26:58,369 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 22:27:05,980 - common.logger - ERROR - Error processing query: `run` not supported when there is not exactly one output key. Got ['result', 'source_documents'].
2024-12-06 22:28:58,180 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:28:58,181 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:29:02,262 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:29:02,359 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 22:29:25,326 - common.logger - INFO - Query processed successfully. Answer: I'm sorry, but I can't provide the information you're looking for because the context needed to answer your query isn't provided., Sources: 0
2024-12-06 22:33:34,572 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:33:34,572 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:33:35,478 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:33:35,573 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 22:33:56,984 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:33:56,985 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:33:57,543 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:33:57,640 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 22:45:18,574 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:45:18,574 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:45:19,282 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:45:19,385 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 22:46:07,349 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:46:07,350 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:46:37,628 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:46:37,629 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:47:16,123 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:47:16,123 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:47:16,872 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:47:16,970 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 22:47:21,253 - common.logger - INFO - Document 1: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 22:47:21,255 - common.logger - ERROR - Error processing query: `run` not supported when there is not exactly one output key. Got ['result', 'source_documents'].
2024-12-06 22:48:31,903 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:48:31,904 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:48:32,577 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:48:32,671 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 22:49:22,904 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:49:22,905 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:49:23,653 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:49:23,756 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 22:49:32,722 - common.logger - INFO - Processing URL: https://about.gitlab.com/direction/
2024-12-06 22:49:32,722 - common.logger - INFO - URL https://about.gitlab.com/direction/ is not a sitemap.
2024-12-06 22:49:32,722 - common.logger - INFO - Processing regular URL: https://about.gitlab.com/direction/
2024-12-06 22:49:35,258 - common.logger - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://about.gitlab.com/direction/'}, page_content='GitLab Direction\n\nMaintained by:\n\nDavid DeSanto\n\n@david\n\nContribute to this page\n\nEdit this page\n\nYou are here:\n\nGitLab Direction\n\nThe following page may contain information related to upcoming products, features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned on the page are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab Inc.\n\nOn this page\n\n3-year strategy\n\nSituation\n\nStrategic challenges\n\nProduct Strategy\n\nFiscal year product investment themes\n\nFY26\n\nKey Principles Driving Themes\n\nR&D Investment Themes\n\nWin with DevSecOps platform completeness\n\nDifferentiate with AI across the SDLC\n\nLead with SDLC insights and reporting\n\nElevate customer-centricity to customer obsession\n\nFY25\n\nKey Principles Driving Themes\n\nR&D Investment Themes\n\nEnable AI/ML Efficiencies Across DevSecOps\n\nDrive Use Case Adoption to Fully Realize Value\n\nDifferentiate on DevSecOps Platform\n\nStrengthen Our SaaS Deployments & Capabilities\n\nDevSecOps stages\n\nYour contributions\n\nPersonas\n\nMitigating low-end disruption\n\nMaturity\n\nScope\n\nQuarterly Objectives and Key Results (OKRs)\n\nHow we plan releases\n\nPrevious releases\n\nUpcoming releases\n\nML/AI at GitLab\n\nCross-Stage efforts\n\nFootnotes\n\n3-year strategy\n\nSituation\n\nGitLab competes in a large market space, with a CSM estimated at ~$18B in 2024. GitLab has recently surpassed the $150M ARR milestone, with unusually high revenue growth and retention rates. GitLab is uniquely positioned in the market with a vision to offer a single application for the entire DevSecOps lifecycle. GitLab competes across numerous market segments and aims to deliver value in 80+ market categories. GitLab’s product vision is uniquely ambitious, as we were the first DevSecOps player to take a single application approach. From idea to production, GitLab helps teams improve cycle time from weeks to minutes, reduce development process costs, and enable a faster time to market while increasing developer productivity. With software “eating the world,” this is widely viewed as a mission-critical value proposition for customers. We also have a number of tailwinds in the form of cloud adoption, Kubernetes adoption, and DevSecOps tool consolidation, which are helping fuel our rapid growth. Finally, GitLab has an open source community and distribution model, which has exposed the value of GitLab to millions of developers and has sped up the maturation of our product through more than 200 monthly improvements to the GitLab codebase from our users.\n\nStrategic challenges\n\nTension between Breadth and Depth: Our ambitious single-application product vision means we need to build out feature function value across a very large surface area. With so much to deliver in a single application, it is a big UX challenge to keep the experience simple, consistent, and seamless between DevSecOps phases. Our challenge is to drive the right balance between breadth and depth by retaining a seed then nurture approach in new product areas while simultaneously improving existing product areas that generate usage and revenue. Shifting more focus to product depth will allow us to win and retain sophisticated enterprise customers.\n\nGitLab.com and Self-Managed: Another challenge we face is the balance between our self-managed and GitLab.com offerings. GitLab\'s early paying customers were more interested in self-managed, and the majority of our customers use this offering today. As a result, we focused heavily on delivering a great self-managed customer experience. However, as the market shifts toward cloud adoption, we are seeing an increasing demand for our GitLab.com offering. We now need to rapidly meet the same enterprise-grade security, reliability, and performance expectations our paying customers have come to expect from self-managed in our SaaS (.com offering).\n\nWide Customer Profile: We also serve a wide range of customers, from individual contributor developers to large enterprises, across all vertical markets. This range of deployment options and customer sizes makes our business complex and makes it hard to optimize the customer experience for all customer sizes. Over the past few years, we have prioritized enabling our direct sales channel, but in the process have not focused enough on great customer experiences around self-service purchase workflows, onboarding, and cross-stage adoption.\n\nCompetition: Finally, we have formidable competition from much larger companies, including Microsoft, Atlassian, and Synopsys to name a few. Microsoft is starting to mimic our single application positioning, and while behind us in the journey, have substantial resources to dedicate to competing with GitLab.\n\nProduct Strategy\n\nFocus on increasing Stages per Organization (SpO): There is a strong correlation between the number of stages customers use and their propensity to upgrade to a paid package. In fact, adding a stage triples conversion! Each product group should be laser-focused on driving adoption and regular usage of their respective stages, as it should lead to higher Net ARR, reduced churn, and higher customer satisfaction. As outlined in this user journey, the most important additional stages for customers to adopt are Create to Verify and Verify to Release, as each of these adoption steps open up three additional stages to users.\n\nHarness the unique power of a single application: GitLab’s primary point of differentiation is our single application approach. As we continue to drive value in any given stage or category, our first instinct should be to connect that feature or product experience to other parts of the GitLab product. These cross-stage connections will drive differentiated customer value and will be impossible for point product competitors to imitate. Recognizing this opportunity, we have grown our R&D organization significantly over the past two years, and plan to invest an outsized amount on R&D for the next 2-3 years to extend our lead in executing against the single application product vision.\n\nIncrease wider-community contributions: To achieve this ambitious vision more quickly, we will leverage our powerful open source community. Each stage should have a clear strategy for tiering the value of the stage. When stages are early in maturity, we will bias toward including as much functionality in our Core open source version as possible, to drive more rapid adoption and greater community contributions, which will help us mature new stages faster. Once stage adoption is achieved, we can then layer on additional value in paid tiers to encourage upgrades.\n\nMake our core journey categories complete: We want to ensure the core product usage experience is great, which will lead to more paying customers and improved customer retention. We intend to maintain our market-leading depth in stages with complete categories, which currently are Verify (Continuous Integration) and Create (Source Code Management and Code Review). Beyond that, we will endeavor to rapidly mature our offering to complete in Plan (3rd most used stage), Release (4th most used stage), and Secure (important element of our Ultimate tier).\n\nGitLab-hosted first: Most customers don\'t want to run GitLab themselves (self-managed), so we should build out the offerings where we do it for them (GitLab-hosted). GitLab-hosted includes our SaaS (GitLab.com), any single-tenant offerings, and other GitLab hosted services that self-managed installations can use. Our customer and revenue growth rate for our SaaS offering is faster than our self-managed offering. To meet growing customer demand, our SaaS offering needs to have enterprise-grade security, availability, and performance. We must also ensure feature parity between self-managed and SaaS and that customers have an easy migration path from self-managed to SaaS. Going forward, all new features should be available on SaaS when they are available on self-managed, if not before. We will also begin offering GitLab-hosted services to self-managed customers to provide additional value that may not be feasible to deliver in a self-managed environment, e.g. automated cloud backups. Finally, we expect to offer different GitLab-hosted deployment options for single tenant customers and specific geographic regions to meet the regulatory, security, and data residency requirements of various customer segments.\n\nFiscal year product investment themes\n\nEvery year at GitLab, we choose some specific areas of emphasis to help guide the teams on the areas of our product that we want to accentuate. This section is used to highlight that emphasis. It is not a comprehensive list of everything we plan to do this year. Direction for each stage and category can be found at the respective direction pages. We are not asking the teams to deviate from their core mission.\n\nMany teams will see themselves contributing to these areas of emphasis directly. The other teams will continue to execute on their mission - that is also important.\n\nThe themes are to help facilitate cross-team collaboration when invariably teams working on the 1-year themes may need to collaborate with others. Our guidance is: if any team approaches you to prioritize something that is thematic for this year, consider that as a higher priority than you would normally - as it is in service of the broader product-wide goal that we, as a company, have deemed important to accomplish this year.\n\nSee Product Investment (internal handbook page) for how we allocate our R&D investment across our product hierarchy.\n\nFY26\n\nKey Principles Driving Themes\n\nUsability: Users are telling us that we need to better meet their expectations and make the experience more intuitive.\n\nDepth: We need to stop doing some of the things we are doing today. Customers are asking us to improve core functionality through usability improvements and remove half-completed features.\n\nData Quality: Without more visibility, we cannot make as many data-driven decisions. And neither can our customers. We need to complete our data unification effort to make this easier.\n\nDeployment Parity: All three deployments (GitLab.com, GitLab Dedicated, Self-Managed) will have feature parity (with the exception of “admin area” topics on .com and Dedicated).\n\nR&D Investment Themes\n\nFor FY26, the four key R&D investment themes we are focused on are:\n\nWin with DevSecOps platform completeness\n\nDifferentiate with AI across the Software Development Life Cycle (SDLC)\n\nLead with SDLC insights and reporting\n\nElevate customer-centricity to customer obsession\n\nWin with DevSecOps platform completeness\n\nWe will focus primarily on core DevSecOps platform capabilities across SCM, CI, CD, security, compliance, and enterprise agile planning with the goal to achieve a leadership position or extend our existing leadership position. We will drive Premium and Ultimate value by helping propel free-to-paid conversion through product-led growth / feature discovery moments.\n\nDifferentiate with AI across the SDLC\n\nWe will introduce new as well as improve existing GitLab Duo AI capabilities within our core DevSecOps platform capabilities. We will also bring ModelOps features to general availability, including a focus on enabling customers to work with native data science workloads within GitLab.\n\nLead with SDLC insights and reporting\n\nWe will focus on deepening the types, and quality of metrics, as well as pulling metrics from third party integrations, with the goal of making GitLab the central component to understanding SDLC insights. We will also provide reporting of feature usage enabling customers to understand what features and capabilities are being used by their teams as well as what usage is connected to Premium and Ultimate tiers, or are features and capabilities included in add-ons.\n\nElevate customer-centricity to customer obsession\n\nWe will focus on addressing use case adoption issues as well as improving user experience within onboarding to improve our customer\'s time-to-value for core DevSecOps platform capabilities. We will improve customer experience improve ease-of-use for SMB/commercial customers with license management and self-service workflows. Based upon and informed by the pricing research completed in FY25, we will also implement an updated pricing strategy.\n\nFY25\n\nKey Principles Driving Themes\n\nDepth over Breadth: For the past several years we have focused on breadth over depth. This has allowed us to show our direction as a company and define the DevOps Platform market. In FY24, we pivoted to depth over breadth as product depth allows us to win and retain sophisticated enterprise customers. We will continue our focus on depth throughout FY25.\n\nDrive Adoption of Ultimate: Due to the increasing demands for security and compliance in software development, GitLab Ultimate continues to gain popularity with our customers. We will focus on increasing the value of Ultimate by not only improving security and compliance functionality but also adding value from other key areas within our platform like Plan, Verify, and Data Science.\n\nDifferentiate: Our primary point of differentiation is our single application approach: all aspects of our DevSecOps platform work seamlessly together, right out of the box, and can be tailored to the specific needs of each organization.\n\nR&D Investment Themes\n\nFor FY25, the four key R&D investment themes we are focused on are:\n\nEnable AI/ML Efficiencies Across DevSecOps\n\nDrive Use Case Adoption to Fully Realize Value\n\nDifferentiate on DevSecOps Platform\n\nStrengthen Our SaaS Deployments & Capabilities\n\nEnable AI/ML Efficiencies Across DevSecOps\n\nAI as part of software development has continued to mature and has become the number one topic in our customer discussions. To meet our customers’ needs and the evolving market landscape, we will take a three pronged approach to AI (GitLab Duo, ModelOps, AI agents) as part of our DevSecOps platform providing us differentiation in the market.\n\nDrive Use Case Adoption to Fully Realize Value\n\nCI and CD are critical to the success of Premium, while security and governance drives value in Ultimate. We will increase our focus on adoption of these areas - ensuring that customers realize the value of the capabilities they have paid for. This will continue to reduce churn, drive free-to-paid conversion, and increase up-tiering from Premium to Ultimate.\n\nDifferentiate on DevSecOps Platform\n\nToolchain consolidation continues to come up with customers as well as in our annual DevSecOps survey. We will capitalize on our position as the enterprise DevSecOps platform by continuing to expand our planning capabilities, continuing to mature our metrics and reporting, and bring new SCM capabilities to general availability.\n\nStrengthen Our SaaS Deployments & Capabilities\n\nGitLab.com and GitLab Dedicated continue to grow in popularity as more organizations need to undergo digital transformations however do not want the overhead of self-hosting their DevSecOps platform. We expect this trend to continue in FY25 and will invest in our SaaS deployments to ensure they meet our customers’ expectations.\n\nDevSecOps stages\n\nDevSecOps is a broad space with a lot of complexity. To manage this within GitLab, we break down the DevSecOps lifecycle into a few different sections, each with its own direction page you can review.\n\nDev Section Direction - Includes the Plan and Create stages\n\nCI Section Direction - Includes the Verify and Package stages\n\nCD Section Direction - Includes the Deploy stage, which includes the Environments group\n\nSec Section Direction - Includes the Software Supply Chain Security Direction and the Application Security Testing, Software Supply Chain Security, and Security Risk Management stages\n\nData Science Section Direction - Includes the ModelOps and AI-powered stages\n\nAnalytics Section Direction - Includes the Monitor stage, which includes the Analytics Instrumentation and Platform Insights groups\n\nGrowth Section Direction - Includes the Growth stage, which includes the Acquisition and Activation groups\n\nFulfillment Section Direction - Includes the Fulfillment stage, which includes the Provision, Utilization, Fulfillment Platform, and Subscription Management groups\n\nCore Platform Section Direction - Includes the Foundations and Systems stages\n\nSaaS Platforms Section Direction - Includes the SaaS Platforms stage, which includes the Delivery, Scalability, GitLab Dedicated, Switchboard, and US Public Sector Services groups\n\nSingle-Engineer Groups Section Direction - Includes the Mobile stage, which includes the Mobile DevOps group\n\nYour contributions\n\nIn addition to addressing the DevSecOps lifecycle internally through the above sections, contributions from the community also help increase our rate of innovation, which helps mature the stages of our DevSecOps platform. These community contributions are an important part our company mission and strategy.\n\nOur issue tracker contains requests made for features and changes to GitLab. Contributing is the best way to get a feature you want included as we continually merge code to be released in the next version. Please see our Contribute to GitLab page for more details such as guides to get started contributing, areas looking for contributions, and contribution acceptance criteria.\n\nPersonas\n\nPersonas are the people we design for. Developers, security professionals, and operations professionals are currently the primary personas we focus on, and we tailor our user experience to their needs. We want GitLab to be the main interface for people in these roles, so they can show up at work, start their day, and load up GitLab. And that’s already happening.\n\nBut there are a lot of other roles involved with the development and delivery of software. That is the ultimate GitLab goal - where everyone involved with software development and delivery uses a single application so they are on the same page with the rest of their team. We are rapidly expanding our user experience for Designers, Compliance Managers, Product Managers, and Release Managers. We’ll also be expanding to the business side, with Executive visibility and reporting. While we’re still calling it DevSecOps, we’re really expanding the definition of DevSecOps and delivering it all as a single application.\n\nMitigating low-end disruption\n\nGitLab is not immune to disruption. In some ways, it is a sign of success that GitLab is now at a scale where we have to think about low-end disruption. Arguably, a few years ago, GitLab was a low-end disruptor.\n\nClayton Christensen defines low-end-disruption as follows:\n\nLow-end disruption refers to businesses that come in at the bottom of the market and serve customers in a way that is "good enough." These are generally the lower profit markets for the incumbent and thus, when these new businesses enter, the incumbents move further "upstream." In other words, they put their focus on where the greater profit margins are.\n\nOur perspective is that low-end disruption is an additional and critical sensing mechanism. This is especially true for the DevSecOps market. We look at the following attributes to figure out if a low-end disruption has anything close to potential product-market resonance. This list is an adaptation of the Product Zeitgeist Fit.\n\nBuilder Enthusiasm: Are the most talented, hardest working, or most-in-demand people - the engineers, the developers - so intrigued by the approach that they are working on it, excited by it, and trying to make it a thing? If that is the case, then there is a good chance that they will eventually make it happen, moving beyond the fringes to the mainstream. Number of stars, forks, and contributions in the repo are some metrics to look for here.\n\nDespite Test: When people are using a product despite the fact that it’s not the best thing out there, or, in some cases, that it’s straight-up terrible, it’s a great sign. It shows that the product has a line into something emotional, not solely functional. Wanted, not just needed. In the early days, these products can often feel misunderstood or controversial. At first blush, the conceit may even raise a few eyebrows. But to the people who have been working on those products, they’re so clearly elegant, if temporarily imperfect, solutions to big and important problems that they seem almost obvious once they recognize it. Google Trends and posts on Hacker News are some things to monitor here.\n\nT-shirt Test: If people with no connection to the company are wearing their t-shirts or putting their stickers on their laptops or wearing their socks, that desire to associate with the idea indicates as much a movement as a product.\n\nA reason low-end disruptors are able to enter the market is that the feature-absorption by users is lower than the feature-velocity of the established vendor. To address this we are focused on a working-by-default configuration principle.\n\nMaturity\n\nAs we add new categories and stages to GitLab, some areas of the product will be deeper and more mature than others. We publish a list of the categories, what we think their maturity levels are, and our plans to improve on our categories page.\n\nWe strive to be the best product in the market and to be complete. As the market, customer needs, competitive landscape, and technology change, we should expect our maturities to also change, including changing to a lower maturity rating. By embracing a focus on improvement and low level of shame, we encourage moving a maturity down. This is a strong indicator that we are realists about our product with an eye on achieving the best results for our customers.\n\nScope\n\nWe try to prevent maintaining functionality that is language or platform specific, because they slow down our ability to get results. Examples of how we handle it instead are:\n\nWe don\'t make native mobile clients. Instead, we make sure our mobile web pages are great.\n\nWe don\'t make native clients for desktop operating systems. People can use Tower and, for example, GitLab was the first to have merge conflict resolution in our web applications.\n\nFor language translations, we rely on the wider community.\n\nFor Static Application Security Testing we rely on open source security scanners.\n\nFor code navigation, we\'re hesitant to introduce navigation improvements that only work for a subset of languages.\n\nFor code quality, we reuse Code Climate Engines.\n\nFor building and testing with Auto DevOps, we use Heroku Buildpacks.\n\nOutside our scope are Kubernetes and everything it depends on:\n\nNetwork (fabric) Flannel, Openflow, VMware NSX, Cisco ACI\n\nProxy (layer 7) Envoy, nginx, HAProxy, traefik\n\nIngress (north/south) Contour, Ambassador,\n\nService mesh (east/west) Istio, Linkerd\n\nContainer Scheduler we mainly focus on Kubernetes, other container schedulers are: CloudFoundry, OpenStack, OpenShift, Mesos DCOS, Docker Swarm, Atlas/Terraform, Nomad, Deis, Convox, Flynn, Tutum, GiantSwarm, Rancher\n\nPackage manager Helm, ksonnet\n\nOperating System Ubuntu, CentOS, RHEL, CoreOS, Alpine Linux\n\nDuring a presentation of Kubernetes, Brendan Burns talks about the four Ops layers at the 2:00 mark:\n\nApplication Ops\n\nCluster Ops\n\nKernel/OS Ops\n\nHardware Ops\n\nGitLab helps you mainly with application ops. And where needed, we also allow you to monitor clusters and link them to application environments. But we intend to use vanilla Kubernetes, instead of something specific to GitLab.\n\nAlso outside our scope are products that are not specific to developing, securing, or operating applications and digital products.\n\nIdentity management: Okta and Duo, you use this mainly with SaaS applications you don\'t develop, secure, or operate.\n\nSaaS integration: Zapier and IFTTT\n\nEcommerce: Shopify\n\nIn scope are things that are not mainly for SaaS applications:\n\nNetwork security, since it overlaps with application security to some extent.\n\nSecurity information and event management (SIEM), since that measures applications and network.\n\nOffice productivity applications, since "We believe that all digital products should be open to contributions, from legal documents to movie scripts and from websites to chip designs"\n\nWe expect GitLab to continue to grow, and we have several ideas for possible future stages\n\nQuarterly Objectives and Key Results (OKRs)\n\nTo make sure our goals are clearly defined and aligned throughout the organization, we make use of OKRs (Objectives and Key Results). Our quarterly Objectives and Key Results are publicly viewable.\n\nHow we plan releases\n\nAt GitLab, we strive to be ambitious, maintain a strong sense of urgency, and set aspirational targets with every release. The direction items we highlight in our kickoff are a reflection of this ambitious planning. When it comes to execution, we aim for velocity over predictability. This way, we optimize our planning time to focus on the top of the queue and deliver things fast. We schedule 100% of what we can accomplish based on past Development Department merge request rate and availability factors (vacation, contribute, etc.).\n\nSee our product handbook on how we prioritize.\n\nPrevious releases\n\nOn our releases page, you can find an overview of the most important features of recent releases and links to the blog posts for each release.\n\nUpcoming releases\n\nGitLab releases a new version every single month. You can find the major planned features for upcoming releases on our upcoming releases page or see the upcoming features for paid tiers.\n\nNote that we often move things around, do things that are not listed, and cancel things that are listed.\n\nML/AI at GitLab\n\nWith Gitlab 15.4, Suggested Reviewers was released as our first customer-facing ML/AI technology in production features. We have additional ambitions in the near future for several types of problems. This is the focus of our new ModelOps stage.\n\nCross-Stage efforts\n\nGitLab consistently strives to deliver a cohesive experience that enables workflows that span the DevSecOps loop. We have a number of existing capabilities and planned improvements that do just that:\n\nTBA\n\nFootnotes\n\nIDC, Worldwide DevOps Software Tools Forecast, 2020–2024, Doc # US45188520, July 2020\n\nEdit this page View source')]
2024-12-06 22:49:36,928 - common.logger - INFO - Faiss index saved to faiss_index_file
2024-12-06 22:49:36,928 - common.logger - INFO - Successfully indexed documents from https://about.gitlab.com/direction/
2024-12-06 22:49:36,928 - common.logger - INFO - https://about.gitlab.com/direction/ uploaded successfully!
2024-12-06 22:52:17,904 - common.logger - INFO - Document 1: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 22:52:17,905 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 22:54:30,405 - common.logger - INFO - Document 1: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 22:54:30,407 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 22:54:40,782 - common.logger - INFO - Document 1: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 22:54:40,783 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 22:55:43,802 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:55:43,803 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 22:55:44,468 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 22:55:44,557 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 22:55:49,873 - common.logger - INFO - Document 1: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 22:55:49,873 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:00:39,366 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:00:39,366 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:00:39,995 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:00:40,089 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:00:48,165 - common.logger - INFO - Document 1: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:00:48,165 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:02:42,654 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:02:42,655 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:02:43,468 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:02:43,560 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:03:15,109 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:03:15,109 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:03:15,732 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:03:15,814 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:03:21,617 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:03:21,618 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:03:22,749 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:03:22,850 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:03:49,631 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:03:49,631 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:03:50,236 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:03:50,338 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:04:12,859 - common.logger - INFO - Document 1: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:04:12,860 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:04:13,376 - common.logger - ERROR - Error processing query: Missing some input keys: {'query'}
2024-12-06 23:05:17,896 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:05:17,897 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:05:18,523 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:05:18,608 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:05:22,298 - common.logger - INFO - Document 1: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:05:22,298 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:05:22,803 - common.logger - ERROR - Error processing query: Missing some input keys: {'query'}
2024-12-06 23:05:38,644 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:05:38,645 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:05:39,207 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:05:39,298 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:05:44,441 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:05:44,441 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:05:45,027 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:05:45,121 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:05:55,982 - common.logger - INFO - Document 1: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:05:55,983 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:08:33,913 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:08:33,914 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:08:34,473 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:08:34,574 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:08:38,522 - common.logger - INFO - Document 1: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:08:38,522 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:09:17,253 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:09:17,255 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:09:17,858 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:09:17,947 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:11:21,524 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:11:21,525 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:11:22,148 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:11:22,240 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:13:50,376 - common.logger - INFO - Processing URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:13:50,376 - common.logger - INFO - URL https://handbook.gitlab.com/handbook/hiring/ is not a sitemap.
2024-12-06 23:13:50,376 - common.logger - INFO - Processing regular URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:13:57,672 - common.logger - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/hiring/'}, page_content="Hiring & Talent Acquisition Handbook\n\nLanding page for many of the handbook pages the talent acquisition team at GitLab uses.\n\nAt the core of our team’s vision, mission, and strategy is our ability to impact GitLab’s overarching mission: to make it so that everyone can contribute to and co-create the software that powers our world. When everyone can contribute, users become contributors and we greatly increase the rate of innovation.\n\nAs a Talent Acquisition team, we have an outsized impact on GitLab’s ability to make this mission a reality, by connecting top talent to profound careers from wherever they are in a truly distributed, remote workforce.\n\nTalent Acquisition Vision Statement\n\nTo create globally inclusive access to opportunities so that everyone can contribute to and co-create the software that powers our world.\n\nTalent Acquisition Mission Statement\n\nIt is the Talent Acquisition Team’s mission to predictably build distributed, representative teams that enable team members to co-create the future of software.\n\nOur Guiding Principles\n\nAs we set out to achieve this vision, we will continue to rely on core guiding principles to define how we build toward the future.\n\nExperience: Stakeholder experience is central to our craft. We are a partner, an advisor, and an essential component to building high performing teams and culture at GitLab.\n\nInclusivity: We design fair and equitable processes into the fabric of what we do. We believe Talent Acquisition has an outsized impact on the make-up of our teams, and we strive to continue to build them with inclusivity as a integral piece of our craft.\n\nPredictability: Our ability to have the right team members, in the right roles, at the right time is imperative to execute on our commitments and plans as an organization. We strive for predictability: to build accuracy in our forecasts and enable the business to look around corners through strong relationships and data driven decision making.\n\nOur Objectives and Roadmap\n\nWe strive to be as transparent as possible, but these sections are only available for our GitLab team members. Talent Acquisition Strategy\n\nTalent Acquisition Pages and Processes\n\nTeam Process Pages\n\nTA Key Performance Indicators Note: this page is currently in our internal handbook as they are a work in progress.\n\nMeeting Cadence\n\nTalent Acquisition Alignment\n\nDiversity, Inclusion & Belonging Talent Acquisition Initiatives\n\nTriad Process\n\nQuarterly Updates Note: Internal only\n\nCandidate Handbook Pages\n\nPlease find pages for potential and active applicants below.\n\nCandidate Handbook Page\n\nTalent Acquisition Privacy Policy\n\nInterviewer Processes\n\nInterviewer Prep Requirements\n\nConducting a GitLab Interview\n\nGreenhouse for Interviewers\n\nHiring Manager Processes\n\nHiring Manager Processes\n\nConducting a GitLab Interview\n\nGreenhouse for Hiring Managers\n\nCandidate Experience Specialist Processes\n\nCandidate Experience Specialist Responsibilities\n\nPrelude\n\nHow to Complete a Contract - CES Process\n\nRecruiters and Sourcers\n\nOpening a job\n\nInterview Stages\n\nIf a candidate is in one job and needs to move to another, it’s important to correctly determine whether they should be added or transferred. Both are accessible by clicking the ‘Add, Transfer, or Remove Candidate’s Jobs’ button on the bottom right corner of your candidate profile.\n\nBefore making any moves, always ensure the candidate does not have any interviews scheduled. Transferring will automatically remove scheduled interviews and make them invisible on the candidates’ Guide, but will not cancel the interview from the interviewers’ calendar or inform the candidate of what is happening. Always wait until the interview has been completed, or fully cancel the interview and reschedule under the new req.\n\nWhen you add a candidate to a new job, the candidate starts the new job with a clean slate. There will be no scorecards or forms from any other position. This should be chosen when you are starting a brand new hiring process and will not be considering scorecards from any other job, and want their application date to be the date that you add them.\n\nWhen you transfer a candidate from one job to another, most of their data before the reference check stage moves with them. Scorecards will be visible in the “Scorecards” tab and their original application date will remain. Scorecards that have not been submitted cannot be submitted after transfer, so make sure you collect those before you make your move. Offers and forms are also not transferable, so it’s important to transfer before a candidate hits the Reference Check stage. When you are moving someone from an Evergreen req into the role they will be hired into, you should always transfer. There will be no record of the previous job in any reporting.\n\nSometimes, deciding whether to add or transfer can be tricky. If a candidate interviewed for a role that was filled by someone else, and you get a new headcount a few months later, should you transfer them into the new job or add them and start over? One thing to consider is the implication your choice will have on the data. In this case, a candidate who transfers will appear to have been in the hiring process for months, when you’ve actually only been talking to them about this opening for a few days. At the same time, you want to save their scorecards because they’ll be relevant for the new job. In another situation, you could have an applicant who was being considered for the role, was rejected by the Hiring Manager, but contacted a few months later when the scope of the role changed and they were now considered a good fit. The key to knowing when to transfer is understanding what impact it would have on our data, and what solution would paint the most accurate picture. If you’re not sure whether to add or transfer, you should check in with Enablement to get another opinion.\n\nWhen rejecting candidates, it’s important to carefully review all rejection reasons and pick the one that most accurately describes why a candidate is being rejected. This is because data is analyzed on a quarterly basis by the Talent Acquisition Leadership team, People Leadership Team, and E-Group.\n\nOnce you’ve clicked the most detailed reason, include detailed context on the reason in the “Rejection Notes” box. Please be as specific as possible. For example, instead of writing “the candidate rejected because of compensation”, write “the candidate rejected because the salary and equity that we offered was much lower than a competing offer.”\n\nPlease note that you cannot submit scorecards after rejecting a candidate.\n\nWe will not cancel an interview within less than 24 hours’ notice if the candidate is being rejected. The recruiter will notify the candidate that they are no longer in consideration for the role and present them with the option to continue with the scheduled interview slot. The interviewer must be informed, and will not discuss the feedback that led to the decline. The conversation will pivot to general opportunities at GitLab and answering any questions about the company and team that the candidate may have.\n\nIf the candidate’s interview is outside 24 hours, the interview should be deleted in Greenhouse before the candidate is rejected and notified. The candidate should always be notified if they’ve been rejected, and the recruiter is responsible for declining the candidate. Any interviews scheduled will also not be automatically canceled, so you’ll need to ensure this happens first.\n\nIf the candidate does not join the interview room within 10 minutes or fails to complete their MR within the specified time before the interview, the interview will be cancelled and the recruiter will get in touch with the candidate and not schedule further interviews.\n\nIf the candidate notifies us that they are unable to attend the interview before the scheduled time, CES can automatically reschedule using the candidates’ current availability or by requesting fresh availability.\n\nIf we have rescheduled at the request of the candidate and the candidate requests to move the interview again without reasonable explanation, the recruiter will automatically reject the candidate.\n\nWe understand that there may be extenuating circumstances leading to the above situations where a candidate is unavailable or unprepared. It is at the recruiter’s discretion to reengage or choose to reschedule.\n\nOffers and Closing Reqs\n\nVerbal offer information\n\nDeclined offer steps\n\nSourcing at GitLab\n\nSourcing overview\n\nIdentifying prospects\n\nNotifications\n\nThere are no perfect or required ways to set up your Greenhouse notifications, but these are some of our recommendations.\n\nTalent Acquisition Programs\n\nReferrals\n\nReferral Operations\n\nReferral Process\n\nDetails on who is eligible for referrals\n\nAcquisitions\n\nAcquisitions\n\nInternal Mobility\n\nInternal Hiring Process\n\nPosting a job internally\n\nIn the offer process\n\nExecutive Hiring\n\nExecutive Search\n\nEmerging Talent\n\nEmerging Talent\n\nAssociate Engineer Development\n\nGlobal Hiring Resources\n\nOther Hiring Pages\n\nGreenhouse\n\nTalent Acquisition Process Framework\n\nAdditional Resources\n\nOverview of Job Families\n\nBackground checks\n\nBenefits\n\nCompensation\n\nContracts\n\nGitLab talent ambassador\n\nOnboarding\n\nStock options\n\nVisas\n\nCandidate Handbook Page\n\nThis page outlines what hiring looks like at GitLab. We share the latest information about our processes and practices to ensure you have the information you need to feel confident during the interview process.\n\nConducting a GitLab Interview\n\nHelpful information about how to prepare and conduct interviews for GitLab\n\nEmerging Talent @ GitLab\n\nOverview of Emerging Talent @ GitLab\n\nGitLab talent ambassador\n\nKeeping with our mission that everyone can contribute, we want all GitLab team members to feel encouraged and equipped to take part in helping us find great talent and act as ambassadors for the company and our talent brand.\n\nGreenhouse\n\nGreenhouse is GitLab's ATS (Applicant Tracking System). All Hiring Managers and Interviewers will use Greenhouse to review resumes, provide feedback, communicate with candidates, and more.\n\nGuide\n\nGuide is a program GitLab uses to increase candidate experience by having an easily digestable and enjoyable resource that houses all interview details and relevant handbook pages depending on where the candidate is in the hiring process.\n\nInterviewer Prep Requirements\n\nLearn more about the tools required to prepare you for interviewing at GitLab\n\nJob Families\n\nJob families are organized by function at GitLab and we use them to inform candidates of roles and current team members to evaluate their performance.\n\nMERGE: Ongoing Development for Associate Engineers\n\nCongratulations and welcome to the GitLab team! We’re excited to have you on board as you start this exciting new chapter in your engineering career. Our comprehensive ongoing development program is designed to support you every step of the way - from your first day, to your first merge request, and beyond. You’ll have support from your manager, onboarding buddy, and the Talent Development team; don’t ever hesitate to reach out.\n\nPrelude\n\nPrelude (formerly Interview Schedule) is a program GitLab uses to increase efficiency in scheduling interviews.\n\nReferral Operations\n\nThis page is for information regarding the backend process of the Referral Process.\n\nReferral Process\n\nGitLab's Referral program is fairly straight-forward, there are several nuances to be mindful of. This is a review of the program rules and eligibility.\n\nSourcing\n\nSourcing has proved itself to be a great channel for attracting the best talent, this page details how we source talent at GitLab.\n\nTalent Acquisition Alignment\n\nThis page is an overview of the search team alignment and the talent acquisition platform directly responsible individual in talent acquisition operations and talent brand.\n\nTalent Acquisition Meeting Cadence\n\nThe Talent Acquisition team has a regular schedule of meetings. Please see below for information about cadence and attendance.\n\nTalent Acquisition Process Framework\n\nThis page is an overview of the processes each party of the search team is responsible for. It links each party or process.\n\nLast modified November 1, 2024: Remove trailing spaces (6f6d0996)\n\nView page source - Edit this page - please contribute.")]
2024-12-06 23:14:01,194 - common.logger - INFO - Faiss index saved to faiss_index_file
2024-12-06 23:14:01,194 - common.logger - INFO - Successfully indexed documents from https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:14:01,194 - common.logger - INFO - https://handbook.gitlab.com/handbook/hiring/ uploaded successfully!
2024-12-06 23:15:08,750 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:15:08,750 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:15:09,665 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:15:09,767 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:16:06,058 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:16:06,058 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:16:07,009 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:16:07,107 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:16:20,016 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {}
2024-12-06 23:16:20,016 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:16:20,017 - common.logger - INFO - Document 3: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:17:55,049 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:17:55,050 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:17:55,693 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:17:55,791 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:18:00,384 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {}
2024-12-06 23:18:00,384 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:18:00,384 - common.logger - INFO - Document 3: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:20:12,056 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:20:12,057 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:20:12,757 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:20:12,854 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:20:38,681 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:20:38,681 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:20:39,377 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:20:39,473 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:20:52,304 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {}
2024-12-06 23:20:52,304 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:20:52,304 - common.logger - INFO - Document 3: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:20:54,562 - common.logger - ERROR - Error processing query: 'AIMessage' object has no attribute 'get'
2024-12-06 23:21:18,424 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:21:18,424 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:21:19,064 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:21:19,151 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:21:23,163 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {}
2024-12-06 23:21:23,163 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:21:23,163 - common.logger - INFO - Document 3: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:21:24,772 - common.logger - ERROR - Error processing query: name 'answer' is not defined
2024-12-06 23:22:19,651 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:22:19,652 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:22:25,195 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:22:25,195 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:22:42,492 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:22:42,493 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:22:43,198 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:22:43,300 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:22:47,672 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {}
2024-12-06 23:22:47,673 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:22:47,673 - common.logger - INFO - Document 3: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:25:38,100 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:25:38,101 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:25:38,709 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:25:38,808 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:26:21,260 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:26:21,261 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:26:21,925 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:26:22,023 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:26:30,536 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {}
2024-12-06 23:26:30,536 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:26:30,537 - common.logger - INFO - Document 3: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:26:32,395 - common.logger - ERROR - Error processing query: name 'answer' is not defined
2024-12-06 23:27:09,641 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:27:09,642 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:27:10,983 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:27:10,983 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:27:11,614 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:27:11,701 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:27:15,587 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {}
2024-12-06 23:27:15,587 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:27:15,587 - common.logger - INFO - Document 3: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:27:17,208 - common.logger - ERROR - Error processing query: name 'source_documents' is not defined
2024-12-06 23:27:32,875 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:27:32,876 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:27:33,547 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:27:33,643 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:27:48,124 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:27:48,125 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:27:48,752 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:27:48,850 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:27:50,913 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {}
2024-12-06 23:27:50,913 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:27:50,913 - common.logger - INFO - Document 3: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:28:15,801 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:28:15,803 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:28:16,449 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:28:16,538 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:28:19,178 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {}
2024-12-06 23:28:19,178 - common.logger - INFO - Document 2: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:28:19,178 - common.logger - INFO - Document 3: GitLab Direction

Maintained by:

David DeSanto

@david

Contribute to this page

Edit this page

You are here:

GitLab Direction

The following page may contain information related to upcoming produc... | Metadata: {}
2024-12-06 23:33:49,205 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:33:49,207 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:33:49,863 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:33:49,951 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:34:32,844 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:34:32,844 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:34:33,552 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:34:34,166 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:34:55,480 - common.logger - INFO - Processing URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:34:55,480 - common.logger - INFO - URL https://handbook.gitlab.com/handbook/hiring/ is not a sitemap.
2024-12-06 23:34:55,480 - common.logger - INFO - Processing regular URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:35:02,829 - common.logger - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/hiring/'}, page_content="Hiring & Talent Acquisition Handbook\n\nLanding page for many of the handbook pages the talent acquisition team at GitLab uses.\n\nAt the core of our team’s vision, mission, and strategy is our ability to impact GitLab’s overarching mission: to make it so that everyone can contribute to and co-create the software that powers our world. When everyone can contribute, users become contributors and we greatly increase the rate of innovation.\n\nAs a Talent Acquisition team, we have an outsized impact on GitLab’s ability to make this mission a reality, by connecting top talent to profound careers from wherever they are in a truly distributed, remote workforce.\n\nTalent Acquisition Vision Statement\n\nTo create globally inclusive access to opportunities so that everyone can contribute to and co-create the software that powers our world.\n\nTalent Acquisition Mission Statement\n\nIt is the Talent Acquisition Team’s mission to predictably build distributed, representative teams that enable team members to co-create the future of software.\n\nOur Guiding Principles\n\nAs we set out to achieve this vision, we will continue to rely on core guiding principles to define how we build toward the future.\n\nExperience: Stakeholder experience is central to our craft. We are a partner, an advisor, and an essential component to building high performing teams and culture at GitLab.\n\nInclusivity: We design fair and equitable processes into the fabric of what we do. We believe Talent Acquisition has an outsized impact on the make-up of our teams, and we strive to continue to build them with inclusivity as a integral piece of our craft.\n\nPredictability: Our ability to have the right team members, in the right roles, at the right time is imperative to execute on our commitments and plans as an organization. We strive for predictability: to build accuracy in our forecasts and enable the business to look around corners through strong relationships and data driven decision making.\n\nOur Objectives and Roadmap\n\nWe strive to be as transparent as possible, but these sections are only available for our GitLab team members. Talent Acquisition Strategy\n\nTalent Acquisition Pages and Processes\n\nTeam Process Pages\n\nTA Key Performance Indicators Note: this page is currently in our internal handbook as they are a work in progress.\n\nMeeting Cadence\n\nTalent Acquisition Alignment\n\nDiversity, Inclusion & Belonging Talent Acquisition Initiatives\n\nTriad Process\n\nQuarterly Updates Note: Internal only\n\nCandidate Handbook Pages\n\nPlease find pages for potential and active applicants below.\n\nCandidate Handbook Page\n\nTalent Acquisition Privacy Policy\n\nInterviewer Processes\n\nInterviewer Prep Requirements\n\nConducting a GitLab Interview\n\nGreenhouse for Interviewers\n\nHiring Manager Processes\n\nHiring Manager Processes\n\nConducting a GitLab Interview\n\nGreenhouse for Hiring Managers\n\nCandidate Experience Specialist Processes\n\nCandidate Experience Specialist Responsibilities\n\nPrelude\n\nHow to Complete a Contract - CES Process\n\nRecruiters and Sourcers\n\nOpening a job\n\nInterview Stages\n\nIf a candidate is in one job and needs to move to another, it’s important to correctly determine whether they should be added or transferred. Both are accessible by clicking the ‘Add, Transfer, or Remove Candidate’s Jobs’ button on the bottom right corner of your candidate profile.\n\nBefore making any moves, always ensure the candidate does not have any interviews scheduled. Transferring will automatically remove scheduled interviews and make them invisible on the candidates’ Guide, but will not cancel the interview from the interviewers’ calendar or inform the candidate of what is happening. Always wait until the interview has been completed, or fully cancel the interview and reschedule under the new req.\n\nWhen you add a candidate to a new job, the candidate starts the new job with a clean slate. There will be no scorecards or forms from any other position. This should be chosen when you are starting a brand new hiring process and will not be considering scorecards from any other job, and want their application date to be the date that you add them.\n\nWhen you transfer a candidate from one job to another, most of their data before the reference check stage moves with them. Scorecards will be visible in the “Scorecards” tab and their original application date will remain. Scorecards that have not been submitted cannot be submitted after transfer, so make sure you collect those before you make your move. Offers and forms are also not transferable, so it’s important to transfer before a candidate hits the Reference Check stage. When you are moving someone from an Evergreen req into the role they will be hired into, you should always transfer. There will be no record of the previous job in any reporting.\n\nSometimes, deciding whether to add or transfer can be tricky. If a candidate interviewed for a role that was filled by someone else, and you get a new headcount a few months later, should you transfer them into the new job or add them and start over? One thing to consider is the implication your choice will have on the data. In this case, a candidate who transfers will appear to have been in the hiring process for months, when you’ve actually only been talking to them about this opening for a few days. At the same time, you want to save their scorecards because they’ll be relevant for the new job. In another situation, you could have an applicant who was being considered for the role, was rejected by the Hiring Manager, but contacted a few months later when the scope of the role changed and they were now considered a good fit. The key to knowing when to transfer is understanding what impact it would have on our data, and what solution would paint the most accurate picture. If you’re not sure whether to add or transfer, you should check in with Enablement to get another opinion.\n\nWhen rejecting candidates, it’s important to carefully review all rejection reasons and pick the one that most accurately describes why a candidate is being rejected. This is because data is analyzed on a quarterly basis by the Talent Acquisition Leadership team, People Leadership Team, and E-Group.\n\nOnce you’ve clicked the most detailed reason, include detailed context on the reason in the “Rejection Notes” box. Please be as specific as possible. For example, instead of writing “the candidate rejected because of compensation”, write “the candidate rejected because the salary and equity that we offered was much lower than a competing offer.”\n\nPlease note that you cannot submit scorecards after rejecting a candidate.\n\nWe will not cancel an interview within less than 24 hours’ notice if the candidate is being rejected. The recruiter will notify the candidate that they are no longer in consideration for the role and present them with the option to continue with the scheduled interview slot. The interviewer must be informed, and will not discuss the feedback that led to the decline. The conversation will pivot to general opportunities at GitLab and answering any questions about the company and team that the candidate may have.\n\nIf the candidate’s interview is outside 24 hours, the interview should be deleted in Greenhouse before the candidate is rejected and notified. The candidate should always be notified if they’ve been rejected, and the recruiter is responsible for declining the candidate. Any interviews scheduled will also not be automatically canceled, so you’ll need to ensure this happens first.\n\nIf the candidate does not join the interview room within 10 minutes or fails to complete their MR within the specified time before the interview, the interview will be cancelled and the recruiter will get in touch with the candidate and not schedule further interviews.\n\nIf the candidate notifies us that they are unable to attend the interview before the scheduled time, CES can automatically reschedule using the candidates’ current availability or by requesting fresh availability.\n\nIf we have rescheduled at the request of the candidate and the candidate requests to move the interview again without reasonable explanation, the recruiter will automatically reject the candidate.\n\nWe understand that there may be extenuating circumstances leading to the above situations where a candidate is unavailable or unprepared. It is at the recruiter’s discretion to reengage or choose to reschedule.\n\nOffers and Closing Reqs\n\nVerbal offer information\n\nDeclined offer steps\n\nSourcing at GitLab\n\nSourcing overview\n\nIdentifying prospects\n\nNotifications\n\nThere are no perfect or required ways to set up your Greenhouse notifications, but these are some of our recommendations.\n\nTalent Acquisition Programs\n\nReferrals\n\nReferral Operations\n\nReferral Process\n\nDetails on who is eligible for referrals\n\nAcquisitions\n\nAcquisitions\n\nInternal Mobility\n\nInternal Hiring Process\n\nPosting a job internally\n\nIn the offer process\n\nExecutive Hiring\n\nExecutive Search\n\nEmerging Talent\n\nEmerging Talent\n\nAssociate Engineer Development\n\nGlobal Hiring Resources\n\nOther Hiring Pages\n\nGreenhouse\n\nTalent Acquisition Process Framework\n\nAdditional Resources\n\nOverview of Job Families\n\nBackground checks\n\nBenefits\n\nCompensation\n\nContracts\n\nGitLab talent ambassador\n\nOnboarding\n\nStock options\n\nVisas\n\nCandidate Handbook Page\n\nThis page outlines what hiring looks like at GitLab. We share the latest information about our processes and practices to ensure you have the information you need to feel confident during the interview process.\n\nConducting a GitLab Interview\n\nHelpful information about how to prepare and conduct interviews for GitLab\n\nEmerging Talent @ GitLab\n\nOverview of Emerging Talent @ GitLab\n\nGitLab talent ambassador\n\nKeeping with our mission that everyone can contribute, we want all GitLab team members to feel encouraged and equipped to take part in helping us find great talent and act as ambassadors for the company and our talent brand.\n\nGreenhouse\n\nGreenhouse is GitLab's ATS (Applicant Tracking System). All Hiring Managers and Interviewers will use Greenhouse to review resumes, provide feedback, communicate with candidates, and more.\n\nGuide\n\nGuide is a program GitLab uses to increase candidate experience by having an easily digestable and enjoyable resource that houses all interview details and relevant handbook pages depending on where the candidate is in the hiring process.\n\nInterviewer Prep Requirements\n\nLearn more about the tools required to prepare you for interviewing at GitLab\n\nJob Families\n\nJob families are organized by function at GitLab and we use them to inform candidates of roles and current team members to evaluate their performance.\n\nMERGE: Ongoing Development for Associate Engineers\n\nCongratulations and welcome to the GitLab team! We’re excited to have you on board as you start this exciting new chapter in your engineering career. Our comprehensive ongoing development program is designed to support you every step of the way - from your first day, to your first merge request, and beyond. You’ll have support from your manager, onboarding buddy, and the Talent Development team; don’t ever hesitate to reach out.\n\nPrelude\n\nPrelude (formerly Interview Schedule) is a program GitLab uses to increase efficiency in scheduling interviews.\n\nReferral Operations\n\nThis page is for information regarding the backend process of the Referral Process.\n\nReferral Process\n\nGitLab's Referral program is fairly straight-forward, there are several nuances to be mindful of. This is a review of the program rules and eligibility.\n\nSourcing\n\nSourcing has proved itself to be a great channel for attracting the best talent, this page details how we source talent at GitLab.\n\nTalent Acquisition Alignment\n\nThis page is an overview of the search team alignment and the talent acquisition platform directly responsible individual in talent acquisition operations and talent brand.\n\nTalent Acquisition Meeting Cadence\n\nThe Talent Acquisition team has a regular schedule of meetings. Please see below for information about cadence and attendance.\n\nTalent Acquisition Process Framework\n\nThis page is an overview of the processes each party of the search team is responsible for. It links each party or process.\n\nLast modified November 1, 2024: Remove trailing spaces (6f6d0996)\n\nView page source - Edit this page - please contribute.")]
2024-12-06 23:35:03,919 - common.logger - INFO - Faiss index saved to faiss_index_file
2024-12-06 23:35:03,919 - common.logger - INFO - Successfully indexed documents from https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:35:03,919 - common.logger - INFO - https://handbook.gitlab.com/handbook/hiring/ uploaded successfully!
2024-12-06 23:35:12,981 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {}
2024-12-06 23:42:37,892 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:42:37,892 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:42:38,507 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:42:38,598 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:43:17,258 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:43:17,258 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:43:17,915 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:43:18,002 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:43:50,637 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:43:50,638 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:43:51,266 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:43:51,822 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:44:00,571 - common.logger - INFO - Processing URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:44:00,571 - common.logger - INFO - URL https://handbook.gitlab.com/handbook/hiring/ is not a sitemap.
2024-12-06 23:44:00,571 - common.logger - INFO - Processing regular URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:44:08,123 - common.logger - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/hiring/'}, page_content="Hiring & Talent Acquisition Handbook\n\nLanding page for many of the handbook pages the talent acquisition team at GitLab uses.\n\nAt the core of our team’s vision, mission, and strategy is our ability to impact GitLab’s overarching mission: to make it so that everyone can contribute to and co-create the software that powers our world. When everyone can contribute, users become contributors and we greatly increase the rate of innovation.\n\nAs a Talent Acquisition team, we have an outsized impact on GitLab’s ability to make this mission a reality, by connecting top talent to profound careers from wherever they are in a truly distributed, remote workforce.\n\nTalent Acquisition Vision Statement\n\nTo create globally inclusive access to opportunities so that everyone can contribute to and co-create the software that powers our world.\n\nTalent Acquisition Mission Statement\n\nIt is the Talent Acquisition Team’s mission to predictably build distributed, representative teams that enable team members to co-create the future of software.\n\nOur Guiding Principles\n\nAs we set out to achieve this vision, we will continue to rely on core guiding principles to define how we build toward the future.\n\nExperience: Stakeholder experience is central to our craft. We are a partner, an advisor, and an essential component to building high performing teams and culture at GitLab.\n\nInclusivity: We design fair and equitable processes into the fabric of what we do. We believe Talent Acquisition has an outsized impact on the make-up of our teams, and we strive to continue to build them with inclusivity as a integral piece of our craft.\n\nPredictability: Our ability to have the right team members, in the right roles, at the right time is imperative to execute on our commitments and plans as an organization. We strive for predictability: to build accuracy in our forecasts and enable the business to look around corners through strong relationships and data driven decision making.\n\nOur Objectives and Roadmap\n\nWe strive to be as transparent as possible, but these sections are only available for our GitLab team members. Talent Acquisition Strategy\n\nTalent Acquisition Pages and Processes\n\nTeam Process Pages\n\nTA Key Performance Indicators Note: this page is currently in our internal handbook as they are a work in progress.\n\nMeeting Cadence\n\nTalent Acquisition Alignment\n\nDiversity, Inclusion & Belonging Talent Acquisition Initiatives\n\nTriad Process\n\nQuarterly Updates Note: Internal only\n\nCandidate Handbook Pages\n\nPlease find pages for potential and active applicants below.\n\nCandidate Handbook Page\n\nTalent Acquisition Privacy Policy\n\nInterviewer Processes\n\nInterviewer Prep Requirements\n\nConducting a GitLab Interview\n\nGreenhouse for Interviewers\n\nHiring Manager Processes\n\nHiring Manager Processes\n\nConducting a GitLab Interview\n\nGreenhouse for Hiring Managers\n\nCandidate Experience Specialist Processes\n\nCandidate Experience Specialist Responsibilities\n\nPrelude\n\nHow to Complete a Contract - CES Process\n\nRecruiters and Sourcers\n\nOpening a job\n\nInterview Stages\n\nIf a candidate is in one job and needs to move to another, it’s important to correctly determine whether they should be added or transferred. Both are accessible by clicking the ‘Add, Transfer, or Remove Candidate’s Jobs’ button on the bottom right corner of your candidate profile.\n\nBefore making any moves, always ensure the candidate does not have any interviews scheduled. Transferring will automatically remove scheduled interviews and make them invisible on the candidates’ Guide, but will not cancel the interview from the interviewers’ calendar or inform the candidate of what is happening. Always wait until the interview has been completed, or fully cancel the interview and reschedule under the new req.\n\nWhen you add a candidate to a new job, the candidate starts the new job with a clean slate. There will be no scorecards or forms from any other position. This should be chosen when you are starting a brand new hiring process and will not be considering scorecards from any other job, and want their application date to be the date that you add them.\n\nWhen you transfer a candidate from one job to another, most of their data before the reference check stage moves with them. Scorecards will be visible in the “Scorecards” tab and their original application date will remain. Scorecards that have not been submitted cannot be submitted after transfer, so make sure you collect those before you make your move. Offers and forms are also not transferable, so it’s important to transfer before a candidate hits the Reference Check stage. When you are moving someone from an Evergreen req into the role they will be hired into, you should always transfer. There will be no record of the previous job in any reporting.\n\nSometimes, deciding whether to add or transfer can be tricky. If a candidate interviewed for a role that was filled by someone else, and you get a new headcount a few months later, should you transfer them into the new job or add them and start over? One thing to consider is the implication your choice will have on the data. In this case, a candidate who transfers will appear to have been in the hiring process for months, when you’ve actually only been talking to them about this opening for a few days. At the same time, you want to save their scorecards because they’ll be relevant for the new job. In another situation, you could have an applicant who was being considered for the role, was rejected by the Hiring Manager, but contacted a few months later when the scope of the role changed and they were now considered a good fit. The key to knowing when to transfer is understanding what impact it would have on our data, and what solution would paint the most accurate picture. If you’re not sure whether to add or transfer, you should check in with Enablement to get another opinion.\n\nWhen rejecting candidates, it’s important to carefully review all rejection reasons and pick the one that most accurately describes why a candidate is being rejected. This is because data is analyzed on a quarterly basis by the Talent Acquisition Leadership team, People Leadership Team, and E-Group.\n\nOnce you’ve clicked the most detailed reason, include detailed context on the reason in the “Rejection Notes” box. Please be as specific as possible. For example, instead of writing “the candidate rejected because of compensation”, write “the candidate rejected because the salary and equity that we offered was much lower than a competing offer.”\n\nPlease note that you cannot submit scorecards after rejecting a candidate.\n\nWe will not cancel an interview within less than 24 hours’ notice if the candidate is being rejected. The recruiter will notify the candidate that they are no longer in consideration for the role and present them with the option to continue with the scheduled interview slot. The interviewer must be informed, and will not discuss the feedback that led to the decline. The conversation will pivot to general opportunities at GitLab and answering any questions about the company and team that the candidate may have.\n\nIf the candidate’s interview is outside 24 hours, the interview should be deleted in Greenhouse before the candidate is rejected and notified. The candidate should always be notified if they’ve been rejected, and the recruiter is responsible for declining the candidate. Any interviews scheduled will also not be automatically canceled, so you’ll need to ensure this happens first.\n\nIf the candidate does not join the interview room within 10 minutes or fails to complete their MR within the specified time before the interview, the interview will be cancelled and the recruiter will get in touch with the candidate and not schedule further interviews.\n\nIf the candidate notifies us that they are unable to attend the interview before the scheduled time, CES can automatically reschedule using the candidates’ current availability or by requesting fresh availability.\n\nIf we have rescheduled at the request of the candidate and the candidate requests to move the interview again without reasonable explanation, the recruiter will automatically reject the candidate.\n\nWe understand that there may be extenuating circumstances leading to the above situations where a candidate is unavailable or unprepared. It is at the recruiter’s discretion to reengage or choose to reschedule.\n\nOffers and Closing Reqs\n\nVerbal offer information\n\nDeclined offer steps\n\nSourcing at GitLab\n\nSourcing overview\n\nIdentifying prospects\n\nNotifications\n\nThere are no perfect or required ways to set up your Greenhouse notifications, but these are some of our recommendations.\n\nTalent Acquisition Programs\n\nReferrals\n\nReferral Operations\n\nReferral Process\n\nDetails on who is eligible for referrals\n\nAcquisitions\n\nAcquisitions\n\nInternal Mobility\n\nInternal Hiring Process\n\nPosting a job internally\n\nIn the offer process\n\nExecutive Hiring\n\nExecutive Search\n\nEmerging Talent\n\nEmerging Talent\n\nAssociate Engineer Development\n\nGlobal Hiring Resources\n\nOther Hiring Pages\n\nGreenhouse\n\nTalent Acquisition Process Framework\n\nAdditional Resources\n\nOverview of Job Families\n\nBackground checks\n\nBenefits\n\nCompensation\n\nContracts\n\nGitLab talent ambassador\n\nOnboarding\n\nStock options\n\nVisas\n\nCandidate Handbook Page\n\nThis page outlines what hiring looks like at GitLab. We share the latest information about our processes and practices to ensure you have the information you need to feel confident during the interview process.\n\nConducting a GitLab Interview\n\nHelpful information about how to prepare and conduct interviews for GitLab\n\nEmerging Talent @ GitLab\n\nOverview of Emerging Talent @ GitLab\n\nGitLab talent ambassador\n\nKeeping with our mission that everyone can contribute, we want all GitLab team members to feel encouraged and equipped to take part in helping us find great talent and act as ambassadors for the company and our talent brand.\n\nGreenhouse\n\nGreenhouse is GitLab's ATS (Applicant Tracking System). All Hiring Managers and Interviewers will use Greenhouse to review resumes, provide feedback, communicate with candidates, and more.\n\nGuide\n\nGuide is a program GitLab uses to increase candidate experience by having an easily digestable and enjoyable resource that houses all interview details and relevant handbook pages depending on where the candidate is in the hiring process.\n\nInterviewer Prep Requirements\n\nLearn more about the tools required to prepare you for interviewing at GitLab\n\nJob Families\n\nJob families are organized by function at GitLab and we use them to inform candidates of roles and current team members to evaluate their performance.\n\nMERGE: Ongoing Development for Associate Engineers\n\nCongratulations and welcome to the GitLab team! We’re excited to have you on board as you start this exciting new chapter in your engineering career. Our comprehensive ongoing development program is designed to support you every step of the way - from your first day, to your first merge request, and beyond. You’ll have support from your manager, onboarding buddy, and the Talent Development team; don’t ever hesitate to reach out.\n\nPrelude\n\nPrelude (formerly Interview Schedule) is a program GitLab uses to increase efficiency in scheduling interviews.\n\nReferral Operations\n\nThis page is for information regarding the backend process of the Referral Process.\n\nReferral Process\n\nGitLab's Referral program is fairly straight-forward, there are several nuances to be mindful of. This is a review of the program rules and eligibility.\n\nSourcing\n\nSourcing has proved itself to be a great channel for attracting the best talent, this page details how we source talent at GitLab.\n\nTalent Acquisition Alignment\n\nThis page is an overview of the search team alignment and the talent acquisition platform directly responsible individual in talent acquisition operations and talent brand.\n\nTalent Acquisition Meeting Cadence\n\nThe Talent Acquisition team has a regular schedule of meetings. Please see below for information about cadence and attendance.\n\nTalent Acquisition Process Framework\n\nThis page is an overview of the processes each party of the search team is responsible for. It links each party or process.\n\nLast modified November 1, 2024: Remove trailing spaces (6f6d0996)\n\nView page source - Edit this page - please contribute.")]
2024-12-06 23:44:08,123 - common.logger - ERROR - An error occurred while uploading and indexing the URL https://handbook.gitlab.com/handbook/hiring/: index_documents() missing 1 required positional argument: 'url'
2024-12-06 23:44:08,123 - common.logger - ERROR - 500: An error occurred while uploading and indexing the URL: index_documents() missing 1 required positional argument: 'url'
2024-12-06 23:44:28,154 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:44:28,155 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:44:28,892 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:44:29,457 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:46:26,244 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:46:26,244 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:46:26,931 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:46:27,548 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:46:29,287 - common.logger - INFO - Processing URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:46:29,287 - common.logger - INFO - URL https://handbook.gitlab.com/handbook/hiring/ is not a sitemap.
2024-12-06 23:46:29,287 - common.logger - INFO - Processing regular URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:46:36,273 - common.logger - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/hiring/'}, page_content="Hiring & Talent Acquisition Handbook\n\nLanding page for many of the handbook pages the talent acquisition team at GitLab uses.\n\nAt the core of our team’s vision, mission, and strategy is our ability to impact GitLab’s overarching mission: to make it so that everyone can contribute to and co-create the software that powers our world. When everyone can contribute, users become contributors and we greatly increase the rate of innovation.\n\nAs a Talent Acquisition team, we have an outsized impact on GitLab’s ability to make this mission a reality, by connecting top talent to profound careers from wherever they are in a truly distributed, remote workforce.\n\nTalent Acquisition Vision Statement\n\nTo create globally inclusive access to opportunities so that everyone can contribute to and co-create the software that powers our world.\n\nTalent Acquisition Mission Statement\n\nIt is the Talent Acquisition Team’s mission to predictably build distributed, representative teams that enable team members to co-create the future of software.\n\nOur Guiding Principles\n\nAs we set out to achieve this vision, we will continue to rely on core guiding principles to define how we build toward the future.\n\nExperience: Stakeholder experience is central to our craft. We are a partner, an advisor, and an essential component to building high performing teams and culture at GitLab.\n\nInclusivity: We design fair and equitable processes into the fabric of what we do. We believe Talent Acquisition has an outsized impact on the make-up of our teams, and we strive to continue to build them with inclusivity as a integral piece of our craft.\n\nPredictability: Our ability to have the right team members, in the right roles, at the right time is imperative to execute on our commitments and plans as an organization. We strive for predictability: to build accuracy in our forecasts and enable the business to look around corners through strong relationships and data driven decision making.\n\nOur Objectives and Roadmap\n\nWe strive to be as transparent as possible, but these sections are only available for our GitLab team members. Talent Acquisition Strategy\n\nTalent Acquisition Pages and Processes\n\nTeam Process Pages\n\nTA Key Performance Indicators Note: this page is currently in our internal handbook as they are a work in progress.\n\nMeeting Cadence\n\nTalent Acquisition Alignment\n\nDiversity, Inclusion & Belonging Talent Acquisition Initiatives\n\nTriad Process\n\nQuarterly Updates Note: Internal only\n\nCandidate Handbook Pages\n\nPlease find pages for potential and active applicants below.\n\nCandidate Handbook Page\n\nTalent Acquisition Privacy Policy\n\nInterviewer Processes\n\nInterviewer Prep Requirements\n\nConducting a GitLab Interview\n\nGreenhouse for Interviewers\n\nHiring Manager Processes\n\nHiring Manager Processes\n\nConducting a GitLab Interview\n\nGreenhouse for Hiring Managers\n\nCandidate Experience Specialist Processes\n\nCandidate Experience Specialist Responsibilities\n\nPrelude\n\nHow to Complete a Contract - CES Process\n\nRecruiters and Sourcers\n\nOpening a job\n\nInterview Stages\n\nIf a candidate is in one job and needs to move to another, it’s important to correctly determine whether they should be added or transferred. Both are accessible by clicking the ‘Add, Transfer, or Remove Candidate’s Jobs’ button on the bottom right corner of your candidate profile.\n\nBefore making any moves, always ensure the candidate does not have any interviews scheduled. Transferring will automatically remove scheduled interviews and make them invisible on the candidates’ Guide, but will not cancel the interview from the interviewers’ calendar or inform the candidate of what is happening. Always wait until the interview has been completed, or fully cancel the interview and reschedule under the new req.\n\nWhen you add a candidate to a new job, the candidate starts the new job with a clean slate. There will be no scorecards or forms from any other position. This should be chosen when you are starting a brand new hiring process and will not be considering scorecards from any other job, and want their application date to be the date that you add them.\n\nWhen you transfer a candidate from one job to another, most of their data before the reference check stage moves with them. Scorecards will be visible in the “Scorecards” tab and their original application date will remain. Scorecards that have not been submitted cannot be submitted after transfer, so make sure you collect those before you make your move. Offers and forms are also not transferable, so it’s important to transfer before a candidate hits the Reference Check stage. When you are moving someone from an Evergreen req into the role they will be hired into, you should always transfer. There will be no record of the previous job in any reporting.\n\nSometimes, deciding whether to add or transfer can be tricky. If a candidate interviewed for a role that was filled by someone else, and you get a new headcount a few months later, should you transfer them into the new job or add them and start over? One thing to consider is the implication your choice will have on the data. In this case, a candidate who transfers will appear to have been in the hiring process for months, when you’ve actually only been talking to them about this opening for a few days. At the same time, you want to save their scorecards because they’ll be relevant for the new job. In another situation, you could have an applicant who was being considered for the role, was rejected by the Hiring Manager, but contacted a few months later when the scope of the role changed and they were now considered a good fit. The key to knowing when to transfer is understanding what impact it would have on our data, and what solution would paint the most accurate picture. If you’re not sure whether to add or transfer, you should check in with Enablement to get another opinion.\n\nWhen rejecting candidates, it’s important to carefully review all rejection reasons and pick the one that most accurately describes why a candidate is being rejected. This is because data is analyzed on a quarterly basis by the Talent Acquisition Leadership team, People Leadership Team, and E-Group.\n\nOnce you’ve clicked the most detailed reason, include detailed context on the reason in the “Rejection Notes” box. Please be as specific as possible. For example, instead of writing “the candidate rejected because of compensation”, write “the candidate rejected because the salary and equity that we offered was much lower than a competing offer.”\n\nPlease note that you cannot submit scorecards after rejecting a candidate.\n\nWe will not cancel an interview within less than 24 hours’ notice if the candidate is being rejected. The recruiter will notify the candidate that they are no longer in consideration for the role and present them with the option to continue with the scheduled interview slot. The interviewer must be informed, and will not discuss the feedback that led to the decline. The conversation will pivot to general opportunities at GitLab and answering any questions about the company and team that the candidate may have.\n\nIf the candidate’s interview is outside 24 hours, the interview should be deleted in Greenhouse before the candidate is rejected and notified. The candidate should always be notified if they’ve been rejected, and the recruiter is responsible for declining the candidate. Any interviews scheduled will also not be automatically canceled, so you’ll need to ensure this happens first.\n\nIf the candidate does not join the interview room within 10 minutes or fails to complete their MR within the specified time before the interview, the interview will be cancelled and the recruiter will get in touch with the candidate and not schedule further interviews.\n\nIf the candidate notifies us that they are unable to attend the interview before the scheduled time, CES can automatically reschedule using the candidates’ current availability or by requesting fresh availability.\n\nIf we have rescheduled at the request of the candidate and the candidate requests to move the interview again without reasonable explanation, the recruiter will automatically reject the candidate.\n\nWe understand that there may be extenuating circumstances leading to the above situations where a candidate is unavailable or unprepared. It is at the recruiter’s discretion to reengage or choose to reschedule.\n\nOffers and Closing Reqs\n\nVerbal offer information\n\nDeclined offer steps\n\nSourcing at GitLab\n\nSourcing overview\n\nIdentifying prospects\n\nNotifications\n\nThere are no perfect or required ways to set up your Greenhouse notifications, but these are some of our recommendations.\n\nTalent Acquisition Programs\n\nReferrals\n\nReferral Operations\n\nReferral Process\n\nDetails on who is eligible for referrals\n\nAcquisitions\n\nAcquisitions\n\nInternal Mobility\n\nInternal Hiring Process\n\nPosting a job internally\n\nIn the offer process\n\nExecutive Hiring\n\nExecutive Search\n\nEmerging Talent\n\nEmerging Talent\n\nAssociate Engineer Development\n\nGlobal Hiring Resources\n\nOther Hiring Pages\n\nGreenhouse\n\nTalent Acquisition Process Framework\n\nAdditional Resources\n\nOverview of Job Families\n\nBackground checks\n\nBenefits\n\nCompensation\n\nContracts\n\nGitLab talent ambassador\n\nOnboarding\n\nStock options\n\nVisas\n\nCandidate Handbook Page\n\nThis page outlines what hiring looks like at GitLab. We share the latest information about our processes and practices to ensure you have the information you need to feel confident during the interview process.\n\nConducting a GitLab Interview\n\nHelpful information about how to prepare and conduct interviews for GitLab\n\nEmerging Talent @ GitLab\n\nOverview of Emerging Talent @ GitLab\n\nGitLab talent ambassador\n\nKeeping with our mission that everyone can contribute, we want all GitLab team members to feel encouraged and equipped to take part in helping us find great talent and act as ambassadors for the company and our talent brand.\n\nGreenhouse\n\nGreenhouse is GitLab's ATS (Applicant Tracking System). All Hiring Managers and Interviewers will use Greenhouse to review resumes, provide feedback, communicate with candidates, and more.\n\nGuide\n\nGuide is a program GitLab uses to increase candidate experience by having an easily digestable and enjoyable resource that houses all interview details and relevant handbook pages depending on where the candidate is in the hiring process.\n\nInterviewer Prep Requirements\n\nLearn more about the tools required to prepare you for interviewing at GitLab\n\nJob Families\n\nJob families are organized by function at GitLab and we use them to inform candidates of roles and current team members to evaluate their performance.\n\nMERGE: Ongoing Development for Associate Engineers\n\nCongratulations and welcome to the GitLab team! We’re excited to have you on board as you start this exciting new chapter in your engineering career. Our comprehensive ongoing development program is designed to support you every step of the way - from your first day, to your first merge request, and beyond. You’ll have support from your manager, onboarding buddy, and the Talent Development team; don’t ever hesitate to reach out.\n\nPrelude\n\nPrelude (formerly Interview Schedule) is a program GitLab uses to increase efficiency in scheduling interviews.\n\nReferral Operations\n\nThis page is for information regarding the backend process of the Referral Process.\n\nReferral Process\n\nGitLab's Referral program is fairly straight-forward, there are several nuances to be mindful of. This is a review of the program rules and eligibility.\n\nSourcing\n\nSourcing has proved itself to be a great channel for attracting the best talent, this page details how we source talent at GitLab.\n\nTalent Acquisition Alignment\n\nThis page is an overview of the search team alignment and the talent acquisition platform directly responsible individual in talent acquisition operations and talent brand.\n\nTalent Acquisition Meeting Cadence\n\nThe Talent Acquisition team has a regular schedule of meetings. Please see below for information about cadence and attendance.\n\nTalent Acquisition Process Framework\n\nThis page is an overview of the processes each party of the search team is responsible for. It links each party or process.\n\nLast modified November 1, 2024: Remove trailing spaces (6f6d0996)\n\nView page source - Edit this page - please contribute.")]
2024-12-06 23:46:36,274 - common.logger - ERROR - An error occurred while uploading and indexing the URL https://handbook.gitlab.com/handbook/hiring/: index_documents() missing 1 required positional argument: 'url'
2024-12-06 23:46:36,274 - common.logger - ERROR - 500: An error occurred while uploading and indexing the URL: index_documents() missing 1 required positional argument: 'url'
2024-12-06 23:47:05,781 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:47:05,782 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:47:06,495 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:47:07,270 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:48:12,256 - common.logger - INFO - Processing URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:48:12,258 - common.logger - INFO - URL https://handbook.gitlab.com/handbook/hiring/ is not a sitemap.
2024-12-06 23:48:12,258 - common.logger - INFO - Processing regular URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:48:19,579 - common.logger - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/hiring/'}, page_content="Hiring & Talent Acquisition Handbook\n\nLanding page for many of the handbook pages the talent acquisition team at GitLab uses.\n\nAt the core of our team’s vision, mission, and strategy is our ability to impact GitLab’s overarching mission: to make it so that everyone can contribute to and co-create the software that powers our world. When everyone can contribute, users become contributors and we greatly increase the rate of innovation.\n\nAs a Talent Acquisition team, we have an outsized impact on GitLab’s ability to make this mission a reality, by connecting top talent to profound careers from wherever they are in a truly distributed, remote workforce.\n\nTalent Acquisition Vision Statement\n\nTo create globally inclusive access to opportunities so that everyone can contribute to and co-create the software that powers our world.\n\nTalent Acquisition Mission Statement\n\nIt is the Talent Acquisition Team’s mission to predictably build distributed, representative teams that enable team members to co-create the future of software.\n\nOur Guiding Principles\n\nAs we set out to achieve this vision, we will continue to rely on core guiding principles to define how we build toward the future.\n\nExperience: Stakeholder experience is central to our craft. We are a partner, an advisor, and an essential component to building high performing teams and culture at GitLab.\n\nInclusivity: We design fair and equitable processes into the fabric of what we do. We believe Talent Acquisition has an outsized impact on the make-up of our teams, and we strive to continue to build them with inclusivity as a integral piece of our craft.\n\nPredictability: Our ability to have the right team members, in the right roles, at the right time is imperative to execute on our commitments and plans as an organization. We strive for predictability: to build accuracy in our forecasts and enable the business to look around corners through strong relationships and data driven decision making.\n\nOur Objectives and Roadmap\n\nWe strive to be as transparent as possible, but these sections are only available for our GitLab team members. Talent Acquisition Strategy\n\nTalent Acquisition Pages and Processes\n\nTeam Process Pages\n\nTA Key Performance Indicators Note: this page is currently in our internal handbook as they are a work in progress.\n\nMeeting Cadence\n\nTalent Acquisition Alignment\n\nDiversity, Inclusion & Belonging Talent Acquisition Initiatives\n\nTriad Process\n\nQuarterly Updates Note: Internal only\n\nCandidate Handbook Pages\n\nPlease find pages for potential and active applicants below.\n\nCandidate Handbook Page\n\nTalent Acquisition Privacy Policy\n\nInterviewer Processes\n\nInterviewer Prep Requirements\n\nConducting a GitLab Interview\n\nGreenhouse for Interviewers\n\nHiring Manager Processes\n\nHiring Manager Processes\n\nConducting a GitLab Interview\n\nGreenhouse for Hiring Managers\n\nCandidate Experience Specialist Processes\n\nCandidate Experience Specialist Responsibilities\n\nPrelude\n\nHow to Complete a Contract - CES Process\n\nRecruiters and Sourcers\n\nOpening a job\n\nInterview Stages\n\nIf a candidate is in one job and needs to move to another, it’s important to correctly determine whether they should be added or transferred. Both are accessible by clicking the ‘Add, Transfer, or Remove Candidate’s Jobs’ button on the bottom right corner of your candidate profile.\n\nBefore making any moves, always ensure the candidate does not have any interviews scheduled. Transferring will automatically remove scheduled interviews and make them invisible on the candidates’ Guide, but will not cancel the interview from the interviewers’ calendar or inform the candidate of what is happening. Always wait until the interview has been completed, or fully cancel the interview and reschedule under the new req.\n\nWhen you add a candidate to a new job, the candidate starts the new job with a clean slate. There will be no scorecards or forms from any other position. This should be chosen when you are starting a brand new hiring process and will not be considering scorecards from any other job, and want their application date to be the date that you add them.\n\nWhen you transfer a candidate from one job to another, most of their data before the reference check stage moves with them. Scorecards will be visible in the “Scorecards” tab and their original application date will remain. Scorecards that have not been submitted cannot be submitted after transfer, so make sure you collect those before you make your move. Offers and forms are also not transferable, so it’s important to transfer before a candidate hits the Reference Check stage. When you are moving someone from an Evergreen req into the role they will be hired into, you should always transfer. There will be no record of the previous job in any reporting.\n\nSometimes, deciding whether to add or transfer can be tricky. If a candidate interviewed for a role that was filled by someone else, and you get a new headcount a few months later, should you transfer them into the new job or add them and start over? One thing to consider is the implication your choice will have on the data. In this case, a candidate who transfers will appear to have been in the hiring process for months, when you’ve actually only been talking to them about this opening for a few days. At the same time, you want to save their scorecards because they’ll be relevant for the new job. In another situation, you could have an applicant who was being considered for the role, was rejected by the Hiring Manager, but contacted a few months later when the scope of the role changed and they were now considered a good fit. The key to knowing when to transfer is understanding what impact it would have on our data, and what solution would paint the most accurate picture. If you’re not sure whether to add or transfer, you should check in with Enablement to get another opinion.\n\nWhen rejecting candidates, it’s important to carefully review all rejection reasons and pick the one that most accurately describes why a candidate is being rejected. This is because data is analyzed on a quarterly basis by the Talent Acquisition Leadership team, People Leadership Team, and E-Group.\n\nOnce you’ve clicked the most detailed reason, include detailed context on the reason in the “Rejection Notes” box. Please be as specific as possible. For example, instead of writing “the candidate rejected because of compensation”, write “the candidate rejected because the salary and equity that we offered was much lower than a competing offer.”\n\nPlease note that you cannot submit scorecards after rejecting a candidate.\n\nWe will not cancel an interview within less than 24 hours’ notice if the candidate is being rejected. The recruiter will notify the candidate that they are no longer in consideration for the role and present them with the option to continue with the scheduled interview slot. The interviewer must be informed, and will not discuss the feedback that led to the decline. The conversation will pivot to general opportunities at GitLab and answering any questions about the company and team that the candidate may have.\n\nIf the candidate’s interview is outside 24 hours, the interview should be deleted in Greenhouse before the candidate is rejected and notified. The candidate should always be notified if they’ve been rejected, and the recruiter is responsible for declining the candidate. Any interviews scheduled will also not be automatically canceled, so you’ll need to ensure this happens first.\n\nIf the candidate does not join the interview room within 10 minutes or fails to complete their MR within the specified time before the interview, the interview will be cancelled and the recruiter will get in touch with the candidate and not schedule further interviews.\n\nIf the candidate notifies us that they are unable to attend the interview before the scheduled time, CES can automatically reschedule using the candidates’ current availability or by requesting fresh availability.\n\nIf we have rescheduled at the request of the candidate and the candidate requests to move the interview again without reasonable explanation, the recruiter will automatically reject the candidate.\n\nWe understand that there may be extenuating circumstances leading to the above situations where a candidate is unavailable or unprepared. It is at the recruiter’s discretion to reengage or choose to reschedule.\n\nOffers and Closing Reqs\n\nVerbal offer information\n\nDeclined offer steps\n\nSourcing at GitLab\n\nSourcing overview\n\nIdentifying prospects\n\nNotifications\n\nThere are no perfect or required ways to set up your Greenhouse notifications, but these are some of our recommendations.\n\nTalent Acquisition Programs\n\nReferrals\n\nReferral Operations\n\nReferral Process\n\nDetails on who is eligible for referrals\n\nAcquisitions\n\nAcquisitions\n\nInternal Mobility\n\nInternal Hiring Process\n\nPosting a job internally\n\nIn the offer process\n\nExecutive Hiring\n\nExecutive Search\n\nEmerging Talent\n\nEmerging Talent\n\nAssociate Engineer Development\n\nGlobal Hiring Resources\n\nOther Hiring Pages\n\nGreenhouse\n\nTalent Acquisition Process Framework\n\nAdditional Resources\n\nOverview of Job Families\n\nBackground checks\n\nBenefits\n\nCompensation\n\nContracts\n\nGitLab talent ambassador\n\nOnboarding\n\nStock options\n\nVisas\n\nCandidate Handbook Page\n\nThis page outlines what hiring looks like at GitLab. We share the latest information about our processes and practices to ensure you have the information you need to feel confident during the interview process.\n\nConducting a GitLab Interview\n\nHelpful information about how to prepare and conduct interviews for GitLab\n\nEmerging Talent @ GitLab\n\nOverview of Emerging Talent @ GitLab\n\nGitLab talent ambassador\n\nKeeping with our mission that everyone can contribute, we want all GitLab team members to feel encouraged and equipped to take part in helping us find great talent and act as ambassadors for the company and our talent brand.\n\nGreenhouse\n\nGreenhouse is GitLab's ATS (Applicant Tracking System). All Hiring Managers and Interviewers will use Greenhouse to review resumes, provide feedback, communicate with candidates, and more.\n\nGuide\n\nGuide is a program GitLab uses to increase candidate experience by having an easily digestable and enjoyable resource that houses all interview details and relevant handbook pages depending on where the candidate is in the hiring process.\n\nInterviewer Prep Requirements\n\nLearn more about the tools required to prepare you for interviewing at GitLab\n\nJob Families\n\nJob families are organized by function at GitLab and we use them to inform candidates of roles and current team members to evaluate their performance.\n\nMERGE: Ongoing Development for Associate Engineers\n\nCongratulations and welcome to the GitLab team! We’re excited to have you on board as you start this exciting new chapter in your engineering career. Our comprehensive ongoing development program is designed to support you every step of the way - from your first day, to your first merge request, and beyond. You’ll have support from your manager, onboarding buddy, and the Talent Development team; don’t ever hesitate to reach out.\n\nPrelude\n\nPrelude (formerly Interview Schedule) is a program GitLab uses to increase efficiency in scheduling interviews.\n\nReferral Operations\n\nThis page is for information regarding the backend process of the Referral Process.\n\nReferral Process\n\nGitLab's Referral program is fairly straight-forward, there are several nuances to be mindful of. This is a review of the program rules and eligibility.\n\nSourcing\n\nSourcing has proved itself to be a great channel for attracting the best talent, this page details how we source talent at GitLab.\n\nTalent Acquisition Alignment\n\nThis page is an overview of the search team alignment and the talent acquisition platform directly responsible individual in talent acquisition operations and talent brand.\n\nTalent Acquisition Meeting Cadence\n\nThe Talent Acquisition team has a regular schedule of meetings. Please see below for information about cadence and attendance.\n\nTalent Acquisition Process Framework\n\nThis page is an overview of the processes each party of the search team is responsible for. It links each party or process.\n\nLast modified November 1, 2024: Remove trailing spaces (6f6d0996)\n\nView page source - Edit this page - please contribute.")]
2024-12-06 23:48:20,140 - common.logger - INFO - Faiss index saved to faiss_index_file
2024-12-06 23:48:20,141 - common.logger - INFO - Successfully indexed documents from https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:48:20,141 - common.logger - INFO - https://handbook.gitlab.com/handbook/hiring/ uploaded successfully!
2024-12-06 23:48:37,529 - common.logger - ERROR - too many values to unpack (expected 2)
2024-12-06 23:48:37,529 - common.logger - ERROR - Error processing query: 500: Error querying Faiss: too many values to unpack (expected 2)
2024-12-06 23:50:09,590 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:50:09,592 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:50:10,352 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:50:10,452 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:50:14,855 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/', 'url': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-06 23:52:32,631 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:52:32,632 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:52:33,297 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:52:33,398 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-06 23:53:15,118 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/', 'url': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-06 23:53:49,330 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/', 'url': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-06 23:54:06,130 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:54:06,130 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-06 23:54:06,756 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:54:07,911 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-06 23:54:24,061 - common.logger - INFO - Processing URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:54:24,061 - common.logger - INFO - URL https://handbook.gitlab.com/handbook/hiring/ is not a sitemap.
2024-12-06 23:54:24,062 - common.logger - INFO - Processing regular URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:54:31,583 - common.logger - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/hiring/'}, page_content="Hiring & Talent Acquisition Handbook\n\nLanding page for many of the handbook pages the talent acquisition team at GitLab uses.\n\nAt the core of our team’s vision, mission, and strategy is our ability to impact GitLab’s overarching mission: to make it so that everyone can contribute to and co-create the software that powers our world. When everyone can contribute, users become contributors and we greatly increase the rate of innovation.\n\nAs a Talent Acquisition team, we have an outsized impact on GitLab’s ability to make this mission a reality, by connecting top talent to profound careers from wherever they are in a truly distributed, remote workforce.\n\nTalent Acquisition Vision Statement\n\nTo create globally inclusive access to opportunities so that everyone can contribute to and co-create the software that powers our world.\n\nTalent Acquisition Mission Statement\n\nIt is the Talent Acquisition Team’s mission to predictably build distributed, representative teams that enable team members to co-create the future of software.\n\nOur Guiding Principles\n\nAs we set out to achieve this vision, we will continue to rely on core guiding principles to define how we build toward the future.\n\nExperience: Stakeholder experience is central to our craft. We are a partner, an advisor, and an essential component to building high performing teams and culture at GitLab.\n\nInclusivity: We design fair and equitable processes into the fabric of what we do. We believe Talent Acquisition has an outsized impact on the make-up of our teams, and we strive to continue to build them with inclusivity as a integral piece of our craft.\n\nPredictability: Our ability to have the right team members, in the right roles, at the right time is imperative to execute on our commitments and plans as an organization. We strive for predictability: to build accuracy in our forecasts and enable the business to look around corners through strong relationships and data driven decision making.\n\nOur Objectives and Roadmap\n\nWe strive to be as transparent as possible, but these sections are only available for our GitLab team members. Talent Acquisition Strategy\n\nTalent Acquisition Pages and Processes\n\nTeam Process Pages\n\nTA Key Performance Indicators Note: this page is currently in our internal handbook as they are a work in progress.\n\nMeeting Cadence\n\nTalent Acquisition Alignment\n\nDiversity, Inclusion & Belonging Talent Acquisition Initiatives\n\nTriad Process\n\nQuarterly Updates Note: Internal only\n\nCandidate Handbook Pages\n\nPlease find pages for potential and active applicants below.\n\nCandidate Handbook Page\n\nTalent Acquisition Privacy Policy\n\nInterviewer Processes\n\nInterviewer Prep Requirements\n\nConducting a GitLab Interview\n\nGreenhouse for Interviewers\n\nHiring Manager Processes\n\nHiring Manager Processes\n\nConducting a GitLab Interview\n\nGreenhouse for Hiring Managers\n\nCandidate Experience Specialist Processes\n\nCandidate Experience Specialist Responsibilities\n\nPrelude\n\nHow to Complete a Contract - CES Process\n\nRecruiters and Sourcers\n\nOpening a job\n\nInterview Stages\n\nIf a candidate is in one job and needs to move to another, it’s important to correctly determine whether they should be added or transferred. Both are accessible by clicking the ‘Add, Transfer, or Remove Candidate’s Jobs’ button on the bottom right corner of your candidate profile.\n\nBefore making any moves, always ensure the candidate does not have any interviews scheduled. Transferring will automatically remove scheduled interviews and make them invisible on the candidates’ Guide, but will not cancel the interview from the interviewers’ calendar or inform the candidate of what is happening. Always wait until the interview has been completed, or fully cancel the interview and reschedule under the new req.\n\nWhen you add a candidate to a new job, the candidate starts the new job with a clean slate. There will be no scorecards or forms from any other position. This should be chosen when you are starting a brand new hiring process and will not be considering scorecards from any other job, and want their application date to be the date that you add them.\n\nWhen you transfer a candidate from one job to another, most of their data before the reference check stage moves with them. Scorecards will be visible in the “Scorecards” tab and their original application date will remain. Scorecards that have not been submitted cannot be submitted after transfer, so make sure you collect those before you make your move. Offers and forms are also not transferable, so it’s important to transfer before a candidate hits the Reference Check stage. When you are moving someone from an Evergreen req into the role they will be hired into, you should always transfer. There will be no record of the previous job in any reporting.\n\nSometimes, deciding whether to add or transfer can be tricky. If a candidate interviewed for a role that was filled by someone else, and you get a new headcount a few months later, should you transfer them into the new job or add them and start over? One thing to consider is the implication your choice will have on the data. In this case, a candidate who transfers will appear to have been in the hiring process for months, when you’ve actually only been talking to them about this opening for a few days. At the same time, you want to save their scorecards because they’ll be relevant for the new job. In another situation, you could have an applicant who was being considered for the role, was rejected by the Hiring Manager, but contacted a few months later when the scope of the role changed and they were now considered a good fit. The key to knowing when to transfer is understanding what impact it would have on our data, and what solution would paint the most accurate picture. If you’re not sure whether to add or transfer, you should check in with Enablement to get another opinion.\n\nWhen rejecting candidates, it’s important to carefully review all rejection reasons and pick the one that most accurately describes why a candidate is being rejected. This is because data is analyzed on a quarterly basis by the Talent Acquisition Leadership team, People Leadership Team, and E-Group.\n\nOnce you’ve clicked the most detailed reason, include detailed context on the reason in the “Rejection Notes” box. Please be as specific as possible. For example, instead of writing “the candidate rejected because of compensation”, write “the candidate rejected because the salary and equity that we offered was much lower than a competing offer.”\n\nPlease note that you cannot submit scorecards after rejecting a candidate.\n\nWe will not cancel an interview within less than 24 hours’ notice if the candidate is being rejected. The recruiter will notify the candidate that they are no longer in consideration for the role and present them with the option to continue with the scheduled interview slot. The interviewer must be informed, and will not discuss the feedback that led to the decline. The conversation will pivot to general opportunities at GitLab and answering any questions about the company and team that the candidate may have.\n\nIf the candidate’s interview is outside 24 hours, the interview should be deleted in Greenhouse before the candidate is rejected and notified. The candidate should always be notified if they’ve been rejected, and the recruiter is responsible for declining the candidate. Any interviews scheduled will also not be automatically canceled, so you’ll need to ensure this happens first.\n\nIf the candidate does not join the interview room within 10 minutes or fails to complete their MR within the specified time before the interview, the interview will be cancelled and the recruiter will get in touch with the candidate and not schedule further interviews.\n\nIf the candidate notifies us that they are unable to attend the interview before the scheduled time, CES can automatically reschedule using the candidates’ current availability or by requesting fresh availability.\n\nIf we have rescheduled at the request of the candidate and the candidate requests to move the interview again without reasonable explanation, the recruiter will automatically reject the candidate.\n\nWe understand that there may be extenuating circumstances leading to the above situations where a candidate is unavailable or unprepared. It is at the recruiter’s discretion to reengage or choose to reschedule.\n\nOffers and Closing Reqs\n\nVerbal offer information\n\nDeclined offer steps\n\nSourcing at GitLab\n\nSourcing overview\n\nIdentifying prospects\n\nNotifications\n\nThere are no perfect or required ways to set up your Greenhouse notifications, but these are some of our recommendations.\n\nTalent Acquisition Programs\n\nReferrals\n\nReferral Operations\n\nReferral Process\n\nDetails on who is eligible for referrals\n\nAcquisitions\n\nAcquisitions\n\nInternal Mobility\n\nInternal Hiring Process\n\nPosting a job internally\n\nIn the offer process\n\nExecutive Hiring\n\nExecutive Search\n\nEmerging Talent\n\nEmerging Talent\n\nAssociate Engineer Development\n\nGlobal Hiring Resources\n\nOther Hiring Pages\n\nGreenhouse\n\nTalent Acquisition Process Framework\n\nAdditional Resources\n\nOverview of Job Families\n\nBackground checks\n\nBenefits\n\nCompensation\n\nContracts\n\nGitLab talent ambassador\n\nOnboarding\n\nStock options\n\nVisas\n\nCandidate Handbook Page\n\nThis page outlines what hiring looks like at GitLab. We share the latest information about our processes and practices to ensure you have the information you need to feel confident during the interview process.\n\nConducting a GitLab Interview\n\nHelpful information about how to prepare and conduct interviews for GitLab\n\nEmerging Talent @ GitLab\n\nOverview of Emerging Talent @ GitLab\n\nGitLab talent ambassador\n\nKeeping with our mission that everyone can contribute, we want all GitLab team members to feel encouraged and equipped to take part in helping us find great talent and act as ambassadors for the company and our talent brand.\n\nGreenhouse\n\nGreenhouse is GitLab's ATS (Applicant Tracking System). All Hiring Managers and Interviewers will use Greenhouse to review resumes, provide feedback, communicate with candidates, and more.\n\nGuide\n\nGuide is a program GitLab uses to increase candidate experience by having an easily digestable and enjoyable resource that houses all interview details and relevant handbook pages depending on where the candidate is in the hiring process.\n\nInterviewer Prep Requirements\n\nLearn more about the tools required to prepare you for interviewing at GitLab\n\nJob Families\n\nJob families are organized by function at GitLab and we use them to inform candidates of roles and current team members to evaluate their performance.\n\nMERGE: Ongoing Development for Associate Engineers\n\nCongratulations and welcome to the GitLab team! We’re excited to have you on board as you start this exciting new chapter in your engineering career. Our comprehensive ongoing development program is designed to support you every step of the way - from your first day, to your first merge request, and beyond. You’ll have support from your manager, onboarding buddy, and the Talent Development team; don’t ever hesitate to reach out.\n\nPrelude\n\nPrelude (formerly Interview Schedule) is a program GitLab uses to increase efficiency in scheduling interviews.\n\nReferral Operations\n\nThis page is for information regarding the backend process of the Referral Process.\n\nReferral Process\n\nGitLab's Referral program is fairly straight-forward, there are several nuances to be mindful of. This is a review of the program rules and eligibility.\n\nSourcing\n\nSourcing has proved itself to be a great channel for attracting the best talent, this page details how we source talent at GitLab.\n\nTalent Acquisition Alignment\n\nThis page is an overview of the search team alignment and the talent acquisition platform directly responsible individual in talent acquisition operations and talent brand.\n\nTalent Acquisition Meeting Cadence\n\nThe Talent Acquisition team has a regular schedule of meetings. Please see below for information about cadence and attendance.\n\nTalent Acquisition Process Framework\n\nThis page is an overview of the processes each party of the search team is responsible for. It links each party or process.\n\nLast modified November 1, 2024: Remove trailing spaces (6f6d0996)\n\nView page source - Edit this page - please contribute.")]
2024-12-06 23:54:32,142 - common.logger - INFO - Faiss index saved to faiss_index_file
2024-12-06 23:54:32,142 - common.logger - INFO - Successfully indexed documents from https://handbook.gitlab.com/handbook/hiring/
2024-12-06 23:54:32,142 - common.logger - INFO - https://handbook.gitlab.com/handbook/hiring/ uploaded successfully!
2024-12-06 23:56:03,883 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-07 16:18:44,488 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:18:44,488 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:20:41,544 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:20:41,545 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:21:04,568 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:21:04,569 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:21:05,146 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:21:05,248 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 16:22:53,664 - common.logger - ERROR - name 'get_modified_query' is not defined
2024-12-07 16:23:37,556 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:23:37,557 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:23:38,163 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:23:38,261 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 16:23:47,096 - common.logger - ERROR - 'MessageInput' object has no attribute 'query'
2024-12-07 16:23:47,097 - common.logger - ERROR - 'MessageInput' object has no attribute 'query'
2024-12-07 16:24:04,947 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:24:04,948 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:24:05,564 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:24:05,661 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 16:24:14,931 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-07 16:25:08,096 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-07 16:25:45,454 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:25:45,455 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:25:46,163 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:25:46,778 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:26:24,083 - common.logger - INFO - Processing URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-07 16:26:24,083 - common.logger - INFO - URL https://handbook.gitlab.com/handbook/hiring/ is not a sitemap.
2024-12-07 16:26:24,083 - common.logger - INFO - Processing regular URL: https://handbook.gitlab.com/handbook/hiring/
2024-12-07 16:26:31,448 - common.logger - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/hiring/'}, page_content="Hiring & Talent Acquisition Handbook\n\nLanding page for many of the handbook pages the talent acquisition team at GitLab uses.\n\nAt the core of our team’s vision, mission, and strategy is our ability to impact GitLab’s overarching mission: to make it so that everyone can contribute to and co-create the software that powers our world. When everyone can contribute, users become contributors and we greatly increase the rate of innovation.\n\nAs a Talent Acquisition team, we have an outsized impact on GitLab’s ability to make this mission a reality, by connecting top talent to profound careers from wherever they are in a truly distributed, remote workforce.\n\nTalent Acquisition Vision Statement\n\nTo create globally inclusive access to opportunities so that everyone can contribute to and co-create the software that powers our world.\n\nTalent Acquisition Mission Statement\n\nIt is the Talent Acquisition Team’s mission to predictably build distributed, representative teams that enable team members to co-create the future of software.\n\nOur Guiding Principles\n\nAs we set out to achieve this vision, we will continue to rely on core guiding principles to define how we build toward the future.\n\nExperience: Stakeholder experience is central to our craft. We are a partner, an advisor, and an essential component to building high performing teams and culture at GitLab.\n\nInclusivity: We design fair and equitable processes into the fabric of what we do. We believe Talent Acquisition has an outsized impact on the make-up of our teams, and we strive to continue to build them with inclusivity as a integral piece of our craft.\n\nPredictability: Our ability to have the right team members, in the right roles, at the right time is imperative to execute on our commitments and plans as an organization. We strive for predictability: to build accuracy in our forecasts and enable the business to look around corners through strong relationships and data driven decision making.\n\nOur Objectives and Roadmap\n\nWe strive to be as transparent as possible, but these sections are only available for our GitLab team members. Talent Acquisition Strategy\n\nTalent Acquisition Pages and Processes\n\nTeam Process Pages\n\nTA Key Performance Indicators Note: this page is currently in our internal handbook as they are a work in progress.\n\nMeeting Cadence\n\nTalent Acquisition Alignment\n\nDiversity, Inclusion & Belonging Talent Acquisition Initiatives\n\nTriad Process\n\nQuarterly Updates Note: Internal only\n\nCandidate Handbook Pages\n\nPlease find pages for potential and active applicants below.\n\nCandidate Handbook Page\n\nTalent Acquisition Privacy Policy\n\nInterviewer Processes\n\nInterviewer Prep Requirements\n\nConducting a GitLab Interview\n\nGreenhouse for Interviewers\n\nHiring Manager Processes\n\nHiring Manager Processes\n\nConducting a GitLab Interview\n\nGreenhouse for Hiring Managers\n\nCandidate Experience Specialist Processes\n\nCandidate Experience Specialist Responsibilities\n\nPrelude\n\nHow to Complete a Contract - CES Process\n\nRecruiters and Sourcers\n\nOpening a job\n\nInterview Stages\n\nIf a candidate is in one job and needs to move to another, it’s important to correctly determine whether they should be added or transferred. Both are accessible by clicking the ‘Add, Transfer, or Remove Candidate’s Jobs’ button on the bottom right corner of your candidate profile.\n\nBefore making any moves, always ensure the candidate does not have any interviews scheduled. Transferring will automatically remove scheduled interviews and make them invisible on the candidates’ Guide, but will not cancel the interview from the interviewers’ calendar or inform the candidate of what is happening. Always wait until the interview has been completed, or fully cancel the interview and reschedule under the new req.\n\nWhen you add a candidate to a new job, the candidate starts the new job with a clean slate. There will be no scorecards or forms from any other position. This should be chosen when you are starting a brand new hiring process and will not be considering scorecards from any other job, and want their application date to be the date that you add them.\n\nWhen you transfer a candidate from one job to another, most of their data before the reference check stage moves with them. Scorecards will be visible in the “Scorecards” tab and their original application date will remain. Scorecards that have not been submitted cannot be submitted after transfer, so make sure you collect those before you make your move. Offers and forms are also not transferable, so it’s important to transfer before a candidate hits the Reference Check stage. When you are moving someone from an Evergreen req into the role they will be hired into, you should always transfer. There will be no record of the previous job in any reporting.\n\nSometimes, deciding whether to add or transfer can be tricky. If a candidate interviewed for a role that was filled by someone else, and you get a new headcount a few months later, should you transfer them into the new job or add them and start over? One thing to consider is the implication your choice will have on the data. In this case, a candidate who transfers will appear to have been in the hiring process for months, when you’ve actually only been talking to them about this opening for a few days. At the same time, you want to save their scorecards because they’ll be relevant for the new job. In another situation, you could have an applicant who was being considered for the role, was rejected by the Hiring Manager, but contacted a few months later when the scope of the role changed and they were now considered a good fit. The key to knowing when to transfer is understanding what impact it would have on our data, and what solution would paint the most accurate picture. If you’re not sure whether to add or transfer, you should check in with Enablement to get another opinion.\n\nWhen rejecting candidates, it’s important to carefully review all rejection reasons and pick the one that most accurately describes why a candidate is being rejected. This is because data is analyzed on a quarterly basis by the Talent Acquisition Leadership team, People Leadership Team, and E-Group.\n\nOnce you’ve clicked the most detailed reason, include detailed context on the reason in the “Rejection Notes” box. Please be as specific as possible. For example, instead of writing “the candidate rejected because of compensation”, write “the candidate rejected because the salary and equity that we offered was much lower than a competing offer.”\n\nPlease note that you cannot submit scorecards after rejecting a candidate.\n\nWe will not cancel an interview within less than 24 hours’ notice if the candidate is being rejected. The recruiter will notify the candidate that they are no longer in consideration for the role and present them with the option to continue with the scheduled interview slot. The interviewer must be informed, and will not discuss the feedback that led to the decline. The conversation will pivot to general opportunities at GitLab and answering any questions about the company and team that the candidate may have.\n\nIf the candidate’s interview is outside 24 hours, the interview should be deleted in Greenhouse before the candidate is rejected and notified. The candidate should always be notified if they’ve been rejected, and the recruiter is responsible for declining the candidate. Any interviews scheduled will also not be automatically canceled, so you’ll need to ensure this happens first.\n\nIf the candidate does not join the interview room within 10 minutes or fails to complete their MR within the specified time before the interview, the interview will be cancelled and the recruiter will get in touch with the candidate and not schedule further interviews.\n\nIf the candidate notifies us that they are unable to attend the interview before the scheduled time, CES can automatically reschedule using the candidates’ current availability or by requesting fresh availability.\n\nIf we have rescheduled at the request of the candidate and the candidate requests to move the interview again without reasonable explanation, the recruiter will automatically reject the candidate.\n\nWe understand that there may be extenuating circumstances leading to the above situations where a candidate is unavailable or unprepared. It is at the recruiter’s discretion to reengage or choose to reschedule.\n\nOffers and Closing Reqs\n\nVerbal offer information\n\nDeclined offer steps\n\nSourcing at GitLab\n\nSourcing overview\n\nIdentifying prospects\n\nNotifications\n\nThere are no perfect or required ways to set up your Greenhouse notifications, but these are some of our recommendations.\n\nTalent Acquisition Programs\n\nReferrals\n\nReferral Operations\n\nReferral Process\n\nDetails on who is eligible for referrals\n\nAcquisitions\n\nAcquisitions\n\nInternal Mobility\n\nInternal Hiring Process\n\nPosting a job internally\n\nIn the offer process\n\nExecutive Hiring\n\nExecutive Search\n\nEmerging Talent\n\nEmerging Talent\n\nAssociate Engineer Development\n\nGlobal Hiring Resources\n\nOther Hiring Pages\n\nGreenhouse\n\nTalent Acquisition Process Framework\n\nAdditional Resources\n\nOverview of Job Families\n\nBackground checks\n\nBenefits\n\nCompensation\n\nContracts\n\nGitLab talent ambassador\n\nOnboarding\n\nStock options\n\nVisas\n\nCandidate Handbook Page\n\nThis page outlines what hiring looks like at GitLab. We share the latest information about our processes and practices to ensure you have the information you need to feel confident during the interview process.\n\nConducting a GitLab Interview\n\nHelpful information about how to prepare and conduct interviews for GitLab\n\nEmerging Talent @ GitLab\n\nOverview of Emerging Talent @ GitLab\n\nGitLab talent ambassador\n\nKeeping with our mission that everyone can contribute, we want all GitLab team members to feel encouraged and equipped to take part in helping us find great talent and act as ambassadors for the company and our talent brand.\n\nGreenhouse\n\nGreenhouse is GitLab's ATS (Applicant Tracking System). All Hiring Managers and Interviewers will use Greenhouse to review resumes, provide feedback, communicate with candidates, and more.\n\nGuide\n\nGuide is a program GitLab uses to increase candidate experience by having an easily digestable and enjoyable resource that houses all interview details and relevant handbook pages depending on where the candidate is in the hiring process.\n\nInterviewer Prep Requirements\n\nLearn more about the tools required to prepare you for interviewing at GitLab\n\nJob Families\n\nJob families are organized by function at GitLab and we use them to inform candidates of roles and current team members to evaluate their performance.\n\nMERGE: Ongoing Development for Associate Engineers\n\nCongratulations and welcome to the GitLab team! We’re excited to have you on board as you start this exciting new chapter in your engineering career. Our comprehensive ongoing development program is designed to support you every step of the way - from your first day, to your first merge request, and beyond. You’ll have support from your manager, onboarding buddy, and the Talent Development team; don’t ever hesitate to reach out.\n\nPrelude\n\nPrelude (formerly Interview Schedule) is a program GitLab uses to increase efficiency in scheduling interviews.\n\nReferral Operations\n\nThis page is for information regarding the backend process of the Referral Process.\n\nReferral Process\n\nGitLab's Referral program is fairly straight-forward, there are several nuances to be mindful of. This is a review of the program rules and eligibility.\n\nSourcing\n\nSourcing has proved itself to be a great channel for attracting the best talent, this page details how we source talent at GitLab.\n\nTalent Acquisition Alignment\n\nThis page is an overview of the search team alignment and the talent acquisition platform directly responsible individual in talent acquisition operations and talent brand.\n\nTalent Acquisition Meeting Cadence\n\nThe Talent Acquisition team has a regular schedule of meetings. Please see below for information about cadence and attendance.\n\nTalent Acquisition Process Framework\n\nThis page is an overview of the processes each party of the search team is responsible for. It links each party or process.\n\nLast modified November 1, 2024: Remove trailing spaces (6f6d0996)\n\nView page source - Edit this page - please contribute.")]
2024-12-07 16:26:32,045 - common.logger - INFO - Faiss index saved to faiss_index_file
2024-12-07 16:26:32,046 - common.logger - INFO - Successfully indexed documents from https://handbook.gitlab.com/handbook/hiring/
2024-12-07 16:26:32,046 - common.logger - INFO - https://handbook.gitlab.com/handbook/hiring/ uploaded successfully!
2024-12-07 16:26:44,125 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-07 16:28:37,175 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-07 16:30:02,168 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-07 16:30:55,423 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:30:55,424 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:30:56,036 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:30:56,133 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 16:31:00,336 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-07 16:35:24,821 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:35:24,821 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:35:25,504 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:35:25,597 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 16:36:26,167 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:36:26,168 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:36:26,772 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:36:26,874 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 16:36:35,277 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:36:35,278 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:36:35,941 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:36:36,042 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 16:37:13,572 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-07 16:39:50,554 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:39:50,555 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:39:51,172 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:39:51,266 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 16:39:57,210 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-07 16:41:31,722 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-07 16:42:10,937 - common.logger - ERROR - Error processing modify query: REFORMATIN_QUERY
2024-12-07 16:42:11,554 - common.logger - INFO - Document 1: Hiring & Talent Acquisition Handbook

Landing page for many of the handbook pages the talent acquisition team at GitLab uses.

At the core of our team’s vision, mission, and strategy is our ability to... | Metadata: {'source': 'https://handbook.gitlab.com/handbook/hiring/'}
2024-12-07 16:43:59,815 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:43:59,816 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:44:00,511 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:44:00,607 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 16:50:57,835 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:50:57,836 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 16:50:58,504 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 16:50:58,594 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 16:53:03,815 - common.logger - ERROR - Error processing modify query: REFORMATIN_QUERY
2024-12-07 16:55:20,675 - common.logger - ERROR - Error processing modify query: REFORMATIN_QUERY
2024-12-07 17:00:47,422 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:00:47,423 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:00:48,084 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:00:48,178 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:10:53,796 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:10:53,796 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:10:54,582 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:10:54,670 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:11:01,720 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:11:01,721 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:11:02,312 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:11:02,405 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:11:20,249 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:11:20,249 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:11:20,929 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:11:21,029 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:15:36,959 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:15:36,959 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:17:35,964 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:17:35,964 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:17:49,807 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:17:49,807 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:18:24,558 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:18:24,558 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:18:25,290 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:18:25,387 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:19:44,268 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:19:44,268 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:19:44,915 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:19:45,002 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:20:14,271 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:20:14,272 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:20:15,192 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:20:15,291 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:29:02,354 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:29:02,354 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:29:02,964 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:29:03,078 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:29:48,652 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:29:48,653 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:29:49,297 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:29:49,386 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:30:00,394 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:30:00,394 - common.logger - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:30:01,029 - common.logger - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:30:01,116 - common.logger - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:31:41,486 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:31:41,486 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:31:42,406 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:31:42,507 - vector_db.py - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:32:49,375 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:32:49,376 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:32:50,090 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:32:50,178 - vector_db.py - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:34:42,572 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:34:42,573 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:34:43,245 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:34:43,328 - vector_db.py - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:38:08,055 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:38:08,055 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:38:09,275 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:38:09,376 - vector_db.py - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:40:05,258 - service.py - INFO - Processing URL: https://about.gitlab.com/sitemap.xml
2024-12-07 17:40:05,259 - service.py - INFO - URL https://about.gitlab.com/sitemap.xml is identified as a sitemap.
2024-12-07 17:40:05,259 - service.py - INFO - Processing sitemap: https://about.gitlab.com/sitemap.xml
2024-12-07 17:40:05,259 - service.py - INFO - Fetching sitemap from https://about.gitlab.com/sitemap.xml
2024-12-07 17:40:06,891 - service.py - INFO - Successfully fetched sitemap from https://about.gitlab.com/sitemap.xml
2024-12-07 17:40:06,895 - service.py - INFO - Extracted 0 URLs from the sitemap.
2024-12-07 17:40:06,895 - service.py - INFO - Successfully indexed documents from sitemap https://about.gitlab.com/sitemap.xml
2024-12-07 17:40:06,895 - controller.py - INFO - https://about.gitlab.com/sitemap.xml uploaded successfully!
2024-12-07 17:43:13,367 - service.py - INFO - Processing URL: https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:43:13,368 - service.py - INFO - URL https://handbook.gitlab.com/sitemap.xml is identified as a sitemap.
2024-12-07 17:43:13,368 - service.py - INFO - Processing sitemap: https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:43:13,368 - service.py - INFO - Fetching sitemap from https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:43:16,210 - service.py - INFO - Successfully fetched sitemap from https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:43:16,459 - service.py - INFO - Extracted 0 URLs from the sitemap.
2024-12-07 17:43:16,460 - service.py - INFO - Successfully indexed documents from sitemap https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:43:16,460 - controller.py - INFO - https://handbook.gitlab.com/sitemap.xml uploaded successfully!
2024-12-07 17:45:59,271 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:45:59,271 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:45:59,965 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:46:00,523 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:46:13,225 - service.py - INFO - Processing URL: https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:46:13,227 - service.py - INFO - URL https://handbook.gitlab.com/sitemap.xml is identified as a sitemap.
2024-12-07 17:46:13,227 - service.py - INFO - Processing sitemap: https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:46:13,227 - service.py - INFO - Fetching sitemap from https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:46:15,754 - service.py - INFO - Successfully fetched sitemap from https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:46:15,780 - service.py - INFO - Extracted 0 URLs from the sitemap.
2024-12-07 17:46:15,782 - service.py - INFO - Successfully indexed documents from sitemap https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:46:15,782 - controller.py - INFO - https://handbook.gitlab.com/sitemap.xml uploaded successfully!
2024-12-07 17:48:37,930 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:48:37,930 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:48:38,630 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:48:39,245 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:48:54,958 - service.py - INFO - Processing URL: https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:48:54,958 - service.py - INFO - URL https://handbook.gitlab.com/sitemap.xml is identified as a sitemap.
2024-12-07 17:48:54,958 - service.py - INFO - Processing sitemap: https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:48:54,958 - service.py - INFO - Fetching sitemap from https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:48:57,333 - service.py - INFO - Successfully fetched sitemap from https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:48:57,348 - service.py - INFO - Extracted 4236 URLs from the sitemap.
2024-12-07 17:48:57,349 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/values/
2024-12-07 17:49:04,958 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/values/'}, page_content='GitLab Values\n\nLearn more about how we live our values at GitLab\n\nCREDIT\n\nGitLab’s six core values are 🤝 Collaboration, 📈 Results for Customers, ⏱️ Efficiency, 🌐 Diversity, Inclusion & Belonging, 👣 Iteration, and 👁️ Transparency, and together they spell the CREDIT we give each other by assuming good intent. We react to them with values emoji and they are made actionable below.\n\nAbout our values\n\nWe take inspiration from other companies, and we always go for the boring solutions. Our CEO, Sid Sijbrandij, has shared the origin of each of the CREDIT values, but just like the rest of our work, we continually adjust our values and strive to make them better. GitLab values are a living document. In many instances, they have been documented, refined, and revised based on lessons learned (and scars earned) in the course of doing business.\n\nWe used to have more values, but it was difficult to remember them all. In response, we condensed them, created an acronym (CREDIT), and listed operating principles to guide behavior.\n\nEveryone is welcome to suggest improvements. Please assign MRs to update these values to our CEO Sid and @mention him in Slack if you work at GitLab Inc. or on Twitter if you don’t.\n\nDriving Results with CREDIT from GitLab on Vimeo.\n\n🤝 Collaboration\n\nTo achieve results, team members must work together effectively. At GitLab, helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve. Similarly, you can rely on others for help and advice—in fact, you’re expected to do so. Anyone can chime in on any subject, including people who don’t work at GitLab. The person who’s responsible for the work decides how to do it, but they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented.\n\nKindness\n\nWe value caring for others. Demonstrating we care for people provides an effective framework for challenging directly and delivering feedback. Kindness doesn’t mean holding back on feedback or avoiding disagreements, these are crucial to professional growth and getting results for customers. Kindness means you make a separation between the work and the person, you can criticize someone’s work but still be respectful to the person. Give as much positive feedback as you can, and do it in a public way.\n\nShare\n\nThere are aspects of GitLab culture, such as intentional transparency, that are unintuitive to outsiders and new team members. Be willing to invest in people and engage in open dialogue. For example, consider making private issues public wherever possible so that we can all learn from the experience. Don’t be afraid of judgement or scrutiny when sharing publicly, we all understand it’s impossible to know everything.\n\nEveryone can remind anyone in the company about our values. If there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions.\n\nShare problems you run into, ask for help, be forthcoming with information and speak up.\n\nNegative feedback is 1-1\n\nGive negative feedback in the smallest setting possible. One-on-one video calls are preferred.\n\nNegative feedback is distinct from negativity and disagreement. If there is no direct feedback involved, strive to discuss disagreement in a public channel, respectfully and transparently.\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nWe deal with negative all the time at GitLab. If it’s not a problem, then why are we discussing it? We deal with negativity a lot, and that’s also part of our ambition.\n\nIf you want to get better, you talk about what you can improve. We’re allowed to publicly discuss negative things; we’re not allowed to give negative feedback in a large setting if it could be feasibly administered in a smaller setting.\n\nNegative feedback can be given in a group setting if it’s to someone higher in the management chain. This shows that no one is above feedback. GitLab co-founder and CEO Sid Sijbrandij and former CTO Eric Johnson discuss this in this GitLab Unfiltered video.\n\nProvide feedback in a timely manner\n\nWe want to solve problems while they are small. If you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer), please voice your concerns rather than keeping them to yourself. If you need to escalate beyond your manager, you could consider speaking to your skip-level, a more senior person, or a people business partner.\n\nSay thanks\n\nRecognize the people that helped you publicly, for example in our #thanks chat channel.\n\nWhen publicly thanking, it’s important to recognize the following:\n\nShowing thanks in as large a setting as possible (company-wide) at a company as large as ours is the exception instead of the norm, it takes some getting used to.\n\nBeing thanked at the company level for what you view as a relatively small or minuscule contribution can feel awkward.\n\nThanking a person in #thanks should be done sincerely and summarize why you are thankful so the person on the receiving end can easily understand why they are being thanked. Even while assuming positive intent, not all folks are comfortable with public praise. Help this person understand how they went above and beyond and why you felt it was important for the team member to be recognized.\n\nThere are a number of good ways and places to say thanks. We shouldn’t limit saying thanks to just the #thanks channel.\n\nGive feedback effectively\n\nGiving feedback is challenging, but it’s important to deliver it effectively. When providing feedback, always make it about the work itself; focus on the business impact and not the person. Make sure to provide at least one clear and recent example. If a person is going through a hard time in their personal life, then take that into account. An example of giving positive feedback is our thanks chat channel. For managers, it’s important to realize that team members react to a negative incident with their managers six times more strongly than they do to a positive one. Keeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself. In the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the team member’s performance going forward. Give recognition generously, in the open, and often to generate more engagement from your team.\n\nGet to know each other\n\nWe use a lot of text-based communication, and if you know the person behind the text, it will be easier to prevent conflicts. So we encourage people to get to know each other on a personal level through informal communication, for example, virtual coffee chats, and during GitLab Contribute.\n\nReach across company departments\n\nWhile it’s wise to seek advice from experts within your function, we encourage GitLab team members to do the same across departments. This enables the company to iterate more quickly, embrace the understanding that everyone can contribute and include more diverse perspectives when possible.\n\nDon’t pull rank\n\nIf you have to remind someone of the position you have in the company, you’re doing something wrong. People already know our decision-making process. Explain why you’re making the decision, and respect everyone irrespective of their function. This includes using the rank of another person - including the CEO - to sell an idea or decision.\n\nAssume positive intent\n\nWe naturally have a double standard when it comes to the actions of others. We blame circumstances for our own mistakes, but individuals for theirs. This double standard is called the Fundamental Attribution Error. In order to mitigate this bias, you should always assume positive intent in your interactions with others, respecting their expertise and giving them grace in the face of what you might perceive as mistakes.\n\nWhen disagreeing, folks sometimes argue against the weakest points of an argument, or an imaginary argument (e.g. “straw man”). Assume the points are presented in good faith, and instead try to argue against the strongest version of your opponent’s position. We call this arguing against a “steel” position, instead of a “straw” one. This concept is borrowed from argue the “steel man” technique.\n\nA “steel” position should be against the absolute most effective version of your opponent’s position — potentially even more compelling than the one they presented. A good “steel” position is one where the other person feels you’ve represented their position well, even if they still disagree with your assumptions or conclusion.\n\nAddress behavior, but don’t label people\n\nThere is a lot of good in this article about not wanting jerks on our team, but we believe that jerk is a label for behavior rather than an inherent classification of a person. We avoid classifications.\n\nSay sorry\n\nIf you made a mistake, apologize as soon as possible. Saying sorry is not a sign of weakness but one of strength. The people that do the most work will likely make the most mistakes. Additionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to be repeated by someone else. Mistakes can include when you have not been kind to someone. In order to reinforce our values, it is important, and takes more courage, to apologize publicly when you have been unkind publicly (e.g., when you have said something unkind or unprofessional to an individual or group in a Slack channel).\n\nNo ego\n\nDon’t defend a point to win an argument or double-down on a mistake. You are not your work; you don’t have to defend your point. You do have to search for the right answer with help from others.\n\nIn a GitLab Unfiltered interview, GitLab Head of Remote Darren M. adds context on this operating principle.\n\nIn many organizations, there’s a subtle, low-level, persistent pressure to continually prove your worth. And I believe that this fuels imposter syndrome and wreaks havoc on mental health.\n\nWhat’s so troubling to me is how often perception is reality. In other words, those who have mastered the art of being perceived as elite reap benefits, though this has nothing to do with actual results.\n\nAt GitLab, “no ego” means that we foster and support an environment where results matter, and you’re given agency to approach your work in the way that makes sense to you. Instead of judging people for not approaching work in an agreed-upon way, “no ego” encourages people to glean inspiration from watching others approach work in new and different ways.\n\nBeing no ego is a standard we hold ourselves as people to but is not one that applies to GitLab as a company or product. We want to celebrate and highlight GitLab’s accomplishments, including being one of the largest all-remote companies. This doesn’t mean we don’t recognize our mistakes, including how we handled telemetry.\n\nSee others succeed\n\nA candidate who has talked to a lot of people inside GitLab said that, compared to other companies, one thing stood out the most: everyone here mentioned wanting to see each other succeed.\n\nDon’t let each other fail\n\nKeep an eye out for others who may be struggling or stuck. If you see someone who needs help, reach out and assist. This might involve offering to pair program or setting up a sync brainstorming session. The goal is to connect them with someone else who can provide expertise or assistance. We are a team, so we succeed and shine together by supporting each other!\n\nPeople are not their work\n\nAlways make suggestions about examples of work, not the person. Say “You didn’t respond to my feedback about the design” instead of “You never listen”. And, when receiving feedback, keep in mind that feedback is the best way to improve, and that others giving you feedback want to see you succeed.\n\nDo it yourself\n\nOur collaboration value is about helping each other when we have questions, need critique, or need help. No need to brainstorm, wait for consensus, or do with two what you can do yourself. The Bolt Handbook refers to this as the Founder Mentality, where all team members should approach the problem as if they own the company.\n\nBlameless problem solving\n\nInvestigate mistakes in a way that focuses on the situational aspects of a failure’s mechanism and the decision-making process that led to the failure, rather than cast blame on a person or team. We hold blameless root cause analyses and retrospectives for stakeholders to speak up without fear of punishment or retribution.\n\nShort toes\n\nPeople joining the company frequently say, “I don’t want to step on anyone’s toes.” At GitLab, we should be more accepting of people taking initiative in trying to improve things. As companies grow, their speed of decision-making goes down since there are more people involved. We should counteract that by having short toes and feeling comfortable letting others contribute to our domain. For example, pointed, respectful feedback to a proposal by GitLab’s CEO led to his own merge request being closed. However, it is not required to respond to comments.\n\nIt’s impossible to know everything\n\nWe know we must rely on others for the expertise they have that we don’t. It’s OK to admit you don’t know something and to ask for help, even if doing so makes you feel vulnerable. It is never too late to ask a question, and by doing so, you can get the information you need to produce results and to strengthen your own skills as well as GitLab as a whole. After your question is answered, please document the answer so that it can be shared.\n\nDon’t display surprise when people say they don’t know something, as it is important that everyone feels comfortable saying “I don’t know” and “I don’t understand.” (As inspired by Recurse.)\n\nCollaboration is not consensus\n\nWhen collaborating, it is always important to stay above radar and work transparently, but collaboration is not consensus and disagreement is part of collaboration. You don’t need to ask people for their input, and they shouldn’t ask you “Why didn’t you ask me?” You don’t have to wait for people to provide input, if you did ask them. You don’t need to have everyone agreeing to the same thing - they can disagree, commit, and disagree. Two-way doors decisions can be reversed as part of disagree, commit, and disagree, while one-way door decisions benefit from more input. Recognize these reversible two-way door decisions for when less input is required to iterate faster. We believe in permissionless innovation—you don’t need to involve people, but everyone can contribute. This is core to how we iterate, since we want smaller teams moving quickly rather than large teams achieving consensus slowly.\n\nCollaboration Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate collaboration when we take action to help others and include other’s (both internal and external) input (both help and feedback) to achieve the best possible outcome.\n\nGitLab Job Grade Demonstrates Collaboration Competency by… Knowledge Assessment 5 Develops collaboration skills by learning from other team members Knowledge Assessment for Individual Contributors 6 Grows collaboration skills by using different types of communication; files issues appropriately, asks in the right Slack channels and uses the right labels. 7 Models collaborative behavior for fellow team members and others within the group. 8 Coaches team members on how to collaborate more effectively and pointing team members to the right channels to collaborate. Knowledge Assessment for People Leaders 9 Fosters collaborative decision making and problem solving across the departments. 10 Drives team collaboration across divisions/departments, silos, and division boundaries. 11 Develops networks and builds partnerships, engages in cross-functional activities; collaborates across boundaries, and finds common ground with a widening range of stakeholders.  Utilizes contacts to build and strengthen internal support base 12 Leads collaboration and teamwork in daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Encourages greater cross-functional collaboration among e-team leaders. 14 Champions collaboration and teamwork into daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Champions cross-functional collaboration among e-team leaders and GitLab.\n\n📈 Results for Customers\n\nWe exist to help our customers achieve more. Everything we do should be in service of making our customers successful with GitLab. Results for Customers is at the top of our values hierarchy, as our customers achieving results drives overall business performance that enables everything else.\n\nThe Results for Customers value is displayed through the following operating principles:\n\nSet Ambitious & Measurable goals\n\nWhile we iterate with small changes, we strive for large, ambitious results. We have an ambitious mission and vision, and we aim to be the best in the world across all our functions. Setting ambitious, measurable goals enables us to best deliver customer results. We agree in writing on measurable goals. Within the company we use OKRs to stay accountable. We have and report against KPIs with guiding targets.\n\nUnderstand our customers\n\nAll GitLab team members should understand our customers’ needs, issues, and value propositions. We understand how they use GitLab and what they need from a platform in order to meet their goals. Internally facing teams consider the impact of their work as it pertains indirectly to GitLab’s customers.\n\nWe better understand customers and their needs through:\n\nReviewing public facing GitLab issues from our customers and users\n\nDogfooding our product to understand the user experience\n\nReading customer stories from Marketing and Sales\n\nAttending Customer fireside chats\n\nLearning feedback from our customers and users on product features and roadmap\n\nCo-create\n\nWe create together with our customers. There is an open dialogue between GitLab and our customers so that we can better identify what they need. As a result of building a solution for them, we can also bring that solution to the world.\n\nKeep end users in sight\n\nOur focus is to increase customer results. At GitLab, one way to drive customer results is through platform enhancements that drive the most value for direct users. This requires being aware of the Concur effect.\n\nArvind Narayanan, a Princeton Professor, described his frustration with Blackboard in a viral Tweet:\n\nIt has every feature ever dreamed up. But like anything designed by a committee, the interface is incoherent and any task requires at least fifteen clicks (and that’s if you even remember the correct sequence the first time).\n\nSoftware companies can be breathtakingly clueless when there’s a layer of indirection between them and their users. Everyone who’s suffered through Blackboard will have the same reaction to this: try having less functionality!\n\nRyan Falor followed up on Narayanan’s tweet with his definition of the Concur Effect:\n\ndecision makers are not direct users\n\nfeatures are overwhelming and disjointed\n\nuser experience gets worse over time\n\nSee the Hacker News discussion for a specific UX example.\n\nAt GitLab, we want to drive customer results through focusing on platform enhancements that drive the most value for direct users.\n\nCustomer results are more important than:\n\nWhat we plan to make. If we focus only on our own plans, we would have only GitLab.com and no self-managed delivery of GitLab. This does not mean that we will agree to every feature request, but we won’t let existing plans be an obstacle to working on what will drive the most customer value.\n\nLarge customer requests. Catering to requests from large customers leads to the innovator’s dilemma, we need to also focus on results for small and future customers.\n\nOur existing scope. For example, when customers asked for better integrations and complained about integration costs and effort, we responded by expanding our scope to create a single application for the DevOps lifecycle.\n\nOur assumptions. Every company works differently, so we can’t assume that what works well for us will support our customers’ needs. When we have an idea, we must directly validate our assumptions with multiple customers to ensure we create scalable, highly relevant solutions.\n\nWhat we control. We strive to provide the best possible experience for each of our customers, and take responsibility for all of the aspects that we can reasonably control.\n\nMeasure impact, not activity\n\nWe care about what you achieve: the code you shipped, the needle you moved, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldn’t feel like they did something wrong, unless it negatively impacted a goal or result they were responsible for. You don’t have to defend how you spend your day if you are performing and delivering against expectations. We trust team members to do the right thing instead of having rigid rules. We trust team members to show up and do their best work. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too many hours, talk to your manager to discuss solutions.\n\nDogfooding\n\nWe use our own product in the way our users do to surface improvements that will lead to better customer results. GitLab is a DevSecOps Platform that can be used by people throughout the business. This is how we use it within GitLab. For example, we use our OKR functionality company-wide to inform product enhancements and for team members to have a great understanding of the customer experience. We also dogfood in the following ways:\n\nOur development organization uses GitLab.com to manage the DevOps lifecycle of GitLab itself.\n\nAll team members use GitLab to collaborate on this handbook.\n\nWe capture content and processes in Git repos and manage them with GitLab.\n\nWhen something breaks, doesn’t work well, or needs improvement, we are more likely to notice it internally and address it before it impacts our larger community.\n\nGive agency\n\nWe give people agency to focus on what they think is most beneficial. If a meeting doesn’t seem interesting and someone’s active participation is not critical to the outcome of the meeting, they can always opt to not attend, or during a video call they can work on other things if they want. Staying in the call may still make sense even if you are working on other tasks, so other peers can ping you and get fast answers when needed. This is particularly useful in multi-purpose meetings where you may be involved for just a few minutes.\n\nChallenger mindset\n\nChallenging the status quo can lead to remarkable results - we must never stop. A challenger mindset requires that we continually ask ourselves bold, difficult questions about our business the problems we solve while resisting complacency. To succeed we must innovate and delight our customers with the value of the products we build. A challenger mindset requires a relentless pursuit of excellence - we must be tenacious. Each win for our customers builds reputational capital we can use to earn the trust of prospects in a competitive market. While competition is a feature of capitalism internally as GitLab team members we must focus our efforts inwardly on achieving our very best results for customers to win market share.\n\nGrowth mindset\n\nYou don’t always get results and this will lead to criticism from yourself and/or others. We believe our talents can be developed through hard work, targeted training, learning from others, on-the-job experience, and receiving input from others. It is in our DNA as a company and individuals to look for opportunity, stay humble, and never settle. We try to hire people based on their trajectory, not their pedigree. We also strive to foster a culture of curiosity and continuous learning where team members are provided and proactively seek out opportunities to grow themselves and their careers. We believe that with the right expectations and direction, people can grow to take on new challenges and surpass expectations.\n\nCross-functional optimization\n\nOur definition of cross-functional optimization is that you do what is best for the organization as a whole. Don’t optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. For example, you may have set a non-urgent functional milestone that is supposed to land at the end of the quarter. If delivering within the last week requires engagement from the GTM teams, the right decision may be to push your own team’s target by a week to reduce the ask for the GTM team as the GTM focuses on meeting its revenue objectives.\n\nIn the context of collaboration, if anyone is blocked by you on a question, your approval, or a merge request review, you should prioritize unblocking them, either directly or through helping them find someone else who can.\n\nEmbrace Tenacity\n\nWe refer to this as “persistence of purpose”. As talked about in The Influence Blog, tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. We value the ability to maintain focus and motivation when work is tough and asking for help when needed.\n\nHave Ownership & Accountability\n\nWe expect team members to complete tasks that they are assigned. You are responsible for executing with attention to detail, connecting the dots across the organization and anticipating and solving problems. As an owner, you are responsible for overcoming challenges, not suppliers or other team members. Take initiative and proactively inform stakeholders when there is something you might not be able to solve.\n\nSense of urgency\n\nTime gained or lost has compounding effects. Try to get the results as fast as possible, but without compromising our other values and ways we communicate, so the compounding of results can begin and we can focus on the next improvement.\n\nOperate with a bias for action\n\nIt’s important that we keep our focus on action, and don’t fall into the trap of analysis paralysis or sticking to a slow, quiet path without risk. Decisions should be thoughtful, but delivering fast results requires the fearless acceptance of occasionally making mistakes; our bias for action also allows us to course correct quickly. Try to get results as fast as possible, but without compromising our other values and ways of working\n\nDisagree, commit, and advocate\n\nWhen a decision is in place, we expect people to commit to executing it. Any past decisions and guidelines are open to questioning as long as you act in accordance with them until they are changed. This is a common principle. Every decision can be changed; our best decision was one that changed an earlier one. In a manager-report relationship, usually the report is the Directly Responsible Individuals (DRI). The manager may disagree with the final decision, but they still commit to the decision of the DRI.\n\nIn a group setting, participants may disagree with a proposal but not articulate their views for one reason or another. Sometimes, many or all individuals may disagree yet choose not to speak up, because no one believes they would get agreement from the group. As a result, everyone loses out on their feedback. Dissent is expression of that disagreement. However, it can be difficult and even socially expensive. Expression of feedback is a way for everyone to grow and learn, and is based on facts rather than opinions. Share your perspective, rather than agreeing simply to avoid conflict or to go along with everyone else.\n\nWhen you want to reopen the conversation on something, show that your argument is informed by previous conversations and assume the decision was made with the best intent. You have to achieve results on every decision while it stands, even when you are trying to have it changed. You should communicate with the DRI who can change the decision instead of someone who can’t.\n\nEscalate to unblock\n\nIf there is a disagreement and you can’t move forward because of it, agree to escalate and escalate to one or both of your managers. Early escalation, delivered with context of the challenge, enables managers to function as an unblocker.\n\nResults Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate results when we do what we promised to each other, customers, users, and investors.\n\nGitLab Job Grade Demonstrates Results Competency by… Knowledge Assessment 5 Develops the skills needed to commit and execute on agreed actions. Knowledge Assessment for Individual Contributors 6 Applies commitment to results and demonstrates ability to execute on agreed actions. 7 Models a sense of urgency and commitment to deliver results. 8 Coaches team members to collaborate and work iteratively towards results with the focus on the outcome and not hours worked. Knowledge Assessment for People Leaders 9 Fosters a culture of ownership of personal performance. 10 Drives efficient execution of results ensuring collaboration between team members. 11 Develops quarterly OKR\'s ensuring the performance and results of one or more teams. 12 Leads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency. EVP/CXO Leads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency.\n\n⏱️ Efficiency\n\nAt GitLab, efficiency means producing results without wasting materials, time, or energy. We optimize solutions globally for the broader GitLab community over one person or a small group. Focus on efficiency should be global in nature, not just local to a given function. Global efficiency could include efficiency with customers, candidates, and contributors as well. It is easy to prioritize consistency over efficiency because consistency is often more efficient initially and makes managing processes more efficient. We should slow down when optimizing for consistency. Taking a company-wide lens when evaluating changes will help ensure that new processes will improve efficiency for GitLab as a whole and be the best decision for the company as a whole.\n\nWhen we work internally with other team members, we leverage GitLab’s unique working practices and operating principles to achieve top efficiency. We do not expect people outside of GitLab to conform to GitLab’s ways of working, and we will make accommodations to work effectively with them. For example, we may collaborate heavily in-person and not default to async communications.\n\nOnly Healthy Constraints\n\nMost companies regress to the mean and slow down over time. While some changes are required as a company grows and matures, not all change is inevitable or should be allowed to passively happen. As GitLab grows, we are conscious of how we operate and how it enables our ability to continue to operate with the agility of a startup. We try to limit ourselves to healthy constraints.\n\nWrite things down\n\nWe document everything: in the handbook, in meeting notes, in issues. We do that because “the faintest pencil is better than the sharpest memory.” It is far more efficient to read a document at your convenience than to have to ask and explain. Having something in version control also lets everyone contribute suggestions to improve it.\n\nBoring solutions\n\nUse the simplest and most boring solution for a problem, and remember that “boring” should not be conflated with “bad” or “technical debt.” The speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps. Don’t pick an interesting technology just to make your work more fun; using established, popular tech will ensure a more stable and more familiar experience for you and other contributors.\n\nMake a conscious effort to recognize the constraints of others within the team. For example, sales is hard because you are dependent on another organization, and development is hard because you have to preserve the ability to quickly improve the product in the future.\n\nSelf-service and self-learning\n\nTeam members should first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame. Write down any new information discovered and pay it forward so that those coming after will have better efficiency built on top of practicing collaboration, inclusion, and documenting the results.\n\nTeam members have more room to grow themselves when they are able to self-service and self-learn.\n\nEfficiency for the right group\n\nOptimize solutions globally for the broader GitLab community. As an example, it may be best to discard a renewal process that requires thousands of customers to each spend two hours in favor of one that only takes sixty seconds, even when it may make a monthly report less efficient internally! In a decision, ask yourself “For whom does this need to be most efficient?” Quite often, the answer may be your users, contributors, customers, or team members that are dependent upon your decision.\n\nBe respectful of others’ time\n\nConsider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions.\n\nSpend company money like it’s your own\n\nEvery dollar we spend will have to be earned back. Be as frugal with company money as you are with your own. In saying this, we ask team members to weigh the cost of purchases against the value that they will bring to the company.\n\nConsider the degree to which a purchase increases your ability to better accomplish your work and achieve business results relative to cost. Lowering overhead reduces the cost to operate the business and lets us shift spend toward other priority areas.\n\nWe have guidelines around this operating principle to help team members better understand our expensing process and expectations.\n\nFrugality\n\nAmazon states it best with: “Accomplish more with less. Constraints breed resourcefulness, self-sufficiency, and invention. There are no extra points for growing headcount, budget size, or fixed expense.”\n\nShort verbal answers\n\nGive short answers to verbal questions so the other party has the opportunity to ask more or move on.\n\nKeep broadcasts short\n\nKeep one-to-many written communication short, as mentioned in this HBR study: “A majority say that what they read is frequently ineffective because it’s too long, poorly organized, unclear, filled with jargon, and imprecise.”\n\nManagers of one\n\nWe want each team member to be a manager of one who doesn’t need daily check-ins to achieve their goals. Team members are given the freedom to own projects and initiatives and are trusted to see them through to a successful end.\n\nWhen team members are managers of one they can have an increased work/life balance, because they are more empowered to make decisions around how they allocate their time throughout each day.\n\nFreedom and responsibility over rigidity\n\nWhen possible, we give people the responsibility to make a decision and hold them accountable for that, instead of imposing rules and approval processes. You should have clear objectives and the freedom to work on them as you see fit. Freedom and responsibility are more efficient than rigidly following a process, or creating interdependencies, because they enable faster decision velocity and higher rates of iteration.\n\nWhen team members have freedom and responsibility over rigidity, they have more room to help others.\n\nAccept mistakes\n\nNot every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient; a mistake only affects one. Once you have accepted the mistake, learn from it. When team members are free to accept mistakes, they can take more calculated risks.\n\nMove fast by shipping the minimal valuable change\n\nWe value constant improvement by iterating quickly, month after month. If a task is not the smallest viable and valuable thing, cut the scope.\n\nEmbrace change\n\nAdoption of features, user requirements, and the competitive landscape change frequently and rapidly. The most successful companies adapt their roadmap and their organization quickly to keep pace. One of the things that makes this challenging is the impact on our team. People may need to change teams, subject matter, or even who manages them. This can rightly feel disruptive. If we coach ourselves to embrace the positive aspects of change, such as increased opportunity and new things to learn, we can move faster as a company and increase our odds of success. It is important to hold management accountable for being deliberate.\n\nEfficiency Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate efficiency when we work on the right things, not doing more than needed, and not duplicating work.\n\nGitLab Job Grade Demonstrates Efficiency Competency by… Knowledge Assessment 5 Develops an understanding of being a manager of 1 by taking responsibility for your own tasks and delivering on commitments. Brings up ideas for process improvements to 1:1s. Learns to write everything down as it is far more efficient to read a document at your convenience than to have to ask and explain. Knowledge Assessment for Individual Contributors 6 Develops a deeper understanding of efficiency and actively identifies process inefficiencies within the team. Seeks out ways to be more effective in their role, while also starting to mentor others in ways to work efficiently. 7 Models a culture of efficiency within the team where people make good, timely decisions using available data and assessing multiple alternatives. Models using boring solutions for increasing the speed of innovation for our organization and product. 8 Takes ownership of own team process inefficiencies, implements cross team efforts in ensuring things are running smoothly. Implements a way of working in the team where team members first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame. Knowledge Assessment for People Leaders 9 Takes ownership of group level process inefficiencies and guides cross sub-departments in ensuring things are running smoothly. Fosters a culture in the sub-departments where you respect others\' time and promote self-service and self-learning. 10 Drives the framework of frugality on a department level and owns departments efforts in ensuring things are running smoothly. Drives efficient resolution of highly complex or unusual business problems that impact the department / team. Holds their managers and peers accountable for upholding this value. 11 Develops the framework and strategy of frugality cross division resulting in efforts ensuring things are running smoothly. Develops leaders to action on division/department/team inefficiencies. Hold their management teams accountable for upholding this value. 12 Leads with efficiency across the company. Ensures efficient resource allocation decisions across the company. Leads across company strategy and policy improvements that move the business towards more efficiency. They hold their senior management and the e-group accountable for upholding this value. EVP/CXO Champions GitLab\'s strategy for efficiency internally and externally. Constantly looking for efficiency improvements cross company and holding other e-group members accountable for upholding efficiency too. They are comfortable leading through frugality and accepting of mistakes.\n\n🌐 Diversity, Inclusion & Belonging\n\nDiversity, inclusion and belonging are fundamental to the success of GitLab. We aim to make a significant impact in our efforts to foster an environment where everyone can thrive. We are designing a multidimensional approach to ensure that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. We actively chose to build and institutionalize a culture that is inclusive and supports all team members equally in the process of achieving their professional goals. We hire globally and encourage hiring in a diverse set of countries. We work to make everyone feel welcome and to increase the participation of underrepresented minorities and nationalities in our community and company. For example, we celebrate our sponsorship of diversity, inclusion & belonging events.\n\nBias towards asynchronous communication\n\nTake initiative to operate asynchronously whenever possible. This shows care and consideration for those who may not be in the same time zone, are traveling outside of their usual time zone, or are structuring their day around pressing commitments at home or in their community.\n\nThis is demonstrated by communicating recordings of meetings, using GitLab Issues and Merge Requests rather than texts, calls, or Slack messages, and being sensitive to local holidays and vacation statuses. Encourage others to default to documentation rather than pressuring others to be online outside of their working hours.\n\nEmbracing uncomfortable ideas and conversations\n\nPart of embracing diversity is a willingness to embrace often uncomfortable conversations and situations. This concept is also at the core of inclusion and helping to eliminate the problems that are faced by certain GitLab team members who may not be in the majority.\n\nWe believe that being willing to embrace discomfort is the path forward to a safe, balanced and inclusive work place for all. Challenge yourself, challenge your own pre-set notions and ideas about different cultures or things you don’t understand. When we are willing to embrace being uncomfortable, we can focus on actually fixing the issues at hand rather than simply “appearing to care”.\n\nUnderstanding the impact of microaggressions\n\nMicroaggressions are much more than merely rude or insensitive comments. They can wear people down by slowly chipping away their sense of belonging/safety/inclusion over time. What is a microaggression?\n\n“The everyday slights, indignities, put downs and insults that people of color, women, LGBT populations or those who are marginalized experiences in their day-to-day interactions with people.” - Derald W. Sue\n\nAt GitLab we believe that everyone is entitled to a safe working space where they can express who they are and participate in conversations without worry of being spoken to in a harmful way, given that we want to encourage everyone to be mindful of what is a microaggression and be mindful of their potential impact.\n\nSeek diverse perspectives\n\nWe believe that team members seeking feedback from a diverse group of team members, inside and outside of their group or function, leads to better decisions and a greater sense of team member belonging. For more guidance on how we define Diversity, please refer to GitLab’s definition of Diversity, Inclusion & Belonging. Feedback from a more heterogenous group often leads to better business outcomes as we incorporate diverse perspectives and uncover unconscious bias.\n\nAn example of this operating principle in action showcases the value of actively seeking diverse perspectives. The term “Brag Document” was used to describe when individuals documented their accomplishments. Documenting accomplishments is critical to team member development. However, team members had the psychological safety to raise the question of whether or not the title of the document made some feel uncomfortable. In an effort to seek a diverse perspective, a survey was conducted in one of the Team Member and Advocacy Resource Group (TMRG) channels. The poll results showed that 100% of those polled preferred a different title and the title was changed.\n\nMake family feel welcome\n\nOne of the unique elements to an all-remote culture is the ability to visit a person’s home while collaborating. If the tenor of the meeting allows, feel welcome to invite your family members or pets to drop by and greet your colleagues. Be mindful of language and use of profanity to encourage a family-friendly environment.\n\nShift working hours for a cause\n\nCaregiving, outreach programs, and community service do not conveniently wait for regular business hours to conclude. If there’s a cause or community effort taking place, feel welcome to work with your manager and shift your working hours to be available during a period where you’ll have the greatest impact for good. For colleagues supporting others during these causes, document everything and strive to post recordings so it’s easy for them to catch up.\n\nBe a mentor\n\nPeople feel more included when they’re supported. To encourage this, and to support diversified learning across departments, consider GitLab’s Internship for Learning program.\n\nCulture fit is a bad excuse\n\nWe don’t hire based on culture or select candidates because we’d like to have a drink with them. We hire and reward team members based on our shared values as detailed on this page. We want a values fit, not a culture fit. We want cultural diversity instead of cultural conformity. Said differently: “culture add” > “culture fit” or “hire for culture contribution” since our mission is that everyone can contribute.\n\nReligion and politics at work\n\nWe generally avoid discussing politics or religion in public forums because it is easy to alienate people that have a minority opinion. This doesn’t mean we never discuss these topics. Because we value diversity, inclusion and belonging, and want all team members to feel welcome and contribute equally, we encourage free discussion of operational decisions that can move us toward being a more inclusive company. GitLab also publicly supports pro diversity, inclusion & belonging activities and events.\n\nThere is sometimes a grey area where advocating for diversity and political activities may intersect. Team members should use discretion in grey area communications, because a culture of belonging requires us to be respectful of the broad spectrum of views within our work environment. What does this mean in practice? Please feel empowered to share information that highlights diversity, inclusion and belonging issues and how GitLab and GitLab team members can get involved. In line with our Code of Business Conduct and Ethics, avoid posting articles that reference specific political figures or parties.\n\nWhile it is acceptable for individuals to bring up politics and religion in social contexts such as coffee chats and real-life meetups with other coworkers (with the goal to understand and not judge), always be aware of potential sensitivities, exercise your best judgment, and make sure you stay within the boundaries of our Code of Business Conduct and Ethics.\n\nWe’re a global company where perspectives and local norms may differ from culture to culture. Diversity, inclusion and belonging is about broad inclusion at a worldwide level. If there is a question or concern, please reach out to diversityinclusion@gitlab.com or #diversity_inclusion_and_belonging.\n\nQuirkiness\n\nUnexpected and unconventional things make life more interesting. Celebrate and encourage quirky gifts, habits, behavior, and points of view. Open source is a great way to interact with interesting people. We try to hire people who think work is a great way to express themselves.\n\nBuilding a safe community\n\nDo not make jokes or unfriendly remarks about characteristics of the people who make up GitLab and how they identify. Everyone has the right to feel safe when working for GitLab and/or as a part of the GitLab community. We do not tolerate abuse, harassment, exclusion, discrimination, or retaliation by/of any community members, including our team members. You can always refuse to deal with people who treat you badly and get out of situations that make you feel uncomfortable.\n\nUnconscious bias\n\nWe recognize that unconscious bias is something that affects everyone and that the effect it has on us as humans and our company is large. We are responsible for understanding our own implicit biases and helping others understand theirs. We are continuously working on getting better at this topic.\n\nInclusive benefits\n\nWe list our Parental Leave publicly so people don’t have to ask during interviews.\n\nInclusive language & pronouns\n\nUse inclusive language. For example, prefer “Hi everybody” or “Hi people” to “Hi guys”, and “they” instead of “he/she”. While there are several good guides from folks like 18f, University of Calgary, and Buffer on using inclusive language, we don’t keep an exhaustive list. When new possibly non-inclusive words arise, we prefer to be proactive and look for an alternative. If your goal is to be inclusive, it is more effective to make a small adjustment in the vocabulary when some people have a problem with it, rather than making a decision to not change it because some people don’t think it is a problem. And if you make a mistake (e.g. accidentally using the wrong pronoun or an outdated phrase), acknowledge it, apologize gracefully and move on; there is no need to dwell on it, and you can work to avoid making that mistake in the future. Please also visit our Gender and Sexual-orientation Identity Definitions and FAQ page if you have questions around pronouns and other topics related to gender / sexual orientation.\n\nLearn how to pronounce other people’s names\n\nWe attach part of our identity to our names, and if it is mispronounced it can feel less inclusive. If it happens repeatedly, you may be unintentionally sending a message to that person that you are not interested in learning how to pronounce their name correctly. This applies to everyone you are in contact with: team members, customers, candidates for jobs, and anyone else.\n\nPeople whose name is repeatedly mispronounced might feel unimportant or self-conscious, and might not speak up about it. Other negative behaviors include giving a person a nickname without their permission, or actively avoiding using their name in sync calls.\n\nIt might be challenging to pronounce names from a different language or culture than your own, but with some effort, name pronunciation can be learned by anyone. Some ways to achieve this are:\n\nAsk the person for help in a private space: “I’m sorry, I don’t think I am pronouncing your name correctly. Can you help me with the correct pronunciation?”\n\nUse the written and recorded pronunciation tools in Slack.\n\nUse online tools such as videos recorded on YouTube or NameShouts.\n\nPractice the pronunciation with a friend or team member who knows the correct pronunciation.\n\nAlways avoid making jokes or comments about how it is difficult to pronounce their name.\n\nUse of nicknames\n\nSome people might choose to use a nickname, for example: “Bob” instead of “Robert”. As long as this is their choice this is perfectly acceptable. We should avoid assigning a nickname to a person without their permission.\n\nSlack pronunciation features\n\nSlack has two features to help with this issue: the phonetic name pronunciation field and the ability to record your own name pronunciation audio clip. We encourage all team members to complete both of these. Update them by editing your profile.\n\nInclusive interviewing\n\nThis is documented on our page about interviewing.\n\nInclusive meetings\n\nBe consciously inclusive in meetings by giving everyone present an opportunity to talk and present their points of view. This can be especially important in a remote setting.\n\nWith internal meetings, consider using an agenda document for questions. For example, with GitLab Group Conversations, every meeting has a numbered list that GitLab team members can add questions to. During the meeting, questions are answered in turn and discussions noted in the same document. Sometimes, these documents can have so much traffic (during the meeting) such that only a limited number of people can edit the document. In these situations, those who have questions should post on zoom chat and those who can edit the document should help copy the question over to the document. In addition, those who can edit the document should also post in zoom chat to see if anyone has any questions that they could help add to the document so that meeting attendees are more empowered to contribute to the conversation.\n\nCustomers are not used to working in this way. To promote inclusion with customers: ask participants for their goals; make sure during demos that you pause for question; leave time for discussion.\n\nInclusive and fair policy to regions with fewer employees\n\nBeing globally distributed has the benefit that someone can cover for you when you are off work. However, population density is not balanced across timezones. Policies should remain fair to those in less dense regions.\n\nFor example, the Asia Pacific region covers more timezones but has fewer team members. If we use an algorithm to assign tasks to those in later timezones, all American tasks would fall on the fewer Asia Pacific employees. This can damage belonging and inclusivity and should be avoided.\n\nWhen planning an event, the organizer should cater for location density differences to maximize participation in all regions.\n\nSee Something, Say Something\n\nAs a globally-dispersed company, we have team members from many different backgrounds and cultures. That means it is important for each of us to use great judgment in being respectful and inclusive of our teammates. At the same time, we may sometimes not fully realize we have said or done something to offend someone. It is important that our teammates hold each other accountable and let them know if they have unintentionally or intentionally done something so they can learn and gain additional understanding of perspectives different from our own. It is also important that our teammates don’t feel excluded or minimized by the words we use or the things we do. Thus, we all need to speak up when we see something that isn’t respectful or inclusive.\n\nEmbracing Neurodiversity\n\nNeurodiversity refers to variations in the human brain regarding learning, attention, sociability, mood, and other mental functions. There are various neurodevelopmental conditions, like autism, ADHD, dyslexia, dyscalculia, dyspraxia, cognitive impairment, schizophrenia, bipolarity, and other styles of neurodivergent functioning. While neurodivergent individuals often bring unique skills and abilities which can be harnessed for a competitive advantage in many fields (for example, cybersecurity), neurodivergent individuals are often discriminated against. Due to non-inclusive hiring practices, they sometimes have trouble making it through traditional hiring processes. Neurodiversity inclusion best practices benefit everyone, and at GitLab, everyone can contribute. The handbook, values, strategy, and interviewing processes must support the ability for everyone to thrive.\n\nAt GitLab we embrace Neurodiversity through adopting a variety of different work styles and communication styles, and we lean into transparency, asynchronous as a default working style, and pre-filled meeting agendas. These best practices become even more important when embracing neurodiversity. Providing multiple ways to consume information (written / video / audio) allows everyone to contribute independent of their preferred comprehension style. It is important to ask team members specifically what their preferred communication method is in order to provide them information in a format that is easily consumable for them.\n\nRemember, brains work differently and always assume positive intent, even if someone behaves in an unexpected way. While it may be an unexpected behavior to you, it may not be unexpected to the individual exhibiting the behavior. That is the beauty and value of diversity, embracing differences and becoming stronger and better as a result.\n\nWe also recommend that all team members review the Reasonable Accommodation process. A Reasonable Accommodation for a team member could include noise-cancelling headphones, scheduling smaller group session zoom calls, providing very explicit and precise instructions and due-dates when given tasks, or providing a variety of supportive software tools.\n\nThe most important thing that managers can do is facilitate an environment in which all team members feel psychologically safe enough to make requests for what they need in order to do their job.\n\nFamily and friends first, work second\n\nLong-lasting relationships are the rocks of life, and come before work. As someone said in our #thanks channel after helping a family member for five days after a hurricane: “THANK YOU to GitLab for providing a culture where “family first” is truly meant”. Use the hashtag: #FamilyAndFriends1st\n\nEquity not just equality\n\nEquity vs. Equality: What’s the Difference?\n\nWhile the terms equity and equality may sound similar, the implementation of one versus the other can lead to dramatically different outcomes for marginalized people.\n\nEquality means each individual or group of people is given the same resources or opportunities. Equity recognizes that each person has different circumstances and allocates the exact resources and opportunities needed to reach an equal outcome.\n\nDiversity, Inclusion & Belonging Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate diversity, inclusion and belongings when we foster an environment where everyone can thrive and ensuring that GitLab is a place where people from every background and circumstance feel like they belong and can contribute.\n\nIf you would like to improve your skills or expand your knowledge on topics relating to Diversity, Inclusion, & Belonging at GitLab, check out our resources:\n\nBeing an Ally\n\nBeing Inclusive\n\nRecognizing Bias\n\nGitLab Job Grade Demonstrates Diversity & Inclusion Competency by… Demonstrates DIB Behaviors by… (Should not be considered an exhaustive list) Knowledge Assessment 4 Learns to understand the impact of biases. Gathering more information about the skills needed to be accountable for their actions, apologizes and learn. 5 Develops an understanding of the impact of biases; seeks to learn more about their own biases. Is accountable for their actions, apologizes and learns from their mistakes. DIB training and/or other company wide training to further education on DIB Attend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions Participate in a DIB Initiative: join TMRGs you identify with, support other groups as an Ally, attend events, "like" slack posts and spread the word Participate in a TMRG initiative Member of a working group related to a DIB initiative, e.g. participate in a Mentorship program Knowledge Assessment for Individual Contributors 6 Has a growing understanding of the impact of biases; fosters a sense of inclusion and belonging on their team. Holds themselves and peers accountable for upholding this value by kindly pointing out when mistakes might be made. Encourages an inclusive team environment where differences are encouraged and everyone can contribute. 7 Actively aware of how bias or exclusion might occur on a team and helps to facilitate a team environment where team members belong and feel safe. Models empathy with their interactions with customers and cross functional team members. 8 Implements best practices to limit bias on their team. They ensure blameless accountability is practiced throughout their team. Creates an environment where team members feel safe to share ideas and welcomes individual differences. DIB training and/or other company wide training to further education on DIB Attend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions Participate in a DIB Initiative: join TMRGs you identify with, support other groups as an Ally, attend events, like posts and spread the word Participate in a TMRG initiative Member of a working group related to a DIB initiative, e.g. participate in a Mentorship program Hiring Manager ensure a diverse candidate slate and interview panel Active participant and advocate for department DIB goals Knowledge Assessment for People Leaders 9 Proactively finds ways of facilitating an inclusive team environment and assesses processes to protect against unconscious bias. They hold their team members accountable including cross functional stakeholders. Promotes individual differences across their team and other departments. 10 Drives diversity, inclusion and sense of belonging across their department. They hold their managers and peers accountable for upholding this value. They are actively involved in the execution of D&I strategies and encourage others to participate. Black is Tech, Grace Hopper 11 Embeds the value of Diversity & Inclusion across their division and finds opportunities to limit the impact of bias on decision making processes. Uses feedback and data to formulate a strategy on how to make improvements. They hold their management teams accountable for upholding the value. 12 Leads with the value of Diversity & Inclusion across the company and finds opportunities to limit the impact of bias on decision making processes. They sponsor internal initiatives to increase trust, psychological safety and inclusion. They hold their senior management and the e group accountable for upholding this value. DIB Team & Leadership DIB Council to establish an action plan for your departments & division Serve as an TMRG executive sponsor Embed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate EVP/CXO Champions the value of Diversity, Inclusion and Belonging into the company\'s strategy. They champion and sponsor internal and external D&I initiatives. They speak to the importance of this value in company-wide meetings. They hold their leaders and other e group members accountable for upholding this value. They continuously seek ways to increase trust, psychological safety and inclusion across the broader company. Yearlies initiative focused on continuing to build a diverse team of top talent that we retain and grow Advocate and Integrate DIB into your organizational KPIs/OKRs, e.g.OKR: continue to build and grow a diverse workforce/organization Partner with the DIB Team & Leadership DIB Council to establish an action plan for your departments & division Serve as a TMRG executive sponsor Embed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate\n\n👣 Iteration\n\nMerriam-Webster defines iteration as the “the action or a process of iterating or repeating: such as a procedure in which repetition of a sequence of operations yields results successively closer to a desired result.” At GitLab, we iterate to do the smallest valuable thing to get fast feedback and efficiently reach a desired end goal. Feedback can be from internal users (dogfooding), a limited number of external users (through our early access program), or through feedback from our broader user community. We validate each iteration and adjust, but not at the expense of the user experience that we deliver to our customers.\n\nWhen we iterate at GitLab, we break up the work that we know we need to do into smaller chunks to iterate toward a targeted end state:\n\nMerge in codebase\n\nDogfood\n\nHave some external users (early access program)\n\nEnsure global optimization (use standardized systems)\n\nPlan beyond the iteration\n\nIteration does not require us to ship features that are open to all users from day one. Feedback can come from internal users or a limited number of external users (early access program). Moving through the release process is not iteration though. Iteration is also not a replacement for having a plan. We expect you to know where you are going, but you can iterate to get there.\n\nAn iteration might be additive (adding something) or subtractive (removing something). If you make suggestions that can be excluded from the first iteration, turn them into a separate issue that you link.\n\nWhile you should have a clear vision of the desired outcome and how it addresses a customer pain point or improves the user experience, be efficient in your planning. Unless you identify important cross-functional interdependencies, focus detailed planning on the first step. It might feel you are moving too slowly; however, planning is critical in order to ensure you can move fast when implementing. You’re doing it right if you feel that you have shipped the minimal feature set in the first iteration. This value is the one people most underestimate when they join GitLab. The impact, both on your work process and on how much you achieve, is greater than anticipated. Frequently, the simplest version that provides value turns out to be the best one.\n\nMany people who join GitLab say they already practice iteration. But this is the value that is the hardest to understand and adopt. People are trained that if you don’t deliver a perfect or polished thing, there will be a problem. If you do just one piece of something, you have to come back to it. Doing the whole thing seems more efficient, even though it isn’t. If the complete picture is not clear, your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other GitLab team members being really effective with iteration but don’t know how to make the transition, and it’s hard to shake the fear that constant iteration can lead to shipping lower-quality work or a worse product. In reality, it is possible to ship a minimally valuable product while continuing to adhere to the documented quality standards.\n\nThe way to resolve this is to write down only what value you can add with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration can be uncomfortable, even painful. If you’re doing iteration correctly, it should be. Reverting work back to a previous state is positive, not negative. We’re quickly getting feedback and learning from it. Making a small change prevented a bigger revert and made it easier to revert.\n\nHowever, if we take smaller steps and ship smaller, simpler features, we get feedback sooner. Instead of spending time working on the wrong feature or going in the wrong direction, we can ship the smallest product, receive fast feedback, and course correct. People might ask why something was not perfect. In that case, mention that it was an iteration, you spent only “x” amount of time on it, and that the next iteration will contain “y” and be ready on “z”.\n\nIteration enables results and efficiency.\n\nIn the GitLab Unfiltered video embedded above, GitLab CEO and co-founder Sid Sijbrandij shares key operating principles to reinforce iteration in an organization.\n\nStart with a long-term vision\n\nIteration involves driving results in pursuit of a long-term vision. While the intermediate goals may change as we iterate, we are unlikely to be successful if we don’t start with a vision of what we are working toward. Shipping that vision in iterations allows us to learn from customers using it and adjust the vision if needed. Iteration for the sake of iteration can lead to inefficiencies and not deliver desired results.\n\nIteration is no substitute for planning\n\nIteration without a plan can lead to inefficiencies and a subpar customer experience. Before iterating we need to plan. A plan should include:\n\nTime-bound objective: Where we want to be in a year\n\nUX: User experience we are working toward\n\nQuality: What quality is sufficient quality, inclusive of security\n\nSuccess metric: Usage we want at a specific time\n\nData schema: The data schema we need to measure progress towards project goals\n\nGTM plan: How we want to go to market\n\nEnablement: When we’d plan to train and enable the support and field teams\n\nMarketing: When we’d launch marketing (doesn’t have to be at release)\n\nSecure by design: default to the most secure configuration\n\nThe release process is not iteration\n\nMoving through the release process is not iteration.\n\nThe release process can include:\n\nDogfooding\n\nEarly access\n\nIncremental release using a feature flag\n\nDevelopment stage progression (such as experiment to beta)\n\nRelease\n\nAnnouncement\n\nWhile development stages can be used to indicate release progress, is not itself iteration.\n\nIterate toward global maximum\n\nIf we are not aware of interdependencies beyond our team, and we are not collaborating with others across the organization, we risk deliverables that settle into a “local maximum” of quality, richness, and efficiency. This localization is largely defined by team structure and organizational boundaries. While an iteration can take place within a single team, that team is responsible for identifying inter-dependencies and proactively communicating and aligning with other teams working on related projects. This helps ensure that iterations are not “half-baked” and align with work being done across the entire organization.\n\nDon’t wait\n\nDon’t wait on the small things. When you have something of value like a potential blog post or a small fix, implement it straight away. Right now, everything is fresh in your head and you have the motivation. Inspiration is perishable. Don’t wait until you have a better version. Don’t wait until you record a better video. Don’t wait for an event (like Contribute). Inventory that isn’t released is a liability since it has to be managed, becomes outdated, and you miss out on the feedback you would have received had you implemented it straight away. When we don’t wait we signal intent to others that we have a purpose to resolve something. Note: “Don’t wait” should not be used as a justification for not iterating toward the global maximum or at expense of the plan. If there are interdependencies to be considered or the iteration is customer facing, slow down and ensure that we are considering what is best for GitLab and our customers.\n\nSet a due date\n\nWe always try to set a due date. If needed, we cut scope. If we have something planned for a specific date, we make that date. For example we shipped over 133 monthly releases. But every one of them doesn’t contain all the features we planned. If we planned an announcement for a certain date, we might announce less or indicate what is still uncertain. But we set a due date because having something out there builds trust and gives us better feedback.\n\nCleanup over sign-off\n\nAs discussed in Sid’s interview on iteration, waiting for approval can slow things down. We can prevent this with automation (such as tests of database migration performance) or clean-up after the fact (refactor a Pajamas if something was added that isn’t coherent), but we try to ensure that people don’t need to wait for sign-off. As iteration does not require us to ship to all users on day one, we can clean up after an internal or beta release to mitigate the negative impact to all customers.\n\nStart off by impacting the fewest users possible\n\nIteration does not mean being open to all users from day one. If you do a gradual rollout of your change, prefer:\n\nFew users over many users\n\nInternal users (dogfooding) over external users\n\nEnvironments with fast feedback (SaaS) over slow feedback (self-managed)\n\nReduce cycle time\n\nShort iterations reduce our cycle time. Merging frequently also prevents merge conflicts.\n\nWork as part of the community\n\nSmall iterations make it easier to work with the wider community. Their work looks more like our work, and our work is also quicker to receive feedback.\n\nMinimal Valuable Change (MVC)\n\nWe encourage MVCs to be as small as possible. Always look to make the quickest change possible to improve the user’s outcome. If you validate that the change adds more value than what is there now, then do it. This may be additive (adding something) or subtractive (removing something). No need to wait for something more robust. More information is in the product handbook, but this applies to everything we do in all functions. Specifically for product MVCs, there is additional responsibility to validate with customers that we’re adding useful functionality without obvious bugs or usability issues.\n\nMake a proposal\n\nIf you need to decide something as a team, make a concrete proposal instead of calling a meeting to get everyone’s input. Having a proposal will be a much more effective use of everyone’s time. Every meeting should be a review of a proposal. We should be brainwriting on our own instead of brainstorming out loud. State the underlying problem so that people have enough context to propose reasonable alternatives. The people that receive the proposal should not feel left out and the person making it should not feel bad if a completely different proposal is implemented. Don’t let your desire to be involved early or to see your solution implemented stand in the way of getting to the best outcome. If you don’t have a proposal, don’t let that stop you from highlighting a problem, but please state that you couldn’t think of a good solution and list any solutions you considered.\n\nBy making a proposal you also provide better visibility into the work and the context surrounding it.\n\nIn this GitLab Unfiltered video, GitLab CEO and co-founder Sid Sijbrandij converses about iteration in engineering, leveraging proposals to break work into smaller components.\n\nEverything is in draft\n\nAt GitLab, we rarely mark any content or proposals as drafts. Everything is always in draft and subject to change. When everything is in draft, contributions from team members as well as the wider community are welcomed. By having everything in draft and assuming others have low context, confusion can be reduced as people have shared access to information.\n\nUnder construction\n\nAs we continue to expand the number of users we have, they will continue to expect stability and reliability. We must optimize for the long term without sacrificing stability along the way. This means that users may be inconvenienced in the short term, but current and future users will enjoy a better product in the end.\n\nEducating users on the longer-term plan helps create a shared understanding of how a small change will incrementally grow into something more. For example, we could share how a dropdown will evolve into a much more nuanced solution in the future. We can take the following steps to articulate our plan:\n\nOpen a feedback issue that provides context about the initial MVC (example)\n\nEnsure the direction page articulates a long-term plan (example)\n\nAnnounce the MVC in a release post, link to the feedback issue, and link to the direction page (example)\n\nLow level of shame when dogfooding\n\nIn many organizations, you take a risk when you put forth any work that’s not perfect, work where you haven’t spent endless cycles planning for contingencies or counterpoints. Because of this, you’re incentivized to invest a lot of time and effort into preparing for ‘What if?’ scenarios before any work is presented, even if the release is not customer facing and there is a low level of risk in imperfection.\n\nThe downside to that is clear when we are dogfooding: If you do eventually put forth the work, but it needed to be course-corrected a long time ago, you’ve squandered time that you could have spent improving it through iteration.\n\nHaving a low level of shame when dogfooding or working internally requires you to combat a natural inclination to conceal work until it’s perfect, and instead celebrate the small changes.\n\nCultural lens\n\nCultural differences can bring unique challenges and expectations to iteration. For some, expressions like “it doesn’t have to be perfect…” can challenge cultural norms. We encourage you to bring your authentic self and seek shared understanding when iterating. Giving feedback and ensuring psychological safety are necessary for every iterative attempt.\n\nFocus on improvement\n\nWe believe great companies sound negative because they focus on what they can improve, not only on what is working well. In every conversation, inside and outside the company, we should ask a question: What do you think we can improve? This doesn’t mean we don’t recognize our successes; for example, see our Say Thanks value.\n\nWe are positive about the future of the company. We are Short Term Critical And Long Term Optimistic (STeCALTO, for short).\n\nBe deliberate about scale\n\nFirst, optimize for speed and results (and be deliberate about how your change affects other processes/functionality); when it is a success, figure out how to scale it. Great examples are in this article by Paul Graham.\n\nResist bundling\n\nResist the urge to bundle a series of smaller iterations so team members don’t see a project as their last (or best) opportunity to contribute. It’s tempting to create encompassing projects or initiatives that roll many smaller projects up. This incarnation of scope creep drives up cost, encourages fewer risks, and incentivizes perfection (via longer cycle times) over progress. When we resist bundling, we reduce the risk that work will be canceled due to scale or scope. By resisting bundling we also reduce the coordination needed because fewer people or teams may be involved.\n\nMake two-way door decisions\n\nMost decisions are easy to reverse. In these cases, the Directly Responsible Individual should go ahead and make them without approval. Only when you can’t reverse them should there be a more thorough discussion. By embracing iteration and making two-way door decisions, we are more efficient and achieve more results.\n\nChanging proposals isn’t iteration\n\nChanging something without shipping it is a revision, not iteration. Only when the change is rolled out to users, whether internal users or a limited customer group, can you learn from feedback. When you’re changing a proposal based on different opinions, you’re frequently wasting time; it would be better to roll out a small change quickly and get real world feedback. Never call a revision an iteration because it is almost the opposite.\n\nEmbracing Iteration\n\nIn order to embrace iteration, we should have the attitude that we are trying to achieve as much as possible in a small amount of time; it’s where we land at the end state of an iteration that counts. The benefit of iteration is to get fast feedback from users. Focus on sharing context at the end of the first iteration rather than a hypothetical future state that requires multiple iterations. By embracing iteration we can increase creativity in incremental components.\n\nMake small merge requests\n\nWhen you are submitting a merge request for a code change, or a process change in the handbook, keep it as small as possible. If you are adding a new page to the handbook, create the new page with a small amount of initial content, get it merged quickly via Handbook Usage guidelines, and then add additional sections iteratively with subsequent merge requests. Similarly, when adding features to GitLab, consider ways to reduce the scope of the feature before creating the merge request to ensure your merge request is as small as possible.\n\nAlways iterate deliberately\n\nRapid iteration can get in the way of results if it’s not thought out; for example, when adjusting our marketing messaging (where consistency is key), product categories (where we’ve set development plans), organizational structure or product scope alignment (where real human stresses and team stability are involved), sales methodologies (where we’ve trained our teams) and this values page (where we use the values to guide all GitLab team members). In those instances, we add additional review to the approval process; not to prohibit, but to be more deliberate in our iteration. The change process is documented in the GitLab Handbook Usage page and takes place via merge request approvals.\n\n12 things that are not iteration\n\nIteration is often counterintuitive and difficult to do. To clarify what an iteration is, it helps to see examples of what is not an iteration. Below are 12 examples of things we’ve seen mistaken as iteration, but don’t meet our definition of iteration.\n\nReducing quality, or lowering goal posts\n\nAvoiding or reducing documentation\n\nCompromising on security\n\nDelivering something that’s not the recommended path or on by default\n\nShipping something of no value\n\nAn excuse to focus on unimportant items\n\nMoving through the release process\n\nRevisions you don’t ship or publish\n\nAn excuse to impose unrealistically tight timelines\n\nAn excuse to avoid planning\n\nImposing long hours\n\nExpecting others to fix your work\n\nIn this GitLab Unfiltered video, GitLab co-founder and CEO Sid Sijbrandij elaborates on each of these 12 things that are not iteration.\n\nIteration Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate iteration when we do the smallest viable and valuable thing, get it out quickly for feedback, and make changes based that feedback.\n\nGitLab Job Grade Demonstrates Iteration Competency by… Knowledge Assessment 5 Develops own knowledge by trying and failing. When asking questions isn\'t content with silence or unhelpful/incomplete responses, seeks out primary sources. Knowledge Assessment for Individual Contributors 6 Actively looks for opportunities to iterate and contribute to boring solutions. Balances short term gains and long term benefit with team\'s help. Ships things that aren\'t 100% knowing that you\'ll be able to improve them in the next revision. Asks questions with abandon. Publicly shares failures if you\'ll help colleagues learn. 7 Independently balances short term gains and long term benefit. Identifies opportunities to deliver projects in an iterative way. 8 Is able to take long term goals and turn them into small actionable steps that can be implemented in an iterative way. Identifies and prevents decisions that are not "two-way door decisions". Ships. All the time. Sounds like a broken record in discussions with more junior members of the team; always asking if we can make something smaller. Knowledge Assessment for People Leaders 9 In addition to upholding the requirements of a Staff/Manager level, a Principal/Sr. Manager practices and fosters the value of iteration to team members. They hold their team members accountable for iteration and boring solutions. 10 In addition to upholding the requirements of a Principal/Sr. Manager, a Distinguished/Director proactively finds ways to drive the value of iteration and boring solutions. 11 In addition to upholding the requirements of a  Distinguished/Director , a Sr. Distinguished/Sr. Director embeds the value of Iteration across the department and division.  They use their cognitive and analytical abilities to anticipate and adapt to unpredictabilities in regard to strategic risk in a way that benefits all involved. 12 In addition to upholding the requirements of a Sr. Distinguished/Sr. Director , a Fellow/VP leads the way for the value of Iteration across the division and cross functional teams. They confidently lead their teams through change and proactively take risks based on values and the strategic vision. EVP/CXO In addition to upholding the requirements of a Fellow/VP,  the EVP champions the value of Iteration across GitLab. They are comfortable leading through discomfort and the unease associated with change and innovation.\n\n👁️ Transparency\n\nBe open about as many things as possible. By making information public, we can reduce the threshold to contribution and make collaboration easier. Use public issue trackers, projects, and repositories when possible. Transparency is not communication. Just because something exists in the handbook or elsewhere doesn’t mean it can’t be communicated again or in a more robust fashion to the people who need to understand or acknowledge it. On a personal level, be direct when sharing information, and admit when you’ve made a mistake or were wrong. When something goes wrong, it is a great opportunity to say “What’s the kaizen moment here?” and find a better way without hurt feelings.\n\nEven as a public company, we know that our value of transparency will be key to our success. This value can be hard to follow at times. You might ask yourself: what should be shared, how much to share, whether or not to speak up but definitely take the time to always opt for maximum transparency by adhering to the operating principles below. Often, company values get diluted as they grow, most likely because they do not write anything down. But we will make sure our values scale with the company. As a public company, we declare everyone in the company as an insider, which allows us to remain transparent internally about our numbers, etc. Everything else that can be transparent will continue to be so.\n\nWhen there are exceptions, material that is not public by default is documented.\n\nPublic by default\n\nEverything at GitLab is public by default. The public process does two things: allows others to benefit from the conversation and acts as a filter. Since there is only a limited amount of time, we prioritize conversations that a wider audience can benefit from.\n\nOne example of transparency at GitLab is the public repository of this website that also contains this company handbook. Others include the GitLab CE and GitLab EE issue trackers, as well as marketing and infrastructure. Transparency creates awareness for GitLab, allows us to recruit people that care about our values, gets us more and faster feedback from people outside the company, and makes it easier to collaborate with them. It is also about sharing great software, documentation, examples, lessons, and processes with the whole community and the world in the spirit of open source, which we believe creates more value than it captures.\n\nIn line with our value of transparency and being public by default, all GitLab team member profiles should be public. Public profiles also enable broader collaboration and efficiencies between teams. To do so, please make sure that the checkbox under the Private profile option is unchecked in your profile settings. If you do not feel comfortable with your full name or location on your profile, please change it to what feels appropriate to you as these are displayed even on private profiles.\n\nBecause we are public by default and have the SAFE framework we don’t need to make cases for why things should be transparent. If something is unSAFE and needs to remain not public it can be.\n\nNot public\n\nWe make information public by default because transparency is one of our values. However it is most important to focus on results. Therefore, a category of information is public unless there is a reason for it not to be. If something is not public, there should be a reference in the handbook that states a confidential decision was taken with a link to our Not Public guidelines, unless GitLab Legal and Corporate Affairs believes it carries undue risk. We document what is not public by default on our communication page.\n\nIf you believe something shouldn’t be public that currently is (or vice versa), then make a merge request to the relevant page(s) suggesting the change so that you can collaborate with others and discuss with the DRI. When content contains information which is not public it is recommended to remove the specific sections which are not public, put them on their own page in the internal handbook, and then link out to that with a “not public/internal only” note. Always share publicly what we can.\n\nWhen information is not public, it may also be treated as limited access, only shared with certain GitLab roles, teams, or team members due to privacy considerations, contractual obligation, or other reasons that the author or DRI can specify. Certain kinds of information default to limited access, including details about team members or customers who did not give permission to share the information.\n\nMost companies become non-transparent over time because they don’t accept any mistakes. Instead, we should always err on the side of transparency when there is a choice to be made between caution or inaction, and transparency. If we make a mistake, we now know what the limits of transparency are for the company and we should document this. The only exception to this rule would be in the case when there are legal concerns.\n\nBecause some information is not public the public information can be lacking some context. We should be cognizant of that.\n\nDirectness\n\nBeing direct is about being transparent with each other. We try to channel our inner Ben Horowitz by being both straightforward and kind. Feedback is always about your work and not your person. That doesn’t mean it will be easy to give or receive it.\n\nArticulate when you change your mind\n\nIf you state one thing, and then change course and support a different direction, point, or outcome, articulate this. It is OK to have your position changed by new data. Articulating that an earlier stance is not your current stance provides clarity to others and encourages data-driven decision making.\n\nSurface issues constructively\n\nBe transparent to the right people (up) at the right time (when still actionable). If you make a mistake, don’t worry; correct it and proactively let the affected party, your team, and the CEO know what happened, how you corrected it, and how—if needed—you changed the process to prevent future mistakes.\n\nTransparency is most valuable if you continue to do it when there are costs\n\nWe practice transparency even when hiding the facts would be easier. For example, many companies do not give you the real reason why they declined your application because it increases the chance of legal action. We want to only reject people for the right reasons and we want to give them the opportunity to grow by getting this feedback. Therefore, we’ll accept the increased risk of holding ourselves to a high standard of making decisions and do the right thing by telling them what we thought. Other examples are being transparent about security incidents and participating in and contributing to Live Broadcasts.\n\nTransparency has costs (distraction, mis-interpretation, etc.) but also great benefits (productivity, hiring, retention, brand awareness, etc). Team members can view more details on these benefits by referencing the “Transparency Benefit Quantification” slides in Google Drive). We should carefully weigh the tradeoff between costs and benefits, to prevent a knee-jerk reaction to reduce transparency when it has costs.\n\nSingle Source of Truth\n\nBy having most company communications and work artifacts be public to the Internet, we have one single source of truth for all GitLab team members, users, customers, and other community members. We don’t need separate artifacts with different permissions for different people.\n\nFindability\n\nOur transparency value means more than just making information accessible to all. In order to improve performance it’s important that we not only ensure information is accessible, but also ensure it flows to the correct places and is findable by those who need it. Focusing on information flow will ensure you, for example, utilize multi-modal communication, or that you keep your stakeholders informed of changes by posting links to MRs in Slack.\n\nSay why, not just what\n\nTransparent changes have the reasons for the change laid out clearly along with the change itself. This leads to fewer questions later on because people already have some understanding. A change with no public explanation can lead to a lot of extra rounds of questioning, which is less efficient.\n\nThis also helps with institutional memory: a year from now when you want to know why a decision was made, or not, the issue or MR that has the decision also shares why the decision was made. This is related to Chesterton’s fence - it’s much easier to suggest removing or changing something if you know why it exists in the first place.\n\nIf you use generalized terms such as “industry standard” or “best practices,” be sure to give context, as without context they can be seen as potentially vague or opaque.\n\nSimilarly, merely stating a single value isn’t a great explanation for why we are making a particular decision. Many things could be considered “iteration” or “efficiency” that don’t match our definition of those values. Try to link to an operating principle of the value or provide more context, instead of just saying a single value’s name.\n\nSaying why and not just what enables discussion around topics that may impact more than one value; for instance, when weighing the efficiency of boring solutions with the focus on customer results. When decisions align with all of our values, they are easy to discuss and decide. When there are multiple values involved, using our values hierarchy and directly discussing the tradeoffs is easier with more context.\n\nArticulating why also helps people understand how something changed when you articulate that you changed your mind.\n\nSaying why does not mean justifying a decision against all other suggestions. The DRI is responsible for their decision. The DRI is not responsible for convincing other people, but they should be able to articulate their reasoning for the change.\n\nWhen a GitLab Team Member comes across an ask or material (MR, handbook, etc.) that does not provide a “why” with sufficient context, the Team Member is responsible for getting the why and, if needed, working with the DRI to ensure that it is adequately documented and communicated to give context to other team members. In the absence of a why, team members may speculate the why. This is something that can lead to disruption and inefficiency.\n\nReproducibility\n\nEnable everybody involved to come to the same conclusion as you. This not only involves reasoning, but also providing, for example: raw data and not just plots; scripts to automate tasks and not just the work they have done; and documenting steps while analyzing a problem. Do your best to make the line of thinking transparent to others, even if they may disagree.\n\nTransparency Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate transparency when we are open with as many things as possible reducing the threshold to contribution and make collaboration easier.\n\nGitLab Job Grade Demonstrates Transparency Competency by… Knowledge Assessment 5 Uses public issue trackers, projects, and repositories when possible. Looks for opportunities to publicly share the things that they are working on. Knowledge Assessment for Individual Contributors 6 Provides context and background on projects and issues so that those with no prior knowledge are able to contribute to the discussion. They welcome feedback and new ideas as they know that will lead to a better solution. 7 Continually surfaces improvements across their functional area of expertise. They share feedback with others and understand how to disagree and commit to solutions. They model what it means to be as open as possible. They encourage conversation in public channels. 8 Implements open processes across their team. They also track team issues and projects openly so their team members are aware of everything that is happening on a team at a given time. They leverage feedback to drive the best possible outcomes with the information they have available. They also share feedback with their team and their peers in a timely, kind manner so their position on a given topic is known. Knowledge Assessment for People Leaders 9 Fosters and coaches openness across cross functional departments. They lead cross functional issues, projects and ideas inviting feedback to generate the best possible solution. They hold their teams accountable to continue to find opportunities to share things openly. They give feedback to their team members, peers and managers in a timely, kind manner so their position on a topic is known. 10 Drives their departmental strategy with openness as a key value. They hold their management team accountable to working openly and pushes them to make everything transparent even when it might be difficult to do so. They coach managers on the value that additional feedback can bring to the end solution. 11 Develops leaders that work openly and continue to provide timely, kind feedback across their division. They develop leaders that drive their teams with openness as a foundational part of the way that they operate. 12 Leads the company by being open in all things. They are open with things that might traditionally not be shared broadly. They communicate directly and provide feedback in a timely manner to initiatives happening within their department and across the company. They hold the e group and other leaders accountable for upholding this value. EVP/CXO Champions transparency both internally, across the company and externally. They participate both internally and externally in events and share the value that being open can provide to increasing trust with team members and others that interact with our product. They provide timely, kind feedback with initiatives happening internally and externally. They hold the e group and other leaders accountable for upholding this value.\n\nWhy have values\n\nOur values provide guidelines on how to behave and are written to be actionable. They help us describe the type of behavior that we expect from GitLab team members. They help us to know how to behave in the organization and what to expect from others.\n\nValues provide a framework for distributed decision making, detailed in GitLab’s TeamOps management philosophy. They allow individuals to determine what to do without asking their manager and they allow teams to make consistent decisions. When teams across the organization reference the same values in their decision making, there is consistency in how decisions are made. This ensures that our culture remains driven by our values.\n\nLastly, values create a conscious culture that is designed to help you prosper and experience exceptional personal growth through work.\n\nFive dysfunctions\n\nOur values also help us to prevent the five dysfunctions:\n\nFear of conflict Seeking artificial harmony over constructive passionate debate => prevented by transparency, specifically directness and collaboration, specifically short toes\n\nAbsence of trust Unwilling to be vulnerable within the group => prevented by collaboration, specifically kindness\n\nAvoidance of accountability Ducking the responsibility to call peers on counterproductive behavior which sets low standards => prevented by results, iteration, and transparency\n\nInattention to results Focusing on personal success, status, and ego before team success => prevented by results\n\nLack of commitment Feigning buy-in for group decisions creates ambiguity throughout the organization => prevented by transparency, specifically directness\n\nSome dysfunctions are not addressed directly by our values; for example, trust is not one of our values. Similar to happiness, trust is something that is an outcome, not something you can strive for directly. We hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given.\n\nOperating principles\n\nOperating principles are behaviors that empower GitLab team members to definitively live out a given value. They clarify what a given core value means and looks like at GitLab. Understanding this distinction is critical to thriving at GitLab, particularly for newer team members who may be familiar with a prior organization’s interpretation of iteration or collaboration (as examples).\n\nProcess for removing operating principles\n\nValues are not just things we do, but things that actively drive good behavior. When we remove them it doesn’t mean we stopped believing in it, just that it wasn’t actively helping to drive behavior. If we don’t prune our operating principles, then we will be like every other company: things that make sense but are not leading to a better culture.\n\nTo remove an operating principle from the Handbook page, submit your change through a merge request and explain your reasons in the merge request description.\n\nThe GitLab Value Handbook Page owner must approve and merge the request.\n\nMention the specific value\n\nMost companies have a list of values. In companies without strong values, folks often use generalizations when they refer to values. For example, “not a value add” or “scored well on values during our interview.” In companies with strong values, folks name the specific, relevant value as it applies to a given topic or situation. Values are only powerful when they are individually understood and applied by team members.\n\nHow to scale the business while preserving GitLab values?\n\nFor certain business decisions or projects (such as compensation and end-point management ), GitLab team members may have a lot of opinions and interest, and they want to provide their feedback and comments. On the other hand, it might be challenging for the project DRI to digest and respond to all these inputs. What should you do in this scenario?\n\nEveryone can contribute at GitLab. We encourage team members to share feedback and leave comments on issues. Leaving feedback and comments shows that team members care about a topic and about GitLab as a company. These perspectives may also uncover potential risks and problems in the project.\n\nThere shouldn’t be a “Don’t they have their job to do?” type of response. Furthermore, we shouldn’t judge team members who are perceived as being the “squeaky wheel.” At GitLab, we measure results, not hours. As long as a team member is producing required results, they are empowered to decide how to spend their time.\n\nOn the other hand, as GitLab grows in size, we need to make decisions and the decisions may not be agreed to by everyone. If a decision or project is sensitive or controversial, and receives large amounts of feedback, it can be challenging for the project DRI to handle. In these cases, it’s best to have time-boxed feedback built into timelines.\n\nIn a hypothetical example where a DRI needs to decide between red and gold potatoes for a stew, they would create an issue with the following sentiment:\n\nWe’re deciding between red potatoes and gold potatoes to go into the stew. We have to decide by Tuesday 2020-07-14 so that we can get our order to the grocery store on Wednesday 2020-07-15. We’ll be collecting input and feedback until that point. Jane is the DRI and will make the decision on 2020-07-14 with all the information we have at that point. Here is the framework we’re using for the decision:\n\nare there allergies to consider?\n\ncost per pound\n\nteam member preferences\n\nOnce the decision is made, it will be what is going into the stew.\n\nThis method has shown itself to be effective at soliciting productive feedback that doesn’t derail a timeline while ensuring team members feel heard.\n\nWhy our values are public\n\nCompanies are encouraged to copy and implement GitLab’s values. They are Creative Commons and can be copied verbatim.\n\nWe make our values public for the same reasons we make our OKRs (Objectives and Key Results) and strategy public. There is great power and efficiency in teams who share company values. Concealing values until after someone is hired into an organization is not a wise strategy.\n\nNot everyone will see our values and feel aligned with them, and that’s OK. By making values public, it shows respect for the time of job seekers who conduct due diligence on prospective employers. When people who are aligned with GitLab’s values apply for an open vacancy, this allows our hiring teams to more efficiently move candidates through the interview process.\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nCompanies may ask you to write a blank check. They’ll say, ‘Come join our organization, and when you’re here, you need to subscribe to our values, our way of working, and our strategy. It’s very essential, and it’s part of our identity!’\n\nBut these companies don’t give you the opportunity up front to evaluate it. It doesn’t make any sense to me. If it’s so important that people share your values, have them out there.\n\nHierarchy\n\nOccasionally, values can contradict each other. It’s useful to keep in mind this hierarchy to resolve confusion about what to do in a specific circumstance, while remaining consistent with our core values.\n\nThink of the hierarchy as a weighting system. Values higher in the hierarchy do not automatically override values lower in the hierarchy. Here are some examples:\n\nIf a change impacts Transparency positively but impacts Efficiency negatively in roughly the same amount, we would move ahead since Transparency is higher in the hierarchy than Efficiency.\n\nIf a change has a massive positive impact on Diversity but negatively impacts Iteration, we would move ahead even though Diversity is lower in the hierarchy than Iteration because the overall impact is more positive than negative.\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nIt’s an attempt to relieve at least some of the tension. It’s not absolute. If you think of values as binary, that’s not going to work. There will always be interpretation, and there’s always magnitude to consider.\n\nWe made a hierarchy so that it’s clear, in the end, the result matters most. For instance, we’re not going to be transparent for the sake of being transparent. We’re not radical in our transparency. We do it because we think it will lead to better outcomes.\n\nThose hierarchies are really important. They won’t preempt every debate, but it helps.\n\nUpdating our values\n\nOur values are updated frequently and as needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. If you’re a team member or in the core team please post a link to the MR in the #values Slack channel. If you’re not part of those groups, please send a direct Twitter message to @sytses.\n\nHow do we reinforce our values\n\nWhatever behavior you reward will become your values. We reinforce our values by:\n\nCriteria we use for promotions and communicate to the whole company on announcement.\n\nWhat we select for during hiring.\n\nWhat we emphasize during on-boarding.\n\nCriteria we use for our annual compensation review.\n\nWhat we refer to when making decisions.\n\nThe example the E-group sets for the company since a fish rots from the head down.\n\nWhat we expect from all team members, as ambassadors for our values.\n\nKeeping them up to date with a stream of commits that add details.\n\nBehavior we give each other 360 feedback on.\n\nBehavior we compliment.\n\nCriteria we use for discretionary bonuses.\n\nWhat we include in our offer letters\n\nCriteria we use to manage underperformance.\n\nWhat we do when we let people go.\n\nGiving value awards during Contribute.\n\nProviding GitLab team members and qualified individuals transparency into all aspects of the company through the CEO Shadow Program to enable them to better engage and collaborate cross-functionally.\n\nLinking the takeaways of courses to our values, like we did for the Crucial Conversations training.\n\nThe default settings of the software we use (for example: Speedy meetings, document sharing, agendas, etc.)\n\nReinforcing our values with features in GitLab, for example the Iterations feature.\n\nApplying one of our values virtual backgrounds in video calls.\n\nOur GitLab Song Book, the song lyrics often mention GitLab values.\n\nRegularly conduct a values exercise at the e-group offsite.\n\nThe most important moments to reinforce our values are decisions which affect individual team members most: hiring, promotions, and bonuses, which is why every promotion document at GitLab is shared with the entire company and uses the values as its core structure.\n\nIn negative feedback, we should be specific about what the problem is. For example, saying someone is “not living the values” isn’t helpful.\n\nYour values are what you hire for, what you praise people for, and what you promote them for. By definition, what you do in those instances are your values. It’s not what you say they are. Values should be explicitly part of our hiring process, our job profiles, and our review process.\n\nWhen we give bonuses and promotions, they are always linked to values. That’s the crucial thing. If you reinforce them there, that’s the most powerful thing you can do. — Sid Sijbrandij, GitLab co-founder and CEO\n\nWhat to do if values aren’t being lived out\n\nValue erosion can occur when indifference and apathy are tolerated. It can also occur when individuals justify undesired behaviors by interpreting values as “me values” rather than “company values.” For example, a team member may speak to the importance of personal efficiency in order to justify not collaborating professionally with peers. This is not what we expect from team members in terms of efficiency and collaboration.\n\nIf you feel that values are not being lived out in a given scenario, speak up and ask for context in a respectful manner. Navigating value conflicts starts with assuming positive intent from other team members. Offer links to relevant values and/or operating principles when discussing the issue. If there is confusion or disagreement about the interpretation of a value, please surface the discussion in GitLab’s #values Slack channel (for GitLab team members) or @-mentioning @gitlab on Twitter (for those who do not work at GitLab).\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nAlmost every time we face a hard decision at GitLab, it’s because values are in conflict. It’s not binary logic. It requires conversation, and sometimes there is no obvious answer. We can only achieve resolution by respectfully talking with each other and trusting the DRI to make the ultimate decision.\n\nPermission to play\n\nFrom our values we excluded some behaviors that are obvious; we call them our permission to play behavior:\n\nBe truthful and honest.\n\nBe dependable and reliable.\n\nTry to keep promises. If you might not keep a promise, proactively communicate as soon as you suspect it.\n\nBe deserving of the trust of our team members, users and customers.\n\nBe committed to the success of the whole organization.\n\nAct in the best interest of the company, our team members, our customers, users, and investors.\n\nMake the best decisions for GitLab.\n\nAct in accordance with the law.\n\nDon’t show favoritism as it breeds resentment, destroys employee morale, and creates disincentives for good performance. Seek out ways to be fair to everyone.\n\nPlaying politics is counter to GitLab values\n\nWe don’t want people to play politics at GitLab.\n\nAn example of politics is people discussing a proposal and being overly focused on whose proposal it is. This is a manifestation of the Belief Bias, where we judge an argument’s strength not by how strongly it supports the conclusion but by how strongly we support the conclusion. Proposals should be weighed on their merits and not on who proposed them. Another example is people being promoted based on others liking them or having a lot of alliances. We want people to be promoted based on their results. We value collaboration, but that’s different from being promoted just because people like you.\n\nBelow are some attributes of political and non-political work environments. GitLab plans to maintain a non-political one.\n\nPolitical environment Non-political environment Values are weaponized and used out of their intended context Team members utilize values with a positive intent Team members are driven by self-interest Team members are driven by company interest Team members work in silos Team members optimize globally People have territorial behaviors and are quick to perceive suggestions as attacks People have short toes People have unhealthy alliances with backroom conversations People have good intent and actively collaborate with folks Information is intentionally withheld Information is shared early (often WIP) and at the same time with all interested parties People try to undermine each other’s credibility by arguing with the weakest part of their argument People take a “steel man” position and argue against the strongest version of your opponent’s position Folks do not provide direct feedback. Instead, they withhold their thoughts or speak behind each other’s backs Feedback is given directly. This includes feedback about a manager’s team Communicating your own suggestions through a report instead of directly Feedback is given directly from the person who has it Evaluating proposals or work by who said or did it instead of by what is in it Proposals\xa0and work is evaluated without regard to who worked on them Lack of transparency in escalations. Team members go to a manager without first attempting to align with peers on an issue or letting peers know Team members speak directly to each other about feedback and requests in order to resolve their own conflicts. When they escalate, they do it in an effective way\n\nValues make choices\n\nValues make and clarify choices. A well-chosen value has a defensible opposite. Apple, for example, values secrecy over transparency and product perfection over iteration. They are successful building around our counter values — although the result is a very different company.\n\nWhat is not a value\n\nAll-remote isn’t a value. It is something we do because it helps to practice our values of transparency, efficiency, results, and diversity, inclusion & belonging.\n\nQuestions from new team members\n\nDuring every GitLab 101 session with new hires we discuss our values. We document the questions and answers to Frequently Asked Questions about the GitLab Culture.\n\nNew team members should read GitLab’s guide to starting a new remote role, and reference interviews centered on values within the GitLab Unfiltered YouTube channel.\n\nMission\n\nOur mission is that everyone can contribute. This mission guides our path, and we live our values along that path.\n\nMitigating Concerns\n\nWe have a page which documents our Mitigating Concerns. Many of our values help to mitigate some of these concerns.\n\nGitLab Values Quiz\n\nAnyone with a GitLab account can access the GitLab Values Quiz. To participate in the quiz, you will need to complete this learning course in Level Up. If you have questions, please reach out to our L&D team at learning@gitlab.com.\n\nLast modified December 3, 2024: Release process is not iteration (8b0cde4d)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:49:06,456 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:49:06,456 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/company/
2024-12-07 17:49:12,325 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/company/'}, page_content="About GitLab\n\nAMAs\n\nWhat you need to know about Ask Me Anything (AMA)\n\nApproach to OKRs at GitLab\n\nAn overview of how OKRs are done at GitLab.\n\nBeing a public company\n\nGitLab as a Public Company\n\nIn 2017, GitLab established aspirational milestones for a public offering, achieving $1B of annualized recurring revenue, and positive operating cash flow in order to align our efforts and investments to common goals. GitLab began trading on the Nasdaq Global Select Market on October 14, 2021 under the ticker symbol “GTLB.”\n\nWe continue to believe that being a public company is an integral part of realizing our mission. As a public company, GitLab may benefit from enhanced brand awareness, access to capital, shareholder liquidity, autonomy, and transparency.\n\nCadence\n\nEverything in a company happens in a certain cadence. The period of each cadence differs. Learn about the cadences we have at GitLab.\n\nE-Group offsite\n\nThe E-Group offsite happens every quarter for four days after the Board of Directors meeting\n\nE-Group Weekly\n\nFor executives to connect on a weekly basis in order to get timely input from E-Group, align on key initiatives, inform about key business happenings and celebrate company successes.\n\nFamily and Friends Day\n\nAt GitLab, we are family and friends first, work second. A quarterly Family and Friends Day during COVID-19 helps our Team Members prioritize their well-being.\n\nGitLab All-Company Meetings\n\nAn overview of GitLab Assembly and Quarterly Kickoff Meetings\n\nGitLab Culture\n\nHere's a look at what you can expect from our culture and all-remote environment.\n\nGitLab Environmental, Social, and Governance\n\nAn overview of corporate sustainability at GitLab.\n\nGitLab licensing technology to independent Chinese company FAQ\n\nOn this page you can view frequently asked questions about GitLab licensing its technology to a new, independent Chinese company.\n\nGitLab Mission\n\nWe at GitLab believe that all digital products should be open to contributions; from legal documents to movie scripts, and from websites to chip designs.\n\nGitLab Purpose\n\nGitLab empowers everyone through knowledge sharing, job access, and our software platform.\n\nGitLab Strategy\n\nGitLab has a 3 year strategy to be the leading complete DevSecOps platform delivered as a single application.\n\nGitLab Vision\n\nBehind the scenes of The DevSecOps Platform\n\nGroup Conversations\n\nEverything you need to know about GitLab's daily, recurring Group Conversations\n\nHistory of GitLab\n\nReview a summarised history of GitLab and the adventure so far from 2011 up until the present day. Learn more here!\n\nInfrastructure Standards\n\nThis handbook section defines the latest iteration of infrastructure standards for AWS and GCP across all departments and groups at GitLab.\n\nInspired by GitLab\n\nWhich companies can be listed here?\n\nAny company that has been inspired by GitLab’s culture and/or by any part of our handbook can be listed here.\n\nTransparency is one of GitLab’s values, and so we encourage you and your company to read our handbook and use the parts that make sense to your business, or even adapt it to your context.\n\nWith that, we want to know what on GitLab’s culture or on GitLab’s handbook inspired you, and how are you and your company using it to the benefit your business?\n\nKey Reviews\n\nPurpose\n\nAt most companies, this would be a quarterly meeting for senior function leaders to present priorities, progress, and risk mitigations to the CEO. We allow some additional stakeholders to attend to invite a broader range of perspectives, give visibility to peers across functions, and create broader accountability.\n\nMembers of E-Group and department leaders nominated by their E-Group leader can be required or optional. Their E-Group member will determine desired participation from within their function.\n\nKPIs\n\nWhat are KPIs\n\nEvery part of GitLab has Key Performance Indicators (KPIs) linked to the company OKRs. Avoid the term metric where we can be more explicit. Use KPI instead. A function’s KPIs are owned by the respective member of e-group. A function may have many performance indicators (PIs) they track and not all of them will be KPIs. KPIs should be a subset of PIs and used to indicate the most important PIs to be surfaced to leadership.\n\nMeet Our Team\n\nMore than 3,000 people have contributed to GitLab. The GitLab Inc. team consists of the following 2,349 team members and their 363+ pets. We believe we’re the world’s largest all-remote organization and we currently have team members in more than 65 countries and regions. This page lists who people report to, and on a separate page we detail the organizational structure. You can get a sense of the team culture and our inclusion by visiting our culture page and our Identity Data page.\n\nOnly Healthy Constraints\n\nCompanies often slow down as they mature. GitLab strives for healthy constraints.\n\nOrganizational Structure\n\nGitLab has at most eight layers in the company structure (Associate/Intermediate/Senior, Manager/Staff, Senior Manager/Principal, Director/Distinguished, Senior Director, VP/Fellow, Executives, Board). View more here!\n\nOur stewardship of GitLab\n\nGitLab have an open core business model and generate almost all our revenue with subscriptions to paid tiers. Learn more!\n\nPricing model\n\nMost GitLab functionality is and will be available for free in our Free tier. Paid tiers include features targeted for managers, directors, and executives.\n\nQuote to Cash\n\nGitLab's Quote to Cash systems and processes\n\nStill a Startup\n\nGitLab elevates others through knowledge sharing, job access, and our software platform..\n\nWorking Groups\n\nLike all groups at GitLab, a working group is an arrangement of people from different functions. Learn more!\n\nYearlies\n\nYearlies are the annual goals for the company. Yearlies should have measurable deliverables.\n\nLast modified September 1, 2023: Add comment to vision doc to signpost to buyer exp. (25772a09)\n\nView page source - Edit this page - please contribute.")]
2024-12-07 17:49:12,842 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:49:12,842 - service.py - ERROR - HTTP error occurred while processing URL https://handbook.gitlab.com/sitemap.xml: Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:49:12,842 - controller.py - ERROR - 500: Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:50:10,733 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:50:10,733 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:50:11,380 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:50:11,480 - vector_db.py - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:54:00,537 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:54:00,538 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:54:01,166 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:54:01,261 - vector_db.py - INFO - Faiss index loaded from faiss_index_file
2024-12-07 17:54:35,599 - service.py - INFO - Processing URL: https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:54:35,600 - service.py - INFO - URL https://handbook.gitlab.com/sitemap.xml is identified as a sitemap.
2024-12-07 17:54:35,600 - service.py - INFO - Processing sitemap: https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:54:35,600 - service.py - INFO - Fetching sitemap from https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:54:38,119 - service.py - INFO - Successfully fetched sitemap from https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:54:38,379 - service.py - INFO - Extracted 3788 URLs from the sitemap.
2024-12-07 17:54:38,380 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/values/
2024-12-07 17:54:45,623 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/values/'}, page_content='GitLab Values\n\nLearn more about how we live our values at GitLab\n\nCREDIT\n\nGitLab’s six core values are 🤝 Collaboration, 📈 Results for Customers, ⏱️ Efficiency, 🌐 Diversity, Inclusion & Belonging, 👣 Iteration, and 👁️ Transparency, and together they spell the CREDIT we give each other by assuming good intent. We react to them with values emoji and they are made actionable below.\n\nAbout our values\n\nWe take inspiration from other companies, and we always go for the boring solutions. Our CEO, Sid Sijbrandij, has shared the origin of each of the CREDIT values, but just like the rest of our work, we continually adjust our values and strive to make them better. GitLab values are a living document. In many instances, they have been documented, refined, and revised based on lessons learned (and scars earned) in the course of doing business.\n\nWe used to have more values, but it was difficult to remember them all. In response, we condensed them, created an acronym (CREDIT), and listed operating principles to guide behavior.\n\nEveryone is welcome to suggest improvements. Please assign MRs to update these values to our CEO Sid and @mention him in Slack if you work at GitLab Inc. or on Twitter if you don’t.\n\nDriving Results with CREDIT from GitLab on Vimeo.\n\n🤝 Collaboration\n\nTo achieve results, team members must work together effectively. At GitLab, helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve. Similarly, you can rely on others for help and advice—in fact, you’re expected to do so. Anyone can chime in on any subject, including people who don’t work at GitLab. The person who’s responsible for the work decides how to do it, but they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented.\n\nKindness\n\nWe value caring for others. Demonstrating we care for people provides an effective framework for challenging directly and delivering feedback. Kindness doesn’t mean holding back on feedback or avoiding disagreements, these are crucial to professional growth and getting results for customers. Kindness means you make a separation between the work and the person, you can criticize someone’s work but still be respectful to the person. Give as much positive feedback as you can, and do it in a public way.\n\nShare\n\nThere are aspects of GitLab culture, such as intentional transparency, that are unintuitive to outsiders and new team members. Be willing to invest in people and engage in open dialogue. For example, consider making private issues public wherever possible so that we can all learn from the experience. Don’t be afraid of judgement or scrutiny when sharing publicly, we all understand it’s impossible to know everything.\n\nEveryone can remind anyone in the company about our values. If there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions.\n\nShare problems you run into, ask for help, be forthcoming with information and speak up.\n\nNegative feedback is 1-1\n\nGive negative feedback in the smallest setting possible. One-on-one video calls are preferred.\n\nNegative feedback is distinct from negativity and disagreement. If there is no direct feedback involved, strive to discuss disagreement in a public channel, respectfully and transparently.\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nWe deal with negative all the time at GitLab. If it’s not a problem, then why are we discussing it? We deal with negativity a lot, and that’s also part of our ambition.\n\nIf you want to get better, you talk about what you can improve. We’re allowed to publicly discuss negative things; we’re not allowed to give negative feedback in a large setting if it could be feasibly administered in a smaller setting.\n\nNegative feedback can be given in a group setting if it’s to someone higher in the management chain. This shows that no one is above feedback. GitLab co-founder and CEO Sid Sijbrandij and former CTO Eric Johnson discuss this in this GitLab Unfiltered video.\n\nProvide feedback in a timely manner\n\nWe want to solve problems while they are small. If you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer), please voice your concerns rather than keeping them to yourself. If you need to escalate beyond your manager, you could consider speaking to your skip-level, a more senior person, or a people business partner.\n\nSay thanks\n\nRecognize the people that helped you publicly, for example in our #thanks chat channel.\n\nWhen publicly thanking, it’s important to recognize the following:\n\nShowing thanks in as large a setting as possible (company-wide) at a company as large as ours is the exception instead of the norm, it takes some getting used to.\n\nBeing thanked at the company level for what you view as a relatively small or minuscule contribution can feel awkward.\n\nThanking a person in #thanks should be done sincerely and summarize why you are thankful so the person on the receiving end can easily understand why they are being thanked. Even while assuming positive intent, not all folks are comfortable with public praise. Help this person understand how they went above and beyond and why you felt it was important for the team member to be recognized.\n\nThere are a number of good ways and places to say thanks. We shouldn’t limit saying thanks to just the #thanks channel.\n\nGive feedback effectively\n\nGiving feedback is challenging, but it’s important to deliver it effectively. When providing feedback, always make it about the work itself; focus on the business impact and not the person. Make sure to provide at least one clear and recent example. If a person is going through a hard time in their personal life, then take that into account. An example of giving positive feedback is our thanks chat channel. For managers, it’s important to realize that team members react to a negative incident with their managers six times more strongly than they do to a positive one. Keeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself. In the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the team member’s performance going forward. Give recognition generously, in the open, and often to generate more engagement from your team.\n\nGet to know each other\n\nWe use a lot of text-based communication, and if you know the person behind the text, it will be easier to prevent conflicts. So we encourage people to get to know each other on a personal level through informal communication, for example, virtual coffee chats, and during GitLab Contribute.\n\nReach across company departments\n\nWhile it’s wise to seek advice from experts within your function, we encourage GitLab team members to do the same across departments. This enables the company to iterate more quickly, embrace the understanding that everyone can contribute and include more diverse perspectives when possible.\n\nDon’t pull rank\n\nIf you have to remind someone of the position you have in the company, you’re doing something wrong. People already know our decision-making process. Explain why you’re making the decision, and respect everyone irrespective of their function. This includes using the rank of another person - including the CEO - to sell an idea or decision.\n\nAssume positive intent\n\nWe naturally have a double standard when it comes to the actions of others. We blame circumstances for our own mistakes, but individuals for theirs. This double standard is called the Fundamental Attribution Error. In order to mitigate this bias, you should always assume positive intent in your interactions with others, respecting their expertise and giving them grace in the face of what you might perceive as mistakes.\n\nWhen disagreeing, folks sometimes argue against the weakest points of an argument, or an imaginary argument (e.g. “straw man”). Assume the points are presented in good faith, and instead try to argue against the strongest version of your opponent’s position. We call this arguing against a “steel” position, instead of a “straw” one. This concept is borrowed from argue the “steel man” technique.\n\nA “steel” position should be against the absolute most effective version of your opponent’s position — potentially even more compelling than the one they presented. A good “steel” position is one where the other person feels you’ve represented their position well, even if they still disagree with your assumptions or conclusion.\n\nAddress behavior, but don’t label people\n\nThere is a lot of good in this article about not wanting jerks on our team, but we believe that jerk is a label for behavior rather than an inherent classification of a person. We avoid classifications.\n\nSay sorry\n\nIf you made a mistake, apologize as soon as possible. Saying sorry is not a sign of weakness but one of strength. The people that do the most work will likely make the most mistakes. Additionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to be repeated by someone else. Mistakes can include when you have not been kind to someone. In order to reinforce our values, it is important, and takes more courage, to apologize publicly when you have been unkind publicly (e.g., when you have said something unkind or unprofessional to an individual or group in a Slack channel).\n\nNo ego\n\nDon’t defend a point to win an argument or double-down on a mistake. You are not your work; you don’t have to defend your point. You do have to search for the right answer with help from others.\n\nIn a GitLab Unfiltered interview, GitLab Head of Remote Darren M. adds context on this operating principle.\n\nIn many organizations, there’s a subtle, low-level, persistent pressure to continually prove your worth. And I believe that this fuels imposter syndrome and wreaks havoc on mental health.\n\nWhat’s so troubling to me is how often perception is reality. In other words, those who have mastered the art of being perceived as elite reap benefits, though this has nothing to do with actual results.\n\nAt GitLab, “no ego” means that we foster and support an environment where results matter, and you’re given agency to approach your work in the way that makes sense to you. Instead of judging people for not approaching work in an agreed-upon way, “no ego” encourages people to glean inspiration from watching others approach work in new and different ways.\n\nBeing no ego is a standard we hold ourselves as people to but is not one that applies to GitLab as a company or product. We want to celebrate and highlight GitLab’s accomplishments, including being one of the largest all-remote companies. This doesn’t mean we don’t recognize our mistakes, including how we handled telemetry.\n\nSee others succeed\n\nA candidate who has talked to a lot of people inside GitLab said that, compared to other companies, one thing stood out the most: everyone here mentioned wanting to see each other succeed.\n\nDon’t let each other fail\n\nKeep an eye out for others who may be struggling or stuck. If you see someone who needs help, reach out and assist. This might involve offering to pair program or setting up a sync brainstorming session. The goal is to connect them with someone else who can provide expertise or assistance. We are a team, so we succeed and shine together by supporting each other!\n\nPeople are not their work\n\nAlways make suggestions about examples of work, not the person. Say “You didn’t respond to my feedback about the design” instead of “You never listen”. And, when receiving feedback, keep in mind that feedback is the best way to improve, and that others giving you feedback want to see you succeed.\n\nDo it yourself\n\nOur collaboration value is about helping each other when we have questions, need critique, or need help. No need to brainstorm, wait for consensus, or do with two what you can do yourself. The Bolt Handbook refers to this as the Founder Mentality, where all team members should approach the problem as if they own the company.\n\nBlameless problem solving\n\nInvestigate mistakes in a way that focuses on the situational aspects of a failure’s mechanism and the decision-making process that led to the failure, rather than cast blame on a person or team. We hold blameless root cause analyses and retrospectives for stakeholders to speak up without fear of punishment or retribution.\n\nShort toes\n\nPeople joining the company frequently say, “I don’t want to step on anyone’s toes.” At GitLab, we should be more accepting of people taking initiative in trying to improve things. As companies grow, their speed of decision-making goes down since there are more people involved. We should counteract that by having short toes and feeling comfortable letting others contribute to our domain. For example, pointed, respectful feedback to a proposal by GitLab’s CEO led to his own merge request being closed. However, it is not required to respond to comments.\n\nIt’s impossible to know everything\n\nWe know we must rely on others for the expertise they have that we don’t. It’s OK to admit you don’t know something and to ask for help, even if doing so makes you feel vulnerable. It is never too late to ask a question, and by doing so, you can get the information you need to produce results and to strengthen your own skills as well as GitLab as a whole. After your question is answered, please document the answer so that it can be shared.\n\nDon’t display surprise when people say they don’t know something, as it is important that everyone feels comfortable saying “I don’t know” and “I don’t understand.” (As inspired by Recurse.)\n\nCollaboration is not consensus\n\nWhen collaborating, it is always important to stay above radar and work transparently, but collaboration is not consensus and disagreement is part of collaboration. You don’t need to ask people for their input, and they shouldn’t ask you “Why didn’t you ask me?” You don’t have to wait for people to provide input, if you did ask them. You don’t need to have everyone agreeing to the same thing - they can disagree, commit, and disagree. Two-way doors decisions can be reversed as part of disagree, commit, and disagree, while one-way door decisions benefit from more input. Recognize these reversible two-way door decisions for when less input is required to iterate faster. We believe in permissionless innovation—you don’t need to involve people, but everyone can contribute. This is core to how we iterate, since we want smaller teams moving quickly rather than large teams achieving consensus slowly.\n\nCollaboration Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate collaboration when we take action to help others and include other’s (both internal and external) input (both help and feedback) to achieve the best possible outcome.\n\nGitLab Job Grade Demonstrates Collaboration Competency by… Knowledge Assessment 5 Develops collaboration skills by learning from other team members Knowledge Assessment for Individual Contributors 6 Grows collaboration skills by using different types of communication; files issues appropriately, asks in the right Slack channels and uses the right labels. 7 Models collaborative behavior for fellow team members and others within the group. 8 Coaches team members on how to collaborate more effectively and pointing team members to the right channels to collaborate. Knowledge Assessment for People Leaders 9 Fosters collaborative decision making and problem solving across the departments. 10 Drives team collaboration across divisions/departments, silos, and division boundaries. 11 Develops networks and builds partnerships, engages in cross-functional activities; collaborates across boundaries, and finds common ground with a widening range of stakeholders.  Utilizes contacts to build and strengthen internal support base 12 Leads collaboration and teamwork in daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Encourages greater cross-functional collaboration among e-team leaders. 14 Champions collaboration and teamwork into daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Champions cross-functional collaboration among e-team leaders and GitLab.\n\n📈 Results for Customers\n\nWe exist to help our customers achieve more. Everything we do should be in service of making our customers successful with GitLab. Results for Customers is at the top of our values hierarchy, as our customers achieving results drives overall business performance that enables everything else.\n\nThe Results for Customers value is displayed through the following operating principles:\n\nSet Ambitious & Measurable goals\n\nWhile we iterate with small changes, we strive for large, ambitious results. We have an ambitious mission and vision, and we aim to be the best in the world across all our functions. Setting ambitious, measurable goals enables us to best deliver customer results. We agree in writing on measurable goals. Within the company we use OKRs to stay accountable. We have and report against KPIs with guiding targets.\n\nUnderstand our customers\n\nAll GitLab team members should understand our customers’ needs, issues, and value propositions. We understand how they use GitLab and what they need from a platform in order to meet their goals. Internally facing teams consider the impact of their work as it pertains indirectly to GitLab’s customers.\n\nWe better understand customers and their needs through:\n\nReviewing public facing GitLab issues from our customers and users\n\nDogfooding our product to understand the user experience\n\nReading customer stories from Marketing and Sales\n\nAttending Customer fireside chats\n\nLearning feedback from our customers and users on product features and roadmap\n\nCo-create\n\nWe create together with our customers. There is an open dialogue between GitLab and our customers so that we can better identify what they need. As a result of building a solution for them, we can also bring that solution to the world.\n\nKeep end users in sight\n\nOur focus is to increase customer results. At GitLab, one way to drive customer results is through platform enhancements that drive the most value for direct users. This requires being aware of the Concur effect.\n\nArvind Narayanan, a Princeton Professor, described his frustration with Blackboard in a viral Tweet:\n\nIt has every feature ever dreamed up. But like anything designed by a committee, the interface is incoherent and any task requires at least fifteen clicks (and that’s if you even remember the correct sequence the first time).\n\nSoftware companies can be breathtakingly clueless when there’s a layer of indirection between them and their users. Everyone who’s suffered through Blackboard will have the same reaction to this: try having less functionality!\n\nRyan Falor followed up on Narayanan’s tweet with his definition of the Concur Effect:\n\ndecision makers are not direct users\n\nfeatures are overwhelming and disjointed\n\nuser experience gets worse over time\n\nSee the Hacker News discussion for a specific UX example.\n\nAt GitLab, we want to drive customer results through focusing on platform enhancements that drive the most value for direct users.\n\nCustomer results are more important than:\n\nWhat we plan to make. If we focus only on our own plans, we would have only GitLab.com and no self-managed delivery of GitLab. This does not mean that we will agree to every feature request, but we won’t let existing plans be an obstacle to working on what will drive the most customer value.\n\nLarge customer requests. Catering to requests from large customers leads to the innovator’s dilemma, we need to also focus on results for small and future customers.\n\nOur existing scope. For example, when customers asked for better integrations and complained about integration costs and effort, we responded by expanding our scope to create a single application for the DevOps lifecycle.\n\nOur assumptions. Every company works differently, so we can’t assume that what works well for us will support our customers’ needs. When we have an idea, we must directly validate our assumptions with multiple customers to ensure we create scalable, highly relevant solutions.\n\nWhat we control. We strive to provide the best possible experience for each of our customers, and take responsibility for all of the aspects that we can reasonably control.\n\nMeasure impact, not activity\n\nWe care about what you achieve: the code you shipped, the needle you moved, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldn’t feel like they did something wrong, unless it negatively impacted a goal or result they were responsible for. You don’t have to defend how you spend your day if you are performing and delivering against expectations. We trust team members to do the right thing instead of having rigid rules. We trust team members to show up and do their best work. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too many hours, talk to your manager to discuss solutions.\n\nDogfooding\n\nWe use our own product in the way our users do to surface improvements that will lead to better customer results. GitLab is a DevSecOps Platform that can be used by people throughout the business. This is how we use it within GitLab. For example, we use our OKR functionality company-wide to inform product enhancements and for team members to have a great understanding of the customer experience. We also dogfood in the following ways:\n\nOur development organization uses GitLab.com to manage the DevOps lifecycle of GitLab itself.\n\nAll team members use GitLab to collaborate on this handbook.\n\nWe capture content and processes in Git repos and manage them with GitLab.\n\nWhen something breaks, doesn’t work well, or needs improvement, we are more likely to notice it internally and address it before it impacts our larger community.\n\nGive agency\n\nWe give people agency to focus on what they think is most beneficial. If a meeting doesn’t seem interesting and someone’s active participation is not critical to the outcome of the meeting, they can always opt to not attend, or during a video call they can work on other things if they want. Staying in the call may still make sense even if you are working on other tasks, so other peers can ping you and get fast answers when needed. This is particularly useful in multi-purpose meetings where you may be involved for just a few minutes.\n\nChallenger mindset\n\nChallenging the status quo can lead to remarkable results - we must never stop. A challenger mindset requires that we continually ask ourselves bold, difficult questions about our business the problems we solve while resisting complacency. To succeed we must innovate and delight our customers with the value of the products we build. A challenger mindset requires a relentless pursuit of excellence - we must be tenacious. Each win for our customers builds reputational capital we can use to earn the trust of prospects in a competitive market. While competition is a feature of capitalism internally as GitLab team members we must focus our efforts inwardly on achieving our very best results for customers to win market share.\n\nGrowth mindset\n\nYou don’t always get results and this will lead to criticism from yourself and/or others. We believe our talents can be developed through hard work, targeted training, learning from others, on-the-job experience, and receiving input from others. It is in our DNA as a company and individuals to look for opportunity, stay humble, and never settle. We try to hire people based on their trajectory, not their pedigree. We also strive to foster a culture of curiosity and continuous learning where team members are provided and proactively seek out opportunities to grow themselves and their careers. We believe that with the right expectations and direction, people can grow to take on new challenges and surpass expectations.\n\nCross-functional optimization\n\nOur definition of cross-functional optimization is that you do what is best for the organization as a whole. Don’t optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. For example, you may have set a non-urgent functional milestone that is supposed to land at the end of the quarter. If delivering within the last week requires engagement from the GTM teams, the right decision may be to push your own team’s target by a week to reduce the ask for the GTM team as the GTM focuses on meeting its revenue objectives.\n\nIn the context of collaboration, if anyone is blocked by you on a question, your approval, or a merge request review, you should prioritize unblocking them, either directly or through helping them find someone else who can.\n\nEmbrace Tenacity\n\nWe refer to this as “persistence of purpose”. As talked about in The Influence Blog, tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. We value the ability to maintain focus and motivation when work is tough and asking for help when needed.\n\nHave Ownership & Accountability\n\nWe expect team members to complete tasks that they are assigned. You are responsible for executing with attention to detail, connecting the dots across the organization and anticipating and solving problems. As an owner, you are responsible for overcoming challenges, not suppliers or other team members. Take initiative and proactively inform stakeholders when there is something you might not be able to solve.\n\nSense of urgency\n\nTime gained or lost has compounding effects. Try to get the results as fast as possible, but without compromising our other values and ways we communicate, so the compounding of results can begin and we can focus on the next improvement.\n\nOperate with a bias for action\n\nIt’s important that we keep our focus on action, and don’t fall into the trap of analysis paralysis or sticking to a slow, quiet path without risk. Decisions should be thoughtful, but delivering fast results requires the fearless acceptance of occasionally making mistakes; our bias for action also allows us to course correct quickly. Try to get results as fast as possible, but without compromising our other values and ways of working\n\nDisagree, commit, and advocate\n\nWhen a decision is in place, we expect people to commit to executing it. Any past decisions and guidelines are open to questioning as long as you act in accordance with them until they are changed. This is a common principle. Every decision can be changed; our best decision was one that changed an earlier one. In a manager-report relationship, usually the report is the Directly Responsible Individuals (DRI). The manager may disagree with the final decision, but they still commit to the decision of the DRI.\n\nIn a group setting, participants may disagree with a proposal but not articulate their views for one reason or another. Sometimes, many or all individuals may disagree yet choose not to speak up, because no one believes they would get agreement from the group. As a result, everyone loses out on their feedback. Dissent is expression of that disagreement. However, it can be difficult and even socially expensive. Expression of feedback is a way for everyone to grow and learn, and is based on facts rather than opinions. Share your perspective, rather than agreeing simply to avoid conflict or to go along with everyone else.\n\nWhen you want to reopen the conversation on something, show that your argument is informed by previous conversations and assume the decision was made with the best intent. You have to achieve results on every decision while it stands, even when you are trying to have it changed. You should communicate with the DRI who can change the decision instead of someone who can’t.\n\nEscalate to unblock\n\nIf there is a disagreement and you can’t move forward because of it, agree to escalate and escalate to one or both of your managers. Early escalation, delivered with context of the challenge, enables managers to function as an unblocker.\n\nResults Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate results when we do what we promised to each other, customers, users, and investors.\n\nGitLab Job Grade Demonstrates Results Competency by… Knowledge Assessment 5 Develops the skills needed to commit and execute on agreed actions. Knowledge Assessment for Individual Contributors 6 Applies commitment to results and demonstrates ability to execute on agreed actions. 7 Models a sense of urgency and commitment to deliver results. 8 Coaches team members to collaborate and work iteratively towards results with the focus on the outcome and not hours worked. Knowledge Assessment for People Leaders 9 Fosters a culture of ownership of personal performance. 10 Drives efficient execution of results ensuring collaboration between team members. 11 Develops quarterly OKR\'s ensuring the performance and results of one or more teams. 12 Leads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency. EVP/CXO Leads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency.\n\n⏱️ Efficiency\n\nAt GitLab, efficiency means producing results without wasting materials, time, or energy. We optimize solutions globally for the broader GitLab community over one person or a small group. Focus on efficiency should be global in nature, not just local to a given function. Global efficiency could include efficiency with customers, candidates, and contributors as well. It is easy to prioritize consistency over efficiency because consistency is often more efficient initially and makes managing processes more efficient. We should slow down when optimizing for consistency. Taking a company-wide lens when evaluating changes will help ensure that new processes will improve efficiency for GitLab as a whole and be the best decision for the company as a whole.\n\nWhen we work internally with other team members, we leverage GitLab’s unique working practices and operating principles to achieve top efficiency. We do not expect people outside of GitLab to conform to GitLab’s ways of working, and we will make accommodations to work effectively with them. For example, we may collaborate heavily in-person and not default to async communications.\n\nOnly Healthy Constraints\n\nMost companies regress to the mean and slow down over time. While some changes are required as a company grows and matures, not all change is inevitable or should be allowed to passively happen. As GitLab grows, we are conscious of how we operate and how it enables our ability to continue to operate with the agility of a startup. We try to limit ourselves to healthy constraints.\n\nWrite things down\n\nWe document everything: in the handbook, in meeting notes, in issues. We do that because “the faintest pencil is better than the sharpest memory.” It is far more efficient to read a document at your convenience than to have to ask and explain. Having something in version control also lets everyone contribute suggestions to improve it.\n\nBoring solutions\n\nUse the simplest and most boring solution for a problem, and remember that “boring” should not be conflated with “bad” or “technical debt.” The speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps. Don’t pick an interesting technology just to make your work more fun; using established, popular tech will ensure a more stable and more familiar experience for you and other contributors.\n\nMake a conscious effort to recognize the constraints of others within the team. For example, sales is hard because you are dependent on another organization, and development is hard because you have to preserve the ability to quickly improve the product in the future.\n\nSelf-service and self-learning\n\nTeam members should first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame. Write down any new information discovered and pay it forward so that those coming after will have better efficiency built on top of practicing collaboration, inclusion, and documenting the results.\n\nTeam members have more room to grow themselves when they are able to self-service and self-learn.\n\nEfficiency for the right group\n\nOptimize solutions globally for the broader GitLab community. As an example, it may be best to discard a renewal process that requires thousands of customers to each spend two hours in favor of one that only takes sixty seconds, even when it may make a monthly report less efficient internally! In a decision, ask yourself “For whom does this need to be most efficient?” Quite often, the answer may be your users, contributors, customers, or team members that are dependent upon your decision.\n\nBe respectful of others’ time\n\nConsider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions.\n\nSpend company money like it’s your own\n\nEvery dollar we spend will have to be earned back. Be as frugal with company money as you are with your own. In saying this, we ask team members to weigh the cost of purchases against the value that they will bring to the company.\n\nConsider the degree to which a purchase increases your ability to better accomplish your work and achieve business results relative to cost. Lowering overhead reduces the cost to operate the business and lets us shift spend toward other priority areas.\n\nWe have guidelines around this operating principle to help team members better understand our expensing process and expectations.\n\nFrugality\n\nAmazon states it best with: “Accomplish more with less. Constraints breed resourcefulness, self-sufficiency, and invention. There are no extra points for growing headcount, budget size, or fixed expense.”\n\nShort verbal answers\n\nGive short answers to verbal questions so the other party has the opportunity to ask more or move on.\n\nKeep broadcasts short\n\nKeep one-to-many written communication short, as mentioned in this HBR study: “A majority say that what they read is frequently ineffective because it’s too long, poorly organized, unclear, filled with jargon, and imprecise.”\n\nManagers of one\n\nWe want each team member to be a manager of one who doesn’t need daily check-ins to achieve their goals. Team members are given the freedom to own projects and initiatives and are trusted to see them through to a successful end.\n\nWhen team members are managers of one they can have an increased work/life balance, because they are more empowered to make decisions around how they allocate their time throughout each day.\n\nFreedom and responsibility over rigidity\n\nWhen possible, we give people the responsibility to make a decision and hold them accountable for that, instead of imposing rules and approval processes. You should have clear objectives and the freedom to work on them as you see fit. Freedom and responsibility are more efficient than rigidly following a process, or creating interdependencies, because they enable faster decision velocity and higher rates of iteration.\n\nWhen team members have freedom and responsibility over rigidity, they have more room to help others.\n\nAccept mistakes\n\nNot every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient; a mistake only affects one. Once you have accepted the mistake, learn from it. When team members are free to accept mistakes, they can take more calculated risks.\n\nMove fast by shipping the minimal valuable change\n\nWe value constant improvement by iterating quickly, month after month. If a task is not the smallest viable and valuable thing, cut the scope.\n\nEmbrace change\n\nAdoption of features, user requirements, and the competitive landscape change frequently and rapidly. The most successful companies adapt their roadmap and their organization quickly to keep pace. One of the things that makes this challenging is the impact on our team. People may need to change teams, subject matter, or even who manages them. This can rightly feel disruptive. If we coach ourselves to embrace the positive aspects of change, such as increased opportunity and new things to learn, we can move faster as a company and increase our odds of success. It is important to hold management accountable for being deliberate.\n\nEfficiency Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate efficiency when we work on the right things, not doing more than needed, and not duplicating work.\n\nGitLab Job Grade Demonstrates Efficiency Competency by… Knowledge Assessment 5 Develops an understanding of being a manager of 1 by taking responsibility for your own tasks and delivering on commitments. Brings up ideas for process improvements to 1:1s. Learns to write everything down as it is far more efficient to read a document at your convenience than to have to ask and explain. Knowledge Assessment for Individual Contributors 6 Develops a deeper understanding of efficiency and actively identifies process inefficiencies within the team. Seeks out ways to be more effective in their role, while also starting to mentor others in ways to work efficiently. 7 Models a culture of efficiency within the team where people make good, timely decisions using available data and assessing multiple alternatives. Models using boring solutions for increasing the speed of innovation for our organization and product. 8 Takes ownership of own team process inefficiencies, implements cross team efforts in ensuring things are running smoothly. Implements a way of working in the team where team members first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame. Knowledge Assessment for People Leaders 9 Takes ownership of group level process inefficiencies and guides cross sub-departments in ensuring things are running smoothly. Fosters a culture in the sub-departments where you respect others\' time and promote self-service and self-learning. 10 Drives the framework of frugality on a department level and owns departments efforts in ensuring things are running smoothly. Drives efficient resolution of highly complex or unusual business problems that impact the department / team. Holds their managers and peers accountable for upholding this value. 11 Develops the framework and strategy of frugality cross division resulting in efforts ensuring things are running smoothly. Develops leaders to action on division/department/team inefficiencies. Hold their management teams accountable for upholding this value. 12 Leads with efficiency across the company. Ensures efficient resource allocation decisions across the company. Leads across company strategy and policy improvements that move the business towards more efficiency. They hold their senior management and the e-group accountable for upholding this value. EVP/CXO Champions GitLab\'s strategy for efficiency internally and externally. Constantly looking for efficiency improvements cross company and holding other e-group members accountable for upholding efficiency too. They are comfortable leading through frugality and accepting of mistakes.\n\n🌐 Diversity, Inclusion & Belonging\n\nDiversity, inclusion and belonging are fundamental to the success of GitLab. We aim to make a significant impact in our efforts to foster an environment where everyone can thrive. We are designing a multidimensional approach to ensure that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. We actively chose to build and institutionalize a culture that is inclusive and supports all team members equally in the process of achieving their professional goals. We hire globally and encourage hiring in a diverse set of countries. We work to make everyone feel welcome and to increase the participation of underrepresented minorities and nationalities in our community and company. For example, we celebrate our sponsorship of diversity, inclusion & belonging events.\n\nBias towards asynchronous communication\n\nTake initiative to operate asynchronously whenever possible. This shows care and consideration for those who may not be in the same time zone, are traveling outside of their usual time zone, or are structuring their day around pressing commitments at home or in their community.\n\nThis is demonstrated by communicating recordings of meetings, using GitLab Issues and Merge Requests rather than texts, calls, or Slack messages, and being sensitive to local holidays and vacation statuses. Encourage others to default to documentation rather than pressuring others to be online outside of their working hours.\n\nEmbracing uncomfortable ideas and conversations\n\nPart of embracing diversity is a willingness to embrace often uncomfortable conversations and situations. This concept is also at the core of inclusion and helping to eliminate the problems that are faced by certain GitLab team members who may not be in the majority.\n\nWe believe that being willing to embrace discomfort is the path forward to a safe, balanced and inclusive work place for all. Challenge yourself, challenge your own pre-set notions and ideas about different cultures or things you don’t understand. When we are willing to embrace being uncomfortable, we can focus on actually fixing the issues at hand rather than simply “appearing to care”.\n\nUnderstanding the impact of microaggressions\n\nMicroaggressions are much more than merely rude or insensitive comments. They can wear people down by slowly chipping away their sense of belonging/safety/inclusion over time. What is a microaggression?\n\n“The everyday slights, indignities, put downs and insults that people of color, women, LGBT populations or those who are marginalized experiences in their day-to-day interactions with people.” - Derald W. Sue\n\nAt GitLab we believe that everyone is entitled to a safe working space where they can express who they are and participate in conversations without worry of being spoken to in a harmful way, given that we want to encourage everyone to be mindful of what is a microaggression and be mindful of their potential impact.\n\nSeek diverse perspectives\n\nWe believe that team members seeking feedback from a diverse group of team members, inside and outside of their group or function, leads to better decisions and a greater sense of team member belonging. For more guidance on how we define Diversity, please refer to GitLab’s definition of Diversity, Inclusion & Belonging. Feedback from a more heterogenous group often leads to better business outcomes as we incorporate diverse perspectives and uncover unconscious bias.\n\nAn example of this operating principle in action showcases the value of actively seeking diverse perspectives. The term “Brag Document” was used to describe when individuals documented their accomplishments. Documenting accomplishments is critical to team member development. However, team members had the psychological safety to raise the question of whether or not the title of the document made some feel uncomfortable. In an effort to seek a diverse perspective, a survey was conducted in one of the Team Member and Advocacy Resource Group (TMRG) channels. The poll results showed that 100% of those polled preferred a different title and the title was changed.\n\nMake family feel welcome\n\nOne of the unique elements to an all-remote culture is the ability to visit a person’s home while collaborating. If the tenor of the meeting allows, feel welcome to invite your family members or pets to drop by and greet your colleagues. Be mindful of language and use of profanity to encourage a family-friendly environment.\n\nShift working hours for a cause\n\nCaregiving, outreach programs, and community service do not conveniently wait for regular business hours to conclude. If there’s a cause or community effort taking place, feel welcome to work with your manager and shift your working hours to be available during a period where you’ll have the greatest impact for good. For colleagues supporting others during these causes, document everything and strive to post recordings so it’s easy for them to catch up.\n\nBe a mentor\n\nPeople feel more included when they’re supported. To encourage this, and to support diversified learning across departments, consider GitLab’s Internship for Learning program.\n\nCulture fit is a bad excuse\n\nWe don’t hire based on culture or select candidates because we’d like to have a drink with them. We hire and reward team members based on our shared values as detailed on this page. We want a values fit, not a culture fit. We want cultural diversity instead of cultural conformity. Said differently: “culture add” > “culture fit” or “hire for culture contribution” since our mission is that everyone can contribute.\n\nReligion and politics at work\n\nWe generally avoid discussing politics or religion in public forums because it is easy to alienate people that have a minority opinion. This doesn’t mean we never discuss these topics. Because we value diversity, inclusion and belonging, and want all team members to feel welcome and contribute equally, we encourage free discussion of operational decisions that can move us toward being a more inclusive company. GitLab also publicly supports pro diversity, inclusion & belonging activities and events.\n\nThere is sometimes a grey area where advocating for diversity and political activities may intersect. Team members should use discretion in grey area communications, because a culture of belonging requires us to be respectful of the broad spectrum of views within our work environment. What does this mean in practice? Please feel empowered to share information that highlights diversity, inclusion and belonging issues and how GitLab and GitLab team members can get involved. In line with our Code of Business Conduct and Ethics, avoid posting articles that reference specific political figures or parties.\n\nWhile it is acceptable for individuals to bring up politics and religion in social contexts such as coffee chats and real-life meetups with other coworkers (with the goal to understand and not judge), always be aware of potential sensitivities, exercise your best judgment, and make sure you stay within the boundaries of our Code of Business Conduct and Ethics.\n\nWe’re a global company where perspectives and local norms may differ from culture to culture. Diversity, inclusion and belonging is about broad inclusion at a worldwide level. If there is a question or concern, please reach out to diversityinclusion@gitlab.com or #diversity_inclusion_and_belonging.\n\nQuirkiness\n\nUnexpected and unconventional things make life more interesting. Celebrate and encourage quirky gifts, habits, behavior, and points of view. Open source is a great way to interact with interesting people. We try to hire people who think work is a great way to express themselves.\n\nBuilding a safe community\n\nDo not make jokes or unfriendly remarks about characteristics of the people who make up GitLab and how they identify. Everyone has the right to feel safe when working for GitLab and/or as a part of the GitLab community. We do not tolerate abuse, harassment, exclusion, discrimination, or retaliation by/of any community members, including our team members. You can always refuse to deal with people who treat you badly and get out of situations that make you feel uncomfortable.\n\nUnconscious bias\n\nWe recognize that unconscious bias is something that affects everyone and that the effect it has on us as humans and our company is large. We are responsible for understanding our own implicit biases and helping others understand theirs. We are continuously working on getting better at this topic.\n\nInclusive benefits\n\nWe list our Parental Leave publicly so people don’t have to ask during interviews.\n\nInclusive language & pronouns\n\nUse inclusive language. For example, prefer “Hi everybody” or “Hi people” to “Hi guys”, and “they” instead of “he/she”. While there are several good guides from folks like 18f, University of Calgary, and Buffer on using inclusive language, we don’t keep an exhaustive list. When new possibly non-inclusive words arise, we prefer to be proactive and look for an alternative. If your goal is to be inclusive, it is more effective to make a small adjustment in the vocabulary when some people have a problem with it, rather than making a decision to not change it because some people don’t think it is a problem. And if you make a mistake (e.g. accidentally using the wrong pronoun or an outdated phrase), acknowledge it, apologize gracefully and move on; there is no need to dwell on it, and you can work to avoid making that mistake in the future. Please also visit our Gender and Sexual-orientation Identity Definitions and FAQ page if you have questions around pronouns and other topics related to gender / sexual orientation.\n\nLearn how to pronounce other people’s names\n\nWe attach part of our identity to our names, and if it is mispronounced it can feel less inclusive. If it happens repeatedly, you may be unintentionally sending a message to that person that you are not interested in learning how to pronounce their name correctly. This applies to everyone you are in contact with: team members, customers, candidates for jobs, and anyone else.\n\nPeople whose name is repeatedly mispronounced might feel unimportant or self-conscious, and might not speak up about it. Other negative behaviors include giving a person a nickname without their permission, or actively avoiding using their name in sync calls.\n\nIt might be challenging to pronounce names from a different language or culture than your own, but with some effort, name pronunciation can be learned by anyone. Some ways to achieve this are:\n\nAsk the person for help in a private space: “I’m sorry, I don’t think I am pronouncing your name correctly. Can you help me with the correct pronunciation?”\n\nUse the written and recorded pronunciation tools in Slack.\n\nUse online tools such as videos recorded on YouTube or NameShouts.\n\nPractice the pronunciation with a friend or team member who knows the correct pronunciation.\n\nAlways avoid making jokes or comments about how it is difficult to pronounce their name.\n\nUse of nicknames\n\nSome people might choose to use a nickname, for example: “Bob” instead of “Robert”. As long as this is their choice this is perfectly acceptable. We should avoid assigning a nickname to a person without their permission.\n\nSlack pronunciation features\n\nSlack has two features to help with this issue: the phonetic name pronunciation field and the ability to record your own name pronunciation audio clip. We encourage all team members to complete both of these. Update them by editing your profile.\n\nInclusive interviewing\n\nThis is documented on our page about interviewing.\n\nInclusive meetings\n\nBe consciously inclusive in meetings by giving everyone present an opportunity to talk and present their points of view. This can be especially important in a remote setting.\n\nWith internal meetings, consider using an agenda document for questions. For example, with GitLab Group Conversations, every meeting has a numbered list that GitLab team members can add questions to. During the meeting, questions are answered in turn and discussions noted in the same document. Sometimes, these documents can have so much traffic (during the meeting) such that only a limited number of people can edit the document. In these situations, those who have questions should post on zoom chat and those who can edit the document should help copy the question over to the document. In addition, those who can edit the document should also post in zoom chat to see if anyone has any questions that they could help add to the document so that meeting attendees are more empowered to contribute to the conversation.\n\nCustomers are not used to working in this way. To promote inclusion with customers: ask participants for their goals; make sure during demos that you pause for question; leave time for discussion.\n\nInclusive and fair policy to regions with fewer employees\n\nBeing globally distributed has the benefit that someone can cover for you when you are off work. However, population density is not balanced across timezones. Policies should remain fair to those in less dense regions.\n\nFor example, the Asia Pacific region covers more timezones but has fewer team members. If we use an algorithm to assign tasks to those in later timezones, all American tasks would fall on the fewer Asia Pacific employees. This can damage belonging and inclusivity and should be avoided.\n\nWhen planning an event, the organizer should cater for location density differences to maximize participation in all regions.\n\nSee Something, Say Something\n\nAs a globally-dispersed company, we have team members from many different backgrounds and cultures. That means it is important for each of us to use great judgment in being respectful and inclusive of our teammates. At the same time, we may sometimes not fully realize we have said or done something to offend someone. It is important that our teammates hold each other accountable and let them know if they have unintentionally or intentionally done something so they can learn and gain additional understanding of perspectives different from our own. It is also important that our teammates don’t feel excluded or minimized by the words we use or the things we do. Thus, we all need to speak up when we see something that isn’t respectful or inclusive.\n\nEmbracing Neurodiversity\n\nNeurodiversity refers to variations in the human brain regarding learning, attention, sociability, mood, and other mental functions. There are various neurodevelopmental conditions, like autism, ADHD, dyslexia, dyscalculia, dyspraxia, cognitive impairment, schizophrenia, bipolarity, and other styles of neurodivergent functioning. While neurodivergent individuals often bring unique skills and abilities which can be harnessed for a competitive advantage in many fields (for example, cybersecurity), neurodivergent individuals are often discriminated against. Due to non-inclusive hiring practices, they sometimes have trouble making it through traditional hiring processes. Neurodiversity inclusion best practices benefit everyone, and at GitLab, everyone can contribute. The handbook, values, strategy, and interviewing processes must support the ability for everyone to thrive.\n\nAt GitLab we embrace Neurodiversity through adopting a variety of different work styles and communication styles, and we lean into transparency, asynchronous as a default working style, and pre-filled meeting agendas. These best practices become even more important when embracing neurodiversity. Providing multiple ways to consume information (written / video / audio) allows everyone to contribute independent of their preferred comprehension style. It is important to ask team members specifically what their preferred communication method is in order to provide them information in a format that is easily consumable for them.\n\nRemember, brains work differently and always assume positive intent, even if someone behaves in an unexpected way. While it may be an unexpected behavior to you, it may not be unexpected to the individual exhibiting the behavior. That is the beauty and value of diversity, embracing differences and becoming stronger and better as a result.\n\nWe also recommend that all team members review the Reasonable Accommodation process. A Reasonable Accommodation for a team member could include noise-cancelling headphones, scheduling smaller group session zoom calls, providing very explicit and precise instructions and due-dates when given tasks, or providing a variety of supportive software tools.\n\nThe most important thing that managers can do is facilitate an environment in which all team members feel psychologically safe enough to make requests for what they need in order to do their job.\n\nFamily and friends first, work second\n\nLong-lasting relationships are the rocks of life, and come before work. As someone said in our #thanks channel after helping a family member for five days after a hurricane: “THANK YOU to GitLab for providing a culture where “family first” is truly meant”. Use the hashtag: #FamilyAndFriends1st\n\nEquity not just equality\n\nEquity vs. Equality: What’s the Difference?\n\nWhile the terms equity and equality may sound similar, the implementation of one versus the other can lead to dramatically different outcomes for marginalized people.\n\nEquality means each individual or group of people is given the same resources or opportunities. Equity recognizes that each person has different circumstances and allocates the exact resources and opportunities needed to reach an equal outcome.\n\nDiversity, Inclusion & Belonging Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate diversity, inclusion and belongings when we foster an environment where everyone can thrive and ensuring that GitLab is a place where people from every background and circumstance feel like they belong and can contribute.\n\nIf you would like to improve your skills or expand your knowledge on topics relating to Diversity, Inclusion, & Belonging at GitLab, check out our resources:\n\nBeing an Ally\n\nBeing Inclusive\n\nRecognizing Bias\n\nGitLab Job Grade Demonstrates Diversity & Inclusion Competency by… Demonstrates DIB Behaviors by… (Should not be considered an exhaustive list) Knowledge Assessment 4 Learns to understand the impact of biases. Gathering more information about the skills needed to be accountable for their actions, apologizes and learn. 5 Develops an understanding of the impact of biases; seeks to learn more about their own biases. Is accountable for their actions, apologizes and learns from their mistakes. DIB training and/or other company wide training to further education on DIB Attend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions Participate in a DIB Initiative: join TMRGs you identify with, support other groups as an Ally, attend events, "like" slack posts and spread the word Participate in a TMRG initiative Member of a working group related to a DIB initiative, e.g. participate in a Mentorship program Knowledge Assessment for Individual Contributors 6 Has a growing understanding of the impact of biases; fosters a sense of inclusion and belonging on their team. Holds themselves and peers accountable for upholding this value by kindly pointing out when mistakes might be made. Encourages an inclusive team environment where differences are encouraged and everyone can contribute. 7 Actively aware of how bias or exclusion might occur on a team and helps to facilitate a team environment where team members belong and feel safe. Models empathy with their interactions with customers and cross functional team members. 8 Implements best practices to limit bias on their team. They ensure blameless accountability is practiced throughout their team. Creates an environment where team members feel safe to share ideas and welcomes individual differences. DIB training and/or other company wide training to further education on DIB Attend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions Participate in a DIB Initiative: join TMRGs you identify with, support other groups as an Ally, attend events, like posts and spread the word Participate in a TMRG initiative Member of a working group related to a DIB initiative, e.g. participate in a Mentorship program Hiring Manager ensure a diverse candidate slate and interview panel Active participant and advocate for department DIB goals Knowledge Assessment for People Leaders 9 Proactively finds ways of facilitating an inclusive team environment and assesses processes to protect against unconscious bias. They hold their team members accountable including cross functional stakeholders. Promotes individual differences across their team and other departments. 10 Drives diversity, inclusion and sense of belonging across their department. They hold their managers and peers accountable for upholding this value. They are actively involved in the execution of D&I strategies and encourage others to participate. Black is Tech, Grace Hopper 11 Embeds the value of Diversity & Inclusion across their division and finds opportunities to limit the impact of bias on decision making processes. Uses feedback and data to formulate a strategy on how to make improvements. They hold their management teams accountable for upholding the value. 12 Leads with the value of Diversity & Inclusion across the company and finds opportunities to limit the impact of bias on decision making processes. They sponsor internal initiatives to increase trust, psychological safety and inclusion. They hold their senior management and the e group accountable for upholding this value. DIB Team & Leadership DIB Council to establish an action plan for your departments & division Serve as an TMRG executive sponsor Embed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate EVP/CXO Champions the value of Diversity, Inclusion and Belonging into the company\'s strategy. They champion and sponsor internal and external D&I initiatives. They speak to the importance of this value in company-wide meetings. They hold their leaders and other e group members accountable for upholding this value. They continuously seek ways to increase trust, psychological safety and inclusion across the broader company. Yearlies initiative focused on continuing to build a diverse team of top talent that we retain and grow Advocate and Integrate DIB into your organizational KPIs/OKRs, e.g.OKR: continue to build and grow a diverse workforce/organization Partner with the DIB Team & Leadership DIB Council to establish an action plan for your departments & division Serve as a TMRG executive sponsor Embed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate\n\n👣 Iteration\n\nMerriam-Webster defines iteration as the “the action or a process of iterating or repeating: such as a procedure in which repetition of a sequence of operations yields results successively closer to a desired result.” At GitLab, we iterate to do the smallest valuable thing to get fast feedback and efficiently reach a desired end goal. Feedback can be from internal users (dogfooding), a limited number of external users (through our early access program), or through feedback from our broader user community. We validate each iteration and adjust, but not at the expense of the user experience that we deliver to our customers.\n\nWhen we iterate at GitLab, we break up the work that we know we need to do into smaller chunks to iterate toward a targeted end state:\n\nMerge in codebase\n\nDogfood\n\nHave some external users (early access program)\n\nEnsure global optimization (use standardized systems)\n\nPlan beyond the iteration\n\nIteration does not require us to ship features that are open to all users from day one. Feedback can come from internal users or a limited number of external users (early access program). Moving through the release process is not iteration though. Iteration is also not a replacement for having a plan. We expect you to know where you are going, but you can iterate to get there.\n\nAn iteration might be additive (adding something) or subtractive (removing something). If you make suggestions that can be excluded from the first iteration, turn them into a separate issue that you link.\n\nWhile you should have a clear vision of the desired outcome and how it addresses a customer pain point or improves the user experience, be efficient in your planning. Unless you identify important cross-functional interdependencies, focus detailed planning on the first step. It might feel you are moving too slowly; however, planning is critical in order to ensure you can move fast when implementing. You’re doing it right if you feel that you have shipped the minimal feature set in the first iteration. This value is the one people most underestimate when they join GitLab. The impact, both on your work process and on how much you achieve, is greater than anticipated. Frequently, the simplest version that provides value turns out to be the best one.\n\nMany people who join GitLab say they already practice iteration. But this is the value that is the hardest to understand and adopt. People are trained that if you don’t deliver a perfect or polished thing, there will be a problem. If you do just one piece of something, you have to come back to it. Doing the whole thing seems more efficient, even though it isn’t. If the complete picture is not clear, your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other GitLab team members being really effective with iteration but don’t know how to make the transition, and it’s hard to shake the fear that constant iteration can lead to shipping lower-quality work or a worse product. In reality, it is possible to ship a minimally valuable product while continuing to adhere to the documented quality standards.\n\nThe way to resolve this is to write down only what value you can add with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration can be uncomfortable, even painful. If you’re doing iteration correctly, it should be. Reverting work back to a previous state is positive, not negative. We’re quickly getting feedback and learning from it. Making a small change prevented a bigger revert and made it easier to revert.\n\nHowever, if we take smaller steps and ship smaller, simpler features, we get feedback sooner. Instead of spending time working on the wrong feature or going in the wrong direction, we can ship the smallest product, receive fast feedback, and course correct. People might ask why something was not perfect. In that case, mention that it was an iteration, you spent only “x” amount of time on it, and that the next iteration will contain “y” and be ready on “z”.\n\nIteration enables results and efficiency.\n\nIn the GitLab Unfiltered video embedded above, GitLab CEO and co-founder Sid Sijbrandij shares key operating principles to reinforce iteration in an organization.\n\nStart with a long-term vision\n\nIteration involves driving results in pursuit of a long-term vision. While the intermediate goals may change as we iterate, we are unlikely to be successful if we don’t start with a vision of what we are working toward. Shipping that vision in iterations allows us to learn from customers using it and adjust the vision if needed. Iteration for the sake of iteration can lead to inefficiencies and not deliver desired results.\n\nIteration is no substitute for planning\n\nIteration without a plan can lead to inefficiencies and a subpar customer experience. Before iterating we need to plan. A plan should include:\n\nTime-bound objective: Where we want to be in a year\n\nUX: User experience we are working toward\n\nQuality: What quality is sufficient quality, inclusive of security\n\nSuccess metric: Usage we want at a specific time\n\nData schema: The data schema we need to measure progress towards project goals\n\nGTM plan: How we want to go to market\n\nEnablement: When we’d plan to train and enable the support and field teams\n\nMarketing: When we’d launch marketing (doesn’t have to be at release)\n\nSecure by design: default to the most secure configuration\n\nThe release process is not iteration\n\nMoving through the release process is not iteration.\n\nThe release process can include:\n\nDogfooding\n\nEarly access\n\nIncremental release using a feature flag\n\nDevelopment stage progression (such as experiment to beta)\n\nRelease\n\nAnnouncement\n\nWhile development stages can be used to indicate release progress, is not itself iteration.\n\nIterate toward global maximum\n\nIf we are not aware of interdependencies beyond our team, and we are not collaborating with others across the organization, we risk deliverables that settle into a “local maximum” of quality, richness, and efficiency. This localization is largely defined by team structure and organizational boundaries. While an iteration can take place within a single team, that team is responsible for identifying inter-dependencies and proactively communicating and aligning with other teams working on related projects. This helps ensure that iterations are not “half-baked” and align with work being done across the entire organization.\n\nDon’t wait\n\nDon’t wait on the small things. When you have something of value like a potential blog post or a small fix, implement it straight away. Right now, everything is fresh in your head and you have the motivation. Inspiration is perishable. Don’t wait until you have a better version. Don’t wait until you record a better video. Don’t wait for an event (like Contribute). Inventory that isn’t released is a liability since it has to be managed, becomes outdated, and you miss out on the feedback you would have received had you implemented it straight away. When we don’t wait we signal intent to others that we have a purpose to resolve something. Note: “Don’t wait” should not be used as a justification for not iterating toward the global maximum or at expense of the plan. If there are interdependencies to be considered or the iteration is customer facing, slow down and ensure that we are considering what is best for GitLab and our customers.\n\nSet a due date\n\nWe always try to set a due date. If needed, we cut scope. If we have something planned for a specific date, we make that date. For example we shipped over 133 monthly releases. But every one of them doesn’t contain all the features we planned. If we planned an announcement for a certain date, we might announce less or indicate what is still uncertain. But we set a due date because having something out there builds trust and gives us better feedback.\n\nCleanup over sign-off\n\nAs discussed in Sid’s interview on iteration, waiting for approval can slow things down. We can prevent this with automation (such as tests of database migration performance) or clean-up after the fact (refactor a Pajamas if something was added that isn’t coherent), but we try to ensure that people don’t need to wait for sign-off. As iteration does not require us to ship to all users on day one, we can clean up after an internal or beta release to mitigate the negative impact to all customers.\n\nStart off by impacting the fewest users possible\n\nIteration does not mean being open to all users from day one. If you do a gradual rollout of your change, prefer:\n\nFew users over many users\n\nInternal users (dogfooding) over external users\n\nEnvironments with fast feedback (SaaS) over slow feedback (self-managed)\n\nReduce cycle time\n\nShort iterations reduce our cycle time. Merging frequently also prevents merge conflicts.\n\nWork as part of the community\n\nSmall iterations make it easier to work with the wider community. Their work looks more like our work, and our work is also quicker to receive feedback.\n\nMinimal Valuable Change (MVC)\n\nWe encourage MVCs to be as small as possible. Always look to make the quickest change possible to improve the user’s outcome. If you validate that the change adds more value than what is there now, then do it. This may be additive (adding something) or subtractive (removing something). No need to wait for something more robust. More information is in the product handbook, but this applies to everything we do in all functions. Specifically for product MVCs, there is additional responsibility to validate with customers that we’re adding useful functionality without obvious bugs or usability issues.\n\nMake a proposal\n\nIf you need to decide something as a team, make a concrete proposal instead of calling a meeting to get everyone’s input. Having a proposal will be a much more effective use of everyone’s time. Every meeting should be a review of a proposal. We should be brainwriting on our own instead of brainstorming out loud. State the underlying problem so that people have enough context to propose reasonable alternatives. The people that receive the proposal should not feel left out and the person making it should not feel bad if a completely different proposal is implemented. Don’t let your desire to be involved early or to see your solution implemented stand in the way of getting to the best outcome. If you don’t have a proposal, don’t let that stop you from highlighting a problem, but please state that you couldn’t think of a good solution and list any solutions you considered.\n\nBy making a proposal you also provide better visibility into the work and the context surrounding it.\n\nIn this GitLab Unfiltered video, GitLab CEO and co-founder Sid Sijbrandij converses about iteration in engineering, leveraging proposals to break work into smaller components.\n\nEverything is in draft\n\nAt GitLab, we rarely mark any content or proposals as drafts. Everything is always in draft and subject to change. When everything is in draft, contributions from team members as well as the wider community are welcomed. By having everything in draft and assuming others have low context, confusion can be reduced as people have shared access to information.\n\nUnder construction\n\nAs we continue to expand the number of users we have, they will continue to expect stability and reliability. We must optimize for the long term without sacrificing stability along the way. This means that users may be inconvenienced in the short term, but current and future users will enjoy a better product in the end.\n\nEducating users on the longer-term plan helps create a shared understanding of how a small change will incrementally grow into something more. For example, we could share how a dropdown will evolve into a much more nuanced solution in the future. We can take the following steps to articulate our plan:\n\nOpen a feedback issue that provides context about the initial MVC (example)\n\nEnsure the direction page articulates a long-term plan (example)\n\nAnnounce the MVC in a release post, link to the feedback issue, and link to the direction page (example)\n\nLow level of shame when dogfooding\n\nIn many organizations, you take a risk when you put forth any work that’s not perfect, work where you haven’t spent endless cycles planning for contingencies or counterpoints. Because of this, you’re incentivized to invest a lot of time and effort into preparing for ‘What if?’ scenarios before any work is presented, even if the release is not customer facing and there is a low level of risk in imperfection.\n\nThe downside to that is clear when we are dogfooding: If you do eventually put forth the work, but it needed to be course-corrected a long time ago, you’ve squandered time that you could have spent improving it through iteration.\n\nHaving a low level of shame when dogfooding or working internally requires you to combat a natural inclination to conceal work until it’s perfect, and instead celebrate the small changes.\n\nCultural lens\n\nCultural differences can bring unique challenges and expectations to iteration. For some, expressions like “it doesn’t have to be perfect…” can challenge cultural norms. We encourage you to bring your authentic self and seek shared understanding when iterating. Giving feedback and ensuring psychological safety are necessary for every iterative attempt.\n\nFocus on improvement\n\nWe believe great companies sound negative because they focus on what they can improve, not only on what is working well. In every conversation, inside and outside the company, we should ask a question: What do you think we can improve? This doesn’t mean we don’t recognize our successes; for example, see our Say Thanks value.\n\nWe are positive about the future of the company. We are Short Term Critical And Long Term Optimistic (STeCALTO, for short).\n\nBe deliberate about scale\n\nFirst, optimize for speed and results (and be deliberate about how your change affects other processes/functionality); when it is a success, figure out how to scale it. Great examples are in this article by Paul Graham.\n\nResist bundling\n\nResist the urge to bundle a series of smaller iterations so team members don’t see a project as their last (or best) opportunity to contribute. It’s tempting to create encompassing projects or initiatives that roll many smaller projects up. This incarnation of scope creep drives up cost, encourages fewer risks, and incentivizes perfection (via longer cycle times) over progress. When we resist bundling, we reduce the risk that work will be canceled due to scale or scope. By resisting bundling we also reduce the coordination needed because fewer people or teams may be involved.\n\nMake two-way door decisions\n\nMost decisions are easy to reverse. In these cases, the Directly Responsible Individual should go ahead and make them without approval. Only when you can’t reverse them should there be a more thorough discussion. By embracing iteration and making two-way door decisions, we are more efficient and achieve more results.\n\nChanging proposals isn’t iteration\n\nChanging something without shipping it is a revision, not iteration. Only when the change is rolled out to users, whether internal users or a limited customer group, can you learn from feedback. When you’re changing a proposal based on different opinions, you’re frequently wasting time; it would be better to roll out a small change quickly and get real world feedback. Never call a revision an iteration because it is almost the opposite.\n\nEmbracing Iteration\n\nIn order to embrace iteration, we should have the attitude that we are trying to achieve as much as possible in a small amount of time; it’s where we land at the end state of an iteration that counts. The benefit of iteration is to get fast feedback from users. Focus on sharing context at the end of the first iteration rather than a hypothetical future state that requires multiple iterations. By embracing iteration we can increase creativity in incremental components.\n\nMake small merge requests\n\nWhen you are submitting a merge request for a code change, or a process change in the handbook, keep it as small as possible. If you are adding a new page to the handbook, create the new page with a small amount of initial content, get it merged quickly via Handbook Usage guidelines, and then add additional sections iteratively with subsequent merge requests. Similarly, when adding features to GitLab, consider ways to reduce the scope of the feature before creating the merge request to ensure your merge request is as small as possible.\n\nAlways iterate deliberately\n\nRapid iteration can get in the way of results if it’s not thought out; for example, when adjusting our marketing messaging (where consistency is key), product categories (where we’ve set development plans), organizational structure or product scope alignment (where real human stresses and team stability are involved), sales methodologies (where we’ve trained our teams) and this values page (where we use the values to guide all GitLab team members). In those instances, we add additional review to the approval process; not to prohibit, but to be more deliberate in our iteration. The change process is documented in the GitLab Handbook Usage page and takes place via merge request approvals.\n\n12 things that are not iteration\n\nIteration is often counterintuitive and difficult to do. To clarify what an iteration is, it helps to see examples of what is not an iteration. Below are 12 examples of things we’ve seen mistaken as iteration, but don’t meet our definition of iteration.\n\nReducing quality, or lowering goal posts\n\nAvoiding or reducing documentation\n\nCompromising on security\n\nDelivering something that’s not the recommended path or on by default\n\nShipping something of no value\n\nAn excuse to focus on unimportant items\n\nMoving through the release process\n\nRevisions you don’t ship or publish\n\nAn excuse to impose unrealistically tight timelines\n\nAn excuse to avoid planning\n\nImposing long hours\n\nExpecting others to fix your work\n\nIn this GitLab Unfiltered video, GitLab co-founder and CEO Sid Sijbrandij elaborates on each of these 12 things that are not iteration.\n\nIteration Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate iteration when we do the smallest viable and valuable thing, get it out quickly for feedback, and make changes based that feedback.\n\nGitLab Job Grade Demonstrates Iteration Competency by… Knowledge Assessment 5 Develops own knowledge by trying and failing. When asking questions isn\'t content with silence or unhelpful/incomplete responses, seeks out primary sources. Knowledge Assessment for Individual Contributors 6 Actively looks for opportunities to iterate and contribute to boring solutions. Balances short term gains and long term benefit with team\'s help. Ships things that aren\'t 100% knowing that you\'ll be able to improve them in the next revision. Asks questions with abandon. Publicly shares failures if you\'ll help colleagues learn. 7 Independently balances short term gains and long term benefit. Identifies opportunities to deliver projects in an iterative way. 8 Is able to take long term goals and turn them into small actionable steps that can be implemented in an iterative way. Identifies and prevents decisions that are not "two-way door decisions". Ships. All the time. Sounds like a broken record in discussions with more junior members of the team; always asking if we can make something smaller. Knowledge Assessment for People Leaders 9 In addition to upholding the requirements of a Staff/Manager level, a Principal/Sr. Manager practices and fosters the value of iteration to team members. They hold their team members accountable for iteration and boring solutions. 10 In addition to upholding the requirements of a Principal/Sr. Manager, a Distinguished/Director proactively finds ways to drive the value of iteration and boring solutions. 11 In addition to upholding the requirements of a  Distinguished/Director , a Sr. Distinguished/Sr. Director embeds the value of Iteration across the department and division.  They use their cognitive and analytical abilities to anticipate and adapt to unpredictabilities in regard to strategic risk in a way that benefits all involved. 12 In addition to upholding the requirements of a Sr. Distinguished/Sr. Director , a Fellow/VP leads the way for the value of Iteration across the division and cross functional teams. They confidently lead their teams through change and proactively take risks based on values and the strategic vision. EVP/CXO In addition to upholding the requirements of a Fellow/VP,  the EVP champions the value of Iteration across GitLab. They are comfortable leading through discomfort and the unease associated with change and innovation.\n\n👁️ Transparency\n\nBe open about as many things as possible. By making information public, we can reduce the threshold to contribution and make collaboration easier. Use public issue trackers, projects, and repositories when possible. Transparency is not communication. Just because something exists in the handbook or elsewhere doesn’t mean it can’t be communicated again or in a more robust fashion to the people who need to understand or acknowledge it. On a personal level, be direct when sharing information, and admit when you’ve made a mistake or were wrong. When something goes wrong, it is a great opportunity to say “What’s the kaizen moment here?” and find a better way without hurt feelings.\n\nEven as a public company, we know that our value of transparency will be key to our success. This value can be hard to follow at times. You might ask yourself: what should be shared, how much to share, whether or not to speak up but definitely take the time to always opt for maximum transparency by adhering to the operating principles below. Often, company values get diluted as they grow, most likely because they do not write anything down. But we will make sure our values scale with the company. As a public company, we declare everyone in the company as an insider, which allows us to remain transparent internally about our numbers, etc. Everything else that can be transparent will continue to be so.\n\nWhen there are exceptions, material that is not public by default is documented.\n\nPublic by default\n\nEverything at GitLab is public by default. The public process does two things: allows others to benefit from the conversation and acts as a filter. Since there is only a limited amount of time, we prioritize conversations that a wider audience can benefit from.\n\nOne example of transparency at GitLab is the public repository of this website that also contains this company handbook. Others include the GitLab CE and GitLab EE issue trackers, as well as marketing and infrastructure. Transparency creates awareness for GitLab, allows us to recruit people that care about our values, gets us more and faster feedback from people outside the company, and makes it easier to collaborate with them. It is also about sharing great software, documentation, examples, lessons, and processes with the whole community and the world in the spirit of open source, which we believe creates more value than it captures.\n\nIn line with our value of transparency and being public by default, all GitLab team member profiles should be public. Public profiles also enable broader collaboration and efficiencies between teams. To do so, please make sure that the checkbox under the Private profile option is unchecked in your profile settings. If you do not feel comfortable with your full name or location on your profile, please change it to what feels appropriate to you as these are displayed even on private profiles.\n\nBecause we are public by default and have the SAFE framework we don’t need to make cases for why things should be transparent. If something is unSAFE and needs to remain not public it can be.\n\nNot public\n\nWe make information public by default because transparency is one of our values. However it is most important to focus on results. Therefore, a category of information is public unless there is a reason for it not to be. If something is not public, there should be a reference in the handbook that states a confidential decision was taken with a link to our Not Public guidelines, unless GitLab Legal and Corporate Affairs believes it carries undue risk. We document what is not public by default on our communication page.\n\nIf you believe something shouldn’t be public that currently is (or vice versa), then make a merge request to the relevant page(s) suggesting the change so that you can collaborate with others and discuss with the DRI. When content contains information which is not public it is recommended to remove the specific sections which are not public, put them on their own page in the internal handbook, and then link out to that with a “not public/internal only” note. Always share publicly what we can.\n\nWhen information is not public, it may also be treated as limited access, only shared with certain GitLab roles, teams, or team members due to privacy considerations, contractual obligation, or other reasons that the author or DRI can specify. Certain kinds of information default to limited access, including details about team members or customers who did not give permission to share the information.\n\nMost companies become non-transparent over time because they don’t accept any mistakes. Instead, we should always err on the side of transparency when there is a choice to be made between caution or inaction, and transparency. If we make a mistake, we now know what the limits of transparency are for the company and we should document this. The only exception to this rule would be in the case when there are legal concerns.\n\nBecause some information is not public the public information can be lacking some context. We should be cognizant of that.\n\nDirectness\n\nBeing direct is about being transparent with each other. We try to channel our inner Ben Horowitz by being both straightforward and kind. Feedback is always about your work and not your person. That doesn’t mean it will be easy to give or receive it.\n\nArticulate when you change your mind\n\nIf you state one thing, and then change course and support a different direction, point, or outcome, articulate this. It is OK to have your position changed by new data. Articulating that an earlier stance is not your current stance provides clarity to others and encourages data-driven decision making.\n\nSurface issues constructively\n\nBe transparent to the right people (up) at the right time (when still actionable). If you make a mistake, don’t worry; correct it and proactively let the affected party, your team, and the CEO know what happened, how you corrected it, and how—if needed—you changed the process to prevent future mistakes.\n\nTransparency is most valuable if you continue to do it when there are costs\n\nWe practice transparency even when hiding the facts would be easier. For example, many companies do not give you the real reason why they declined your application because it increases the chance of legal action. We want to only reject people for the right reasons and we want to give them the opportunity to grow by getting this feedback. Therefore, we’ll accept the increased risk of holding ourselves to a high standard of making decisions and do the right thing by telling them what we thought. Other examples are being transparent about security incidents and participating in and contributing to Live Broadcasts.\n\nTransparency has costs (distraction, mis-interpretation, etc.) but also great benefits (productivity, hiring, retention, brand awareness, etc). Team members can view more details on these benefits by referencing the “Transparency Benefit Quantification” slides in Google Drive). We should carefully weigh the tradeoff between costs and benefits, to prevent a knee-jerk reaction to reduce transparency when it has costs.\n\nSingle Source of Truth\n\nBy having most company communications and work artifacts be public to the Internet, we have one single source of truth for all GitLab team members, users, customers, and other community members. We don’t need separate artifacts with different permissions for different people.\n\nFindability\n\nOur transparency value means more than just making information accessible to all. In order to improve performance it’s important that we not only ensure information is accessible, but also ensure it flows to the correct places and is findable by those who need it. Focusing on information flow will ensure you, for example, utilize multi-modal communication, or that you keep your stakeholders informed of changes by posting links to MRs in Slack.\n\nSay why, not just what\n\nTransparent changes have the reasons for the change laid out clearly along with the change itself. This leads to fewer questions later on because people already have some understanding. A change with no public explanation can lead to a lot of extra rounds of questioning, which is less efficient.\n\nThis also helps with institutional memory: a year from now when you want to know why a decision was made, or not, the issue or MR that has the decision also shares why the decision was made. This is related to Chesterton’s fence - it’s much easier to suggest removing or changing something if you know why it exists in the first place.\n\nIf you use generalized terms such as “industry standard” or “best practices,” be sure to give context, as without context they can be seen as potentially vague or opaque.\n\nSimilarly, merely stating a single value isn’t a great explanation for why we are making a particular decision. Many things could be considered “iteration” or “efficiency” that don’t match our definition of those values. Try to link to an operating principle of the value or provide more context, instead of just saying a single value’s name.\n\nSaying why and not just what enables discussion around topics that may impact more than one value; for instance, when weighing the efficiency of boring solutions with the focus on customer results. When decisions align with all of our values, they are easy to discuss and decide. When there are multiple values involved, using our values hierarchy and directly discussing the tradeoffs is easier with more context.\n\nArticulating why also helps people understand how something changed when you articulate that you changed your mind.\n\nSaying why does not mean justifying a decision against all other suggestions. The DRI is responsible for their decision. The DRI is not responsible for convincing other people, but they should be able to articulate their reasoning for the change.\n\nWhen a GitLab Team Member comes across an ask or material (MR, handbook, etc.) that does not provide a “why” with sufficient context, the Team Member is responsible for getting the why and, if needed, working with the DRI to ensure that it is adequately documented and communicated to give context to other team members. In the absence of a why, team members may speculate the why. This is something that can lead to disruption and inefficiency.\n\nReproducibility\n\nEnable everybody involved to come to the same conclusion as you. This not only involves reasoning, but also providing, for example: raw data and not just plots; scripts to automate tasks and not just the work they have done; and documenting steps while analyzing a problem. Do your best to make the line of thinking transparent to others, even if they may disagree.\n\nTransparency Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate transparency when we are open with as many things as possible reducing the threshold to contribution and make collaboration easier.\n\nGitLab Job Grade Demonstrates Transparency Competency by… Knowledge Assessment 5 Uses public issue trackers, projects, and repositories when possible. Looks for opportunities to publicly share the things that they are working on. Knowledge Assessment for Individual Contributors 6 Provides context and background on projects and issues so that those with no prior knowledge are able to contribute to the discussion. They welcome feedback and new ideas as they know that will lead to a better solution. 7 Continually surfaces improvements across their functional area of expertise. They share feedback with others and understand how to disagree and commit to solutions. They model what it means to be as open as possible. They encourage conversation in public channels. 8 Implements open processes across their team. They also track team issues and projects openly so their team members are aware of everything that is happening on a team at a given time. They leverage feedback to drive the best possible outcomes with the information they have available. They also share feedback with their team and their peers in a timely, kind manner so their position on a given topic is known. Knowledge Assessment for People Leaders 9 Fosters and coaches openness across cross functional departments. They lead cross functional issues, projects and ideas inviting feedback to generate the best possible solution. They hold their teams accountable to continue to find opportunities to share things openly. They give feedback to their team members, peers and managers in a timely, kind manner so their position on a topic is known. 10 Drives their departmental strategy with openness as a key value. They hold their management team accountable to working openly and pushes them to make everything transparent even when it might be difficult to do so. They coach managers on the value that additional feedback can bring to the end solution. 11 Develops leaders that work openly and continue to provide timely, kind feedback across their division. They develop leaders that drive their teams with openness as a foundational part of the way that they operate. 12 Leads the company by being open in all things. They are open with things that might traditionally not be shared broadly. They communicate directly and provide feedback in a timely manner to initiatives happening within their department and across the company. They hold the e group and other leaders accountable for upholding this value. EVP/CXO Champions transparency both internally, across the company and externally. They participate both internally and externally in events and share the value that being open can provide to increasing trust with team members and others that interact with our product. They provide timely, kind feedback with initiatives happening internally and externally. They hold the e group and other leaders accountable for upholding this value.\n\nWhy have values\n\nOur values provide guidelines on how to behave and are written to be actionable. They help us describe the type of behavior that we expect from GitLab team members. They help us to know how to behave in the organization and what to expect from others.\n\nValues provide a framework for distributed decision making, detailed in GitLab’s TeamOps management philosophy. They allow individuals to determine what to do without asking their manager and they allow teams to make consistent decisions. When teams across the organization reference the same values in their decision making, there is consistency in how decisions are made. This ensures that our culture remains driven by our values.\n\nLastly, values create a conscious culture that is designed to help you prosper and experience exceptional personal growth through work.\n\nFive dysfunctions\n\nOur values also help us to prevent the five dysfunctions:\n\nFear of conflict Seeking artificial harmony over constructive passionate debate => prevented by transparency, specifically directness and collaboration, specifically short toes\n\nAbsence of trust Unwilling to be vulnerable within the group => prevented by collaboration, specifically kindness\n\nAvoidance of accountability Ducking the responsibility to call peers on counterproductive behavior which sets low standards => prevented by results, iteration, and transparency\n\nInattention to results Focusing on personal success, status, and ego before team success => prevented by results\n\nLack of commitment Feigning buy-in for group decisions creates ambiguity throughout the organization => prevented by transparency, specifically directness\n\nSome dysfunctions are not addressed directly by our values; for example, trust is not one of our values. Similar to happiness, trust is something that is an outcome, not something you can strive for directly. We hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given.\n\nOperating principles\n\nOperating principles are behaviors that empower GitLab team members to definitively live out a given value. They clarify what a given core value means and looks like at GitLab. Understanding this distinction is critical to thriving at GitLab, particularly for newer team members who may be familiar with a prior organization’s interpretation of iteration or collaboration (as examples).\n\nProcess for removing operating principles\n\nValues are not just things we do, but things that actively drive good behavior. When we remove them it doesn’t mean we stopped believing in it, just that it wasn’t actively helping to drive behavior. If we don’t prune our operating principles, then we will be like every other company: things that make sense but are not leading to a better culture.\n\nTo remove an operating principle from the Handbook page, submit your change through a merge request and explain your reasons in the merge request description.\n\nThe GitLab Value Handbook Page owner must approve and merge the request.\n\nMention the specific value\n\nMost companies have a list of values. In companies without strong values, folks often use generalizations when they refer to values. For example, “not a value add” or “scored well on values during our interview.” In companies with strong values, folks name the specific, relevant value as it applies to a given topic or situation. Values are only powerful when they are individually understood and applied by team members.\n\nHow to scale the business while preserving GitLab values?\n\nFor certain business decisions or projects (such as compensation and end-point management ), GitLab team members may have a lot of opinions and interest, and they want to provide their feedback and comments. On the other hand, it might be challenging for the project DRI to digest and respond to all these inputs. What should you do in this scenario?\n\nEveryone can contribute at GitLab. We encourage team members to share feedback and leave comments on issues. Leaving feedback and comments shows that team members care about a topic and about GitLab as a company. These perspectives may also uncover potential risks and problems in the project.\n\nThere shouldn’t be a “Don’t they have their job to do?” type of response. Furthermore, we shouldn’t judge team members who are perceived as being the “squeaky wheel.” At GitLab, we measure results, not hours. As long as a team member is producing required results, they are empowered to decide how to spend their time.\n\nOn the other hand, as GitLab grows in size, we need to make decisions and the decisions may not be agreed to by everyone. If a decision or project is sensitive or controversial, and receives large amounts of feedback, it can be challenging for the project DRI to handle. In these cases, it’s best to have time-boxed feedback built into timelines.\n\nIn a hypothetical example where a DRI needs to decide between red and gold potatoes for a stew, they would create an issue with the following sentiment:\n\nWe’re deciding between red potatoes and gold potatoes to go into the stew. We have to decide by Tuesday 2020-07-14 so that we can get our order to the grocery store on Wednesday 2020-07-15. We’ll be collecting input and feedback until that point. Jane is the DRI and will make the decision on 2020-07-14 with all the information we have at that point. Here is the framework we’re using for the decision:\n\nare there allergies to consider?\n\ncost per pound\n\nteam member preferences\n\nOnce the decision is made, it will be what is going into the stew.\n\nThis method has shown itself to be effective at soliciting productive feedback that doesn’t derail a timeline while ensuring team members feel heard.\n\nWhy our values are public\n\nCompanies are encouraged to copy and implement GitLab’s values. They are Creative Commons and can be copied verbatim.\n\nWe make our values public for the same reasons we make our OKRs (Objectives and Key Results) and strategy public. There is great power and efficiency in teams who share company values. Concealing values until after someone is hired into an organization is not a wise strategy.\n\nNot everyone will see our values and feel aligned with them, and that’s OK. By making values public, it shows respect for the time of job seekers who conduct due diligence on prospective employers. When people who are aligned with GitLab’s values apply for an open vacancy, this allows our hiring teams to more efficiently move candidates through the interview process.\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nCompanies may ask you to write a blank check. They’ll say, ‘Come join our organization, and when you’re here, you need to subscribe to our values, our way of working, and our strategy. It’s very essential, and it’s part of our identity!’\n\nBut these companies don’t give you the opportunity up front to evaluate it. It doesn’t make any sense to me. If it’s so important that people share your values, have them out there.\n\nHierarchy\n\nOccasionally, values can contradict each other. It’s useful to keep in mind this hierarchy to resolve confusion about what to do in a specific circumstance, while remaining consistent with our core values.\n\nThink of the hierarchy as a weighting system. Values higher in the hierarchy do not automatically override values lower in the hierarchy. Here are some examples:\n\nIf a change impacts Transparency positively but impacts Efficiency negatively in roughly the same amount, we would move ahead since Transparency is higher in the hierarchy than Efficiency.\n\nIf a change has a massive positive impact on Diversity but negatively impacts Iteration, we would move ahead even though Diversity is lower in the hierarchy than Iteration because the overall impact is more positive than negative.\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nIt’s an attempt to relieve at least some of the tension. It’s not absolute. If you think of values as binary, that’s not going to work. There will always be interpretation, and there’s always magnitude to consider.\n\nWe made a hierarchy so that it’s clear, in the end, the result matters most. For instance, we’re not going to be transparent for the sake of being transparent. We’re not radical in our transparency. We do it because we think it will lead to better outcomes.\n\nThose hierarchies are really important. They won’t preempt every debate, but it helps.\n\nUpdating our values\n\nOur values are updated frequently and as needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. If you’re a team member or in the core team please post a link to the MR in the #values Slack channel. If you’re not part of those groups, please send a direct Twitter message to @sytses.\n\nHow do we reinforce our values\n\nWhatever behavior you reward will become your values. We reinforce our values by:\n\nCriteria we use for promotions and communicate to the whole company on announcement.\n\nWhat we select for during hiring.\n\nWhat we emphasize during on-boarding.\n\nCriteria we use for our annual compensation review.\n\nWhat we refer to when making decisions.\n\nThe example the E-group sets for the company since a fish rots from the head down.\n\nWhat we expect from all team members, as ambassadors for our values.\n\nKeeping them up to date with a stream of commits that add details.\n\nBehavior we give each other 360 feedback on.\n\nBehavior we compliment.\n\nCriteria we use for discretionary bonuses.\n\nWhat we include in our offer letters\n\nCriteria we use to manage underperformance.\n\nWhat we do when we let people go.\n\nGiving value awards during Contribute.\n\nProviding GitLab team members and qualified individuals transparency into all aspects of the company through the CEO Shadow Program to enable them to better engage and collaborate cross-functionally.\n\nLinking the takeaways of courses to our values, like we did for the Crucial Conversations training.\n\nThe default settings of the software we use (for example: Speedy meetings, document sharing, agendas, etc.)\n\nReinforcing our values with features in GitLab, for example the Iterations feature.\n\nApplying one of our values virtual backgrounds in video calls.\n\nOur GitLab Song Book, the song lyrics often mention GitLab values.\n\nRegularly conduct a values exercise at the e-group offsite.\n\nThe most important moments to reinforce our values are decisions which affect individual team members most: hiring, promotions, and bonuses, which is why every promotion document at GitLab is shared with the entire company and uses the values as its core structure.\n\nIn negative feedback, we should be specific about what the problem is. For example, saying someone is “not living the values” isn’t helpful.\n\nYour values are what you hire for, what you praise people for, and what you promote them for. By definition, what you do in those instances are your values. It’s not what you say they are. Values should be explicitly part of our hiring process, our job profiles, and our review process.\n\nWhen we give bonuses and promotions, they are always linked to values. That’s the crucial thing. If you reinforce them there, that’s the most powerful thing you can do. — Sid Sijbrandij, GitLab co-founder and CEO\n\nWhat to do if values aren’t being lived out\n\nValue erosion can occur when indifference and apathy are tolerated. It can also occur when individuals justify undesired behaviors by interpreting values as “me values” rather than “company values.” For example, a team member may speak to the importance of personal efficiency in order to justify not collaborating professionally with peers. This is not what we expect from team members in terms of efficiency and collaboration.\n\nIf you feel that values are not being lived out in a given scenario, speak up and ask for context in a respectful manner. Navigating value conflicts starts with assuming positive intent from other team members. Offer links to relevant values and/or operating principles when discussing the issue. If there is confusion or disagreement about the interpretation of a value, please surface the discussion in GitLab’s #values Slack channel (for GitLab team members) or @-mentioning @gitlab on Twitter (for those who do not work at GitLab).\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nAlmost every time we face a hard decision at GitLab, it’s because values are in conflict. It’s not binary logic. It requires conversation, and sometimes there is no obvious answer. We can only achieve resolution by respectfully talking with each other and trusting the DRI to make the ultimate decision.\n\nPermission to play\n\nFrom our values we excluded some behaviors that are obvious; we call them our permission to play behavior:\n\nBe truthful and honest.\n\nBe dependable and reliable.\n\nTry to keep promises. If you might not keep a promise, proactively communicate as soon as you suspect it.\n\nBe deserving of the trust of our team members, users and customers.\n\nBe committed to the success of the whole organization.\n\nAct in the best interest of the company, our team members, our customers, users, and investors.\n\nMake the best decisions for GitLab.\n\nAct in accordance with the law.\n\nDon’t show favoritism as it breeds resentment, destroys employee morale, and creates disincentives for good performance. Seek out ways to be fair to everyone.\n\nPlaying politics is counter to GitLab values\n\nWe don’t want people to play politics at GitLab.\n\nAn example of politics is people discussing a proposal and being overly focused on whose proposal it is. This is a manifestation of the Belief Bias, where we judge an argument’s strength not by how strongly it supports the conclusion but by how strongly we support the conclusion. Proposals should be weighed on their merits and not on who proposed them. Another example is people being promoted based on others liking them or having a lot of alliances. We want people to be promoted based on their results. We value collaboration, but that’s different from being promoted just because people like you.\n\nBelow are some attributes of political and non-political work environments. GitLab plans to maintain a non-political one.\n\nPolitical environment Non-political environment Values are weaponized and used out of their intended context Team members utilize values with a positive intent Team members are driven by self-interest Team members are driven by company interest Team members work in silos Team members optimize globally People have territorial behaviors and are quick to perceive suggestions as attacks People have short toes People have unhealthy alliances with backroom conversations People have good intent and actively collaborate with folks Information is intentionally withheld Information is shared early (often WIP) and at the same time with all interested parties People try to undermine each other’s credibility by arguing with the weakest part of their argument People take a “steel man” position and argue against the strongest version of your opponent’s position Folks do not provide direct feedback. Instead, they withhold their thoughts or speak behind each other’s backs Feedback is given directly. This includes feedback about a manager’s team Communicating your own suggestions through a report instead of directly Feedback is given directly from the person who has it Evaluating proposals or work by who said or did it instead of by what is in it Proposals\xa0and work is evaluated without regard to who worked on them Lack of transparency in escalations. Team members go to a manager without first attempting to align with peers on an issue or letting peers know Team members speak directly to each other about feedback and requests in order to resolve their own conflicts. When they escalate, they do it in an effective way\n\nValues make choices\n\nValues make and clarify choices. A well-chosen value has a defensible opposite. Apple, for example, values secrecy over transparency and product perfection over iteration. They are successful building around our counter values — although the result is a very different company.\n\nWhat is not a value\n\nAll-remote isn’t a value. It is something we do because it helps to practice our values of transparency, efficiency, results, and diversity, inclusion & belonging.\n\nQuestions from new team members\n\nDuring every GitLab 101 session with new hires we discuss our values. We document the questions and answers to Frequently Asked Questions about the GitLab Culture.\n\nNew team members should read GitLab’s guide to starting a new remote role, and reference interviews centered on values within the GitLab Unfiltered YouTube channel.\n\nMission\n\nOur mission is that everyone can contribute. This mission guides our path, and we live our values along that path.\n\nMitigating Concerns\n\nWe have a page which documents our Mitigating Concerns. Many of our values help to mitigate some of these concerns.\n\nGitLab Values Quiz\n\nAnyone with a GitLab account can access the GitLab Values Quiz. To participate in the quiz, you will need to complete this learning course in Level Up. If you have questions, please reach out to our L&D team at learning@gitlab.com.\n\nLast modified December 3, 2024: Release process is not iteration (8b0cde4d)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:54:47,354 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:54:47,355 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/company/
2024-12-07 17:54:53,295 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/company/'}, page_content="About GitLab\n\nAMAs\n\nWhat you need to know about Ask Me Anything (AMA)\n\nApproach to OKRs at GitLab\n\nAn overview of how OKRs are done at GitLab.\n\nBeing a public company\n\nGitLab as a Public Company\n\nIn 2017, GitLab established aspirational milestones for a public offering, achieving $1B of annualized recurring revenue, and positive operating cash flow in order to align our efforts and investments to common goals. GitLab began trading on the Nasdaq Global Select Market on October 14, 2021 under the ticker symbol “GTLB.”\n\nWe continue to believe that being a public company is an integral part of realizing our mission. As a public company, GitLab may benefit from enhanced brand awareness, access to capital, shareholder liquidity, autonomy, and transparency.\n\nCadence\n\nEverything in a company happens in a certain cadence. The period of each cadence differs. Learn about the cadences we have at GitLab.\n\nE-Group offsite\n\nThe E-Group offsite happens every quarter for four days after the Board of Directors meeting\n\nE-Group Weekly\n\nFor executives to connect on a weekly basis in order to get timely input from E-Group, align on key initiatives, inform about key business happenings and celebrate company successes.\n\nFamily and Friends Day\n\nAt GitLab, we are family and friends first, work second. A quarterly Family and Friends Day during COVID-19 helps our Team Members prioritize their well-being.\n\nGitLab All-Company Meetings\n\nAn overview of GitLab Assembly and Quarterly Kickoff Meetings\n\nGitLab Culture\n\nHere's a look at what you can expect from our culture and all-remote environment.\n\nGitLab Environmental, Social, and Governance\n\nAn overview of corporate sustainability at GitLab.\n\nGitLab licensing technology to independent Chinese company FAQ\n\nOn this page you can view frequently asked questions about GitLab licensing its technology to a new, independent Chinese company.\n\nGitLab Mission\n\nWe at GitLab believe that all digital products should be open to contributions; from legal documents to movie scripts, and from websites to chip designs.\n\nGitLab Purpose\n\nGitLab empowers everyone through knowledge sharing, job access, and our software platform.\n\nGitLab Strategy\n\nGitLab has a 3 year strategy to be the leading complete DevSecOps platform delivered as a single application.\n\nGitLab Vision\n\nBehind the scenes of The DevSecOps Platform\n\nGroup Conversations\n\nEverything you need to know about GitLab's daily, recurring Group Conversations\n\nHistory of GitLab\n\nReview a summarised history of GitLab and the adventure so far from 2011 up until the present day. Learn more here!\n\nInfrastructure Standards\n\nThis handbook section defines the latest iteration of infrastructure standards for AWS and GCP across all departments and groups at GitLab.\n\nInspired by GitLab\n\nWhich companies can be listed here?\n\nAny company that has been inspired by GitLab’s culture and/or by any part of our handbook can be listed here.\n\nTransparency is one of GitLab’s values, and so we encourage you and your company to read our handbook and use the parts that make sense to your business, or even adapt it to your context.\n\nWith that, we want to know what on GitLab’s culture or on GitLab’s handbook inspired you, and how are you and your company using it to the benefit your business?\n\nKey Reviews\n\nPurpose\n\nAt most companies, this would be a quarterly meeting for senior function leaders to present priorities, progress, and risk mitigations to the CEO. We allow some additional stakeholders to attend to invite a broader range of perspectives, give visibility to peers across functions, and create broader accountability.\n\nMembers of E-Group and department leaders nominated by their E-Group leader can be required or optional. Their E-Group member will determine desired participation from within their function.\n\nKPIs\n\nWhat are KPIs\n\nEvery part of GitLab has Key Performance Indicators (KPIs) linked to the company OKRs. Avoid the term metric where we can be more explicit. Use KPI instead. A function’s KPIs are owned by the respective member of e-group. A function may have many performance indicators (PIs) they track and not all of them will be KPIs. KPIs should be a subset of PIs and used to indicate the most important PIs to be surfaced to leadership.\n\nMeet Our Team\n\nMore than 3,000 people have contributed to GitLab. The GitLab Inc. team consists of the following 2,349 team members and their 363+ pets. We believe we’re the world’s largest all-remote organization and we currently have team members in more than 65 countries and regions. This page lists who people report to, and on a separate page we detail the organizational structure. You can get a sense of the team culture and our inclusion by visiting our culture page and our Identity Data page.\n\nOnly Healthy Constraints\n\nCompanies often slow down as they mature. GitLab strives for healthy constraints.\n\nOrganizational Structure\n\nGitLab has at most eight layers in the company structure (Associate/Intermediate/Senior, Manager/Staff, Senior Manager/Principal, Director/Distinguished, Senior Director, VP/Fellow, Executives, Board). View more here!\n\nOur stewardship of GitLab\n\nGitLab have an open core business model and generate almost all our revenue with subscriptions to paid tiers. Learn more!\n\nPricing model\n\nMost GitLab functionality is and will be available for free in our Free tier. Paid tiers include features targeted for managers, directors, and executives.\n\nQuote to Cash\n\nGitLab's Quote to Cash systems and processes\n\nStill a Startup\n\nGitLab elevates others through knowledge sharing, job access, and our software platform..\n\nWorking Groups\n\nLike all groups at GitLab, a working group is an arrangement of people from different functions. Learn more!\n\nYearlies\n\nYearlies are the annual goals for the company. Yearlies should have measurable deliverables.\n\nLast modified September 1, 2023: Add comment to vision doc to signpost to buyer exp. (25772a09)\n\nView page source - Edit this page - please contribute.")]
2024-12-07 17:54:53,829 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:54:53,830 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/about/
2024-12-07 17:54:59,531 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/about/'}, page_content='About the Handbook\n\nHistory of the handbook\n\nThe handbook started when GitLab was a company of just ten people to make sharing information efficient and easy. We knew that future GitLab team-members wouldn’t be able to see emails about process changes that were being sent before they joined and that most of the people who would eventually join GitLab likely hadn’t even heard of us yet. The handbook was our way of ensuring that all of our company information was accessible to everyone regardless of when they became part of the team.\n\nAdvantages\n\nAt GitLab our handbook is extensive and keeping it relevant is an important part of everyone’s job. It is a vital part of who we are and how we communicate. We established these processes because we saw these benefits:\n\nReading is much faster than listening.\n\nReading is async, you don’t have to interrupt someone or wait for them to become available.\n\nTalent Acquisition is easier if people can see what we stand for and how we operate.\n\nRetention is better if people know what they are getting into before they join.\n\nOn-boarding is easier if you can find all relevant information spelled out.\n\nTeamwork is easier if you can read how other parts of the company work.\n\nDiscussing changes is easier if you can read what the current process is.\n\nCommunicating change is easier if you can just point to the diff.\n\nEveryone can contribute to it by proposing a change via a merge request.\n\nOne common concern newcomers to the handbook express is that the strict documentation makes the company more rigid. In fact, writing down our current process in the handbook has the effect of empowering contributors to propose change. As a result, this handbook is far from rigid. You only need to look at the handbook changelog to see the evidence. Every attempt is made to document guidelines and processes in the handbook. However, it is not possible to document every possible situation or scenario that could potentially occur. Just because something is not yet in the handbook does not mean that it is allowed. GitLab will review each team member’s concern or situation based on local laws to determine the best outcome and then update the handbook accordingly. If you have questions, please discuss with your manager or contact the People Success team.\n\nHandbook Interpretation\n\nThe handbook is subject to interpretation. We do our best to be as clear as possible to minimize confusion and/or misinterpretation. We also recognize that we have a global audience and that may bring different interpretations. If you have any questions or need further clarification please check with the content owner of the page. When in doubt please reach out and ask.\n\nRemember that everything is in draft at GitLab and subject to change, this includes our handbook.\n\nCount handbook pages\n\nIt’s easy to see that the handbook is large, but have you ever wondered just how large? The handbook is over two thousand pages long. That’s a lot of good info!\n\nHistorical Word and Page Counts\n\nabout.gitlab.com/handbook\n\nDate Word Count Page Count Notes 2018-01-01 298,806 228 2018-10-01 427,929 335 2019-01-01 520,519 439 2019-04-01 656,668 586 2019-07-01 818,064 766 2019-10-01 987,397 884 2020-01-01 1,204,642 1,035 2020-04-01 1,491,017 1,222 2020-07-01 1,851,350 1,488 2020-10-01 2,166,627 1,759 2021-01-01 2,410,554 1,914 2021-04-01 2,615,372 2,056 2021-07-01 2,956,781 2,271 2021-10-01 3,138,952 2,355 2022-01-01 3,280,108 2,395 2022-04-01 3,474,993 2,553 2022-07-01 3,628,280 2,641 2022-10-01 3,732,384 2,724 2023-01-01 3,732,186 2,722 ⬅️ Last entry before migration 2023-07-01 3,905,979 2,743 2023-10-01 3,478,407 2,306 2023-12-22 0 0 ⬅️ Handbook Migration Complete\n\nhandbook.gitlab.com/handbook\n\nDate Word Count Page Count Notes 2023-07-01 150,732 133 2023-10-01 1,909,139 1,403 2024-01-01 3,631,360 3,003 ⬅️  Migration Completed 2024-12-07 3,910,897 3,141 ⬅️ Hugo generated Live Count\n\nMethodology\n\nWord and page counts are determined through a simple two-step process:\n\nCount the number of words in the handbook. This can be done by running find sites/handbook/source/handbook -type f -name "*.md" -o -name "*.md.erb" | xargs wc -w from the root of the repository.\n\nCount the number of pages in the handbook. This can be done by running grep -l -r "\\" * | wc -l from the root of the repository.\n\nNote: If you need to go back to an earlier version of the handbook, use git checkout `git rev-list -n 1 --first-parent --before="2021-07-02 00:00" master` specifying the next day after the day you want.\n\nView Statistics\n\nOn this page you can see handbook trends and discover popular pages that you may not know about.\n\nGitLab uses Snowplow to track handbook usage; the information can be viewed on Tableau.\n\nMore about the handbook\n\nWe’ve gathered some information about the handbook here, but there’s still more elsewhere.\n\nHandbook usage\n\nEvolution of the handbook on the CEO page\n\nChangelog\n\nHandbook editing examples\n\nContent Websites\n\nOverview\n\nThis area has traditionally been referred to as “the handbook”, but over time has grown in scope to include multiple sites, projects, repos, and types of content.\n\nTherefore, we are using the term “content websites” here to avoid ambiguity and properly frame discussions around this scope of responsibility.\n\nSee our direction page for more.\n\nIf you need help, please see the editing handbook section, or escalation information if it’s urgent.\n\nEditing the Handbook\n\nInformation on how to edit the handbook including tips and troubleshooting.\n\nGitLab Handbook Usage\n\nAbout how GitLab uses the handbook.\n\nHandbook Changelog\n\nThe last 100 Merge Requests to the Handbook\n\nHandbook Direction\n\nOverview\n\nThe GitLab Handbook is the single source of truth for how we operate at GitLab, including processes, policies, and product direction. In keeping with our value of transparency, the GitLab Handbook is entirely open to the world. We welcome feedback from the community and hope that it serves as inspiration for other current or future companies. The GitLab Handbook is also an incredible talent acquisition tool, providing candidates with valuable insight into how GitLab runs as a company.\n\nHandbook Escalation\n\nFor information on team members’ roles and responsibilities, see Content Websites page.\n\nIntroduction\n\nThe Handbook is a critical part of empowering team members to do their jobs effectively. As such, we have a group of team members who assist in resolving issues affecting all team members.\n\nReporting an issue\n\nIf you’re looking for general help, please see the editing handbook page.\n\nAny issues should be reported in the #handbook-escalation channel in Slack.\n\nHandbook Style Guide\n\nGitLab’s general communications practices are detailed at GitLab Communication, but beyond those we do have some channel-specific guidance available. See the list of resources below for links to other guides.\n\nHandbook style guidance is covered primarily by the handbook markdown guide, and the editing handbook page.\n\nIn the absence of handbook-specific guidance, follow:\n\nGitLab’s Writing Style Guidelines, or\n\nthe Documentation Style Guide.\n\nRelated Resources\n\nGitLab Communication\n\nMarkdown guide\n\nGitLab Documentation guidelines\n\nDocumentation style Guide\n\nGitLab style guides\n\nPajamas Design System\n\nMarketing site content style guide\n\nBlog style guide\n\nLast modified October 29, 2024: Fix broken links (455376ee)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:55:00,196 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:55:00,196 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/company/okrs/okrs-basics/
2024-12-07 17:55:06,184 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/company/okrs/okrs-basics/'}, page_content='Overview of Objectives and Key Results (OKRs)\n\nGeneral information on OKRs, criteria, and guidance on how to write them.\n\nWhat are OKRs?\n\nOKRs stand for Objectives and Key Results and are our quarterly objectives. OKRs are how to achieve the goal of the Key Performance Indicators KPIs. They lay out our plan to execute our Yearlies, which in turn support our strategy, and help make sure our top goals and how to achieve them are clearly defined and aligned throughout the organization.\n\nObjectives are an aspirational goal to be achieved. They define what we’re aiming to do, and they show how individual, team, or department work impacts the overall direction of GitLab by connecting work to overall company strategy.\n\nKey Results are measures of progress against aligned objectives. They capture how we measure success in obtaining the objective. By achieving a Key Result (outcome), we create progress for the linked objective.\n\nYou can use the phrase “We will achieve a certain OBJECTIVE as measured by the following KEY RESULTS…” to know if your OKR makes sense. The OKR methodology was pioneered by Andy Grove at Intel and has since helped align and transform companies around the world.\n\nOKRs have four superpowers:\n\nFocus\n\nAlignment\n\nTracking\n\nStretch\n\nFundamentals of Impactful OKRs\n\nWhen writing objectives and key results focus on what you want to accomplish (the objective) and how you will measure the success (the key result).\n\nTo learn about the industry best practices for OKRs, how setting the right goals can mean the difference between success and failure, and how we can use OKRs to hold our leaders and ourselves accountable, watch John Doerr’s Ted Talk.\n\nWhen planning OKRs, be sure to consider OKRs at GitLab.\n\nCriteria for Objectives\n\nObjectives should be:\n\nAmbitious - More than just “business as usual” or incremental change, an objective describes an aspirational yet attainable transformation, growth, improvement that significantly improves the current situation. A few examples:\n\nIntroduce disruptive innovations\n\nEstablish differences between GitLab Inc. and competitors\n\nBe recognized as an industry leader in a category\n\nMeaningful - A top priority that advances GitLab’s strategy and greater mission; provides direction to departments, teams, and individuals about where we are going and how we are getting there.\n\nInspirational - By providing an aspirational yet meaningful target, empower teams to reprioritize work to focus on what makes the most progress against an objective; to accomplish this, objective should also be easy to remember.\n\nAlign Teams & Individuals - Need to be broad enough to be relevant to at least more than one department, team, or individual one level down, but also specific enough that the objective can be measurable by up to three key results; if associated Key Results are satisfied, Objective should be achieved.\n\nFor example, a product-related OKR at CEO level such as increase users by 100% would have the Product leader as the DRI but every other function would also need to contribute to achieve that KR.\n\nClear, Responsible Party - While aspirational objectives will often require collaboration and teamwork, they should have one DRI responsible for ensuring the completion the objective. This prevents diffusion of responsibility.\n\nFocused - A person or team should have no more than 3 Objectives in order to focus on only the highest priority items; this also provides clarity on what we will not do in order to remain focused.\n\nTransparent - Allow individuals, teams, and departments to see how their work contributes to the overall goals of GitLab. By sharing OKRs, individual, team, and departments are able to spell out their priorities and avoid having others disrupt focus with non-priority items.\n\nCriteria for Key Results\n\nKey Results should be:\n\nIterative - Aligned with our core value of iteration, a Key Result should focus on number of iterations or steps on the way to an outcome instead of just the outcome. Deliver x iterations instead of deliver y functionality.\n\nFor example, if we need to create a certain number of experimental and beta features to ultimately get to 1 GA feature, break the KR down into iterative pieces such as deliver 16 experimental features, 2 beta features, and 1 GA feature to highlight the iterations required to get to the end result, instead of only focusing on the end result.\n\nAspirational - Ambitious but realistic stretch goals; if it feels uncomfortable, it’s a good KR.\n\nIf you achieve less than 70% of your KRs, you may be stretching beyond what is achievable. If you are regularly achieving 100% of your KRs, your goals may not be ambitious enough.\n\nLinked - Be aligned to an Objective and be relevant to teams one level down; this alignment also allows KRs to easily roll down to become objectives one level down.\n\nKRs should not be too specific that the KR needs to be rolled more than one level down.\n\nClear, Responsible Party - one single person or team responsible for Key Result.\n\nInfluenceable - the Key Result owner (department, team, or individual) should be able to impact Key Result through the owner’s actions.\n\nExample: an individual KR to change company-wide net retention is too broad; there are too many other conflating factors for an individual to determine impact. However, net retention could be appropriate KR for an entire department.\n\nTime Bound - has a due date. At GitLab, unless otherwise stated, this is within the quarter.\n\nMeasurable - As Key Results provide the milestones for how we’ll complete objective, KR should be either a qualitative (i.e. completed Y/N or number of steps of project completed) or quantitative (increased a metric by x) measure that can prove we accomplished the Key Result. Quantifying Key Results strongly preferred.\n\nMutually Exclusive - Measure one component of progress for an objective without overlapping with progress represented by other Key Results. Progress for one Key Result shouldn’t count towards another Key Result.\n\nExample: A Key Result for number of transactions and a Key Result for average dollar amount of transactions are an example of mutually exclusive Key Results: one KR measures volume while the other Key Result measures quality of volume. On the other hand, a Key Result for total number of transactions and a Key Result for number of transactions from North America is an example of an overlap: progress gets ‘double-counted’ for both Key Result.\n\nCollectively Exhaustive - Key Results should fully account for what’s required to achieve an objective. If all Key Results are achieved, then, by default, the Objective must also be achieved.\n\nFew Words and Ubiquitous Language - As defined in Handbook.\n\nYou can score your OKRs against these criteria to determine whether your OKRs are effective.\n\nHow to Write OKRs\n\nThe following formula can be used to write objectives: Verb + What you want to do + In order to/for/so that (what you hope to achieve or rationale for objective). Objective Example: Increase awareness of company in the market in order to increase sales.\n\nClear goal including rationale for pursuing that goal\n\nThe following formula can be used to write Key Results: Verb + what you’re going to measure + from “x to y”. Key Result Example: 100% of employees certified on OKR expectations and process.\n\nFor information on getting started with OKRs and writing basic OKRs, consider reviewing the OKRs 101 lessons on What Matters. The “6 Principles of setting OKRs” may also be helpful.\n\nTeams should limit the number of OKRs they commit to so they have reasonable bandwidth to deliver. When planning OKRs:\n\nConsider non-OKR commitments. While OKRs are the big commitments that the team is making, they do not supersede core team members responsibilities. This means retaining team capacity beyond OKRs for work that falls higher in a prioritization framework (example from product), such as forced prioritization items with an SLA/SLO. Meeting SLOs is not an OKR, as OKRs focus on what’s different.\n\nOther than core team member responsibilities such as those outlined above, all other major commitments should be prioritized through OKRs and consider team bandwidth.\n\nIf a team gets a request for a major effort within the quarter, they can change the OKR by following the guidelines how to change an OKR within the quarter\n\nPlan for OKRs to be ambitious, but achievable within the team capacity that you have for OKRs. While OKRs are meant to be ambitious, you should aim to complete them and strive to hit the ambitious plan. We recognize that with ambitious planning some OKRs will not be completed, but it is striving and reporting on OKRs with the goal of hitting 100% that helps us accomplish strong results. We score individual OKRs as “on track” when they are at least 80% complete. In aggregate, we expect that the average completion score across OKRs is 70%.\n\nReview cascading OKRs first and allocate time for those. Cascading OKRs are those at the Company level that need your group’s contributions to be achieved. You should prioritize these first.\n\nIt is OK to push back on OKRs. If you can’t prioritize a cascading or shared OKR due to more important work, contact the owner of the OKR and make adjustments so that it is achievable without your team’s contribution, or remove it. It is OK to do this, with clear communication and collaboration. It is not acceptable to simply ignore the cascading OKR or shared OKR without clear upfront communication and prioritize other work instead.\n\nWhen writing OKRs, focus on outcomes, not tasks, and make key results measurable.\n\nFor any OKR with a dependency, make sure to get commitment on the dependency with shared objectives. If you don’t get commitment in the shared objective, make changes as needed to keep to feasible OKRs.\n\nTips for OKRs that are scoreable\n\nYour KRs should be statements that clearly indicate how you will score. For example, in FY21-Q4, the marketing team set a target of completing 5 experiments. It completed 4 out of the 5, but only one of these appeared to be successful. The marketing team initially saw this as a failure. Instead, it showed notable progress. 80% of experiments were completed. This was the stated KR goal.\n\nWe should aspire to set quantitative goals in which scoring is straightforward as a % of attainment (for example, X% of target ARR or logos). In rare instances, quantitative KRs are not possible or appropriate. For example, launching a new compensation program is hard to score without scoring guidelines. Does not launching = 0% attainment and launching = 100% attainment? What about hitting milestones in between? In these cases, note in the issue or epic how you plan to grade the KR at the end of quarter. In our compensation example, this could mean putting together a scoring guide such as this:\n\nMilestone Score Complete compensation analysis 20% Present plan to E-Group for feedback 40% Get sign-off from Finance 60% Complete comp refresh for all team members 100%\n\nPlease update scores in addition to status in Key Result Meetings.\n\nWatch this video for a demo on how to updated progress in OKR management:\n\nExample OKRs\n\nObjective: Establish GitLab leadership in X area.\n\nAvoid ❌ KR1: GitLab X becomes available in beta, including Y functionality in beta, with a path to general availability next quarter.\n\nInstead ✅ KR1: GitLab X reaches 100k paid MAU by end of quarter.\n\nAvoid ❌ KR2: Ship 10 components to support the use of X.\n\nInstead ✅ KR2: 30% of GitLab users are able to use X with the components built.\n\nThis aligns with a focus on outcomes and business results instead of KRs tracking tasks or launches.\n\nExternal examples\n\nExamples from whatmatters.\n\nOKR resources\n\nWith Goals, FAST beats SMART\n\nMeasure What Matters by John Doerr\n\nA Modern Guide to Lean OKRs\n\nLast modified October 28, 2024: Split OKR page (ca1fbdd1)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:55:06,827 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:55:06,827 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/company/okrs/okrs-in-gitlab/
2024-12-07 17:55:12,876 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/company/okrs/okrs-in-gitlab/'}, page_content='OKRs in GitLab\n\nHow to enter and organize OKRs in the GitLab platform.\n\nWatch this video for a demo on how to use GitLab for OKR management:\n\nCreating Objectives\n\nThe objectives for the quarter are defined on this page. To add new objectives in GitLab, follow the steps below:\n\nIn the GitLab OKRs project, navigate to OKRs by selecting Issues on the left sidebar.\n\nIn the top right corner of the Issues screen, select the down arrow next to New issue in the top right corner and then select New objective from the menu. Next, select the New objective button to create an Objective.\n\nEnter a short but descriptive title for the objective then click Create objective.\n\nWhen referring to a division, use the division name, not the e-group leader’s position. For example, use “Marketing OKRs” (not “CMO OKRs”).\n\nSelect the objective from the list to open in an editable view and add more details:\n\nIdentify the owner for the objective and assign them.\n\nEnsure that only one DRI is assigned to the objective. If there is a case of multi-ownership, it’s likely that the OKR/KR can be simplified or broken down further.\n\nIdentify the quarter for the objective and set the corresponding milestone.\n\nAdd labels so objective is searchable/filterable:\n\nAdd OKR label.\n\nAdd division label to assign to the relevant division (i.e. Sales, Product, etc).\n\nCompany OKRs are designated with a division::CEO scoped label.\n\nOnly Product & Engineering cascade OKRs below division level, so for Product & Engineering OKRs, in addition to division labels, follow stage labels to add the Section/Stage/Group scoped labels to assign the OKR to the relevant parts of Product Hierarchy.\n\nEach part of hierarchy should have a label. For example, an OKR for a group would have a division label, a section label, a stage label, and a group label.\n\nReview the objective against the SAFE Framework to ensure it is information that can be shared. Review to ensure that the objective should not be limited access. If the information is limited access, use code name if relevant or link to a supporting issue that is limited access.\n\nCreating Key Results\n\nEach Objective will contain one or more sub-objectives or key results. Sub-objectives are only used to cascade OKR down a level in organizational structure while Key Results are the measure which helps us understand if we’ve met our objective and can be cascaded down a level of organization structure to become an objective one level down. Key Results must be created as part of an Objective and cannot be created independent of an Objective since Key Results should be linked to an Objective.\n\nSince Key Results are the measure that helps us understand if we’ve met our Objective, Key Results are aligned to the same, single layer of the organizational structure as their parent Objective and not a Key Result for multiple layers of organizational structure. However, Key Results can be cascaded down from this single organizational structure layer by becoming Objectives in the next organizational level down - see Cascading OKRs.\n\nTo add new key results in GitLab, follow the steps below:\n\nNavigate to the objective that you want to add a child key result to by opening the GitLab OKRs project, selecting Issues on the left sidebar, then clicking on the target objective.\n\nAdd new key result by clicking Add in the Child objectives and key results section of an objective and then select New key result. Use the SAFE framework to determine whether it needs to have limited access.\n\nEnter a short but descriptive title for the key result then click Create key result.\n\nWhen referring to a division, use the division name, not the e-group leader’s position. For example, use “Marketing KR” (not “CMO KR”).\n\nSelect the key result from the list in the Child objectives and key results section to open in an editable view and add more details:\n\nIdentify the owner for the key result and assign them.\n\nEnsure that only one DRI is assigned to the KR. If there is a case of multi-ownership, it’s likely that the OKR/KR can be simplified or broken down further.\n\nIdentify the quarter for the key result and set the start date as the first date of that quarter and set the due date to the last day of that quarter.\n\nAdd labels so that KR is searchable/filterable:\n\nAdd OKR label.\n\nAdd division label to assign to the relevant division (i.e. Sales, Product, etc). Company OKRs are designated with a division::CEO scoped label.\n\nOnly Product & Engineering cascade OKRs below division level. For Product & Engineering OKRs, in addition to division labels, follow stage labels to add the Section/Stage/Group scoped labels to assign the OKR to the relevant parts of Product Hierarchy.\n\nEach part of hierarchy should have a label. For example, an OKR for a group would have a division label, a section label, a stage label, and a group label.\n\nReview the key result against the SAFE Framework to ensure it is information that can be shared. Review to ensure that information should not be limited access. If the information is limited access, use code name if relevant or link to a supporting issue that is limited access.\n\nOptionally, turn on check-in reminders.\n\nThe key result now appears in the Child objectives and key results section of the corresponding parent objective.\n\nWatch this video for a demo on how to create objectives and key results:\n\nCascading OKRs and how to Align Division OKRs to the company OKRs\n\nCascading is the process by which top-level company OKRs cascade down from company-level to division, department, team, and sometimes individual level. The OKRs that are directly aligned with Company KRs should be tied to the Company KRs in such a way as to allow scoring.\n\nAt GitLab, we typically create OKRs at each level where some OKRs align with the levels above, but not all.\n\nBased on the current methodology and feature set in the product, there are two ways to align OKRs to company OKRs:\n\nAdd relevant OKRs as related items. Most of the time, this is what teams use.\n\nHave all relevant OKRs as children of a Company KR.\n\nThe second method should be used only if all relevant OKRs can be added as children, because Progress is automatically scored based on the children if any exist.\n\nIn the future, when manual scoring is available, a mix of the two methods can be used for a single KR.\n\nIf an OKR is related, but does not score towards the Company KR, edit the description to add a note.\n\nCreating company OKRs\n\nTo allow for division, department, or team objectives to be added as child objectives or KRs, the Company key results should be created as an objective, not as a key result, as GitLab functionality doesn’t allow for a KR to have child OKRs.\n\nThe Office of the CEO does the following:\n\nCreate the Company objective.\n\nCreate the Company key results as child objectives of the Company objective.\n\nOnce company OKRs are created, other divisions and departments following one of the two methods for team OKRs that score towards company OKRs.\n\nMethod 1: Add relevant OKRs as related items\n\nTypically at GitLab, divisions create OKRs to automatically have progress score towards division objectives. To indicate that a division KR should also show progress of a Company KR, add the division KR as a related item of the Company KR following these instructions:\n\nClick on the relevant Company KR to add related items.\n\nClick Add in the Linked items section.\n\nClick inside of the following item(s) text field.\n\nFind (enter text to filter) and select 1 or more objective(s) or KR(s) that should score to the Company KR.\n\nClick Add to add the selected OKR(s).\n\nDo this for all OKRs that contribute to company OKRs. However, be careful not to link an OKR to multiple Company KRs.\n\nWhen this method is used, the Office of the CEO will update the score manually based on the scoring of all related items.\n\nA hypothetical example where division KRs score directly to division objectives, and should also progress a Company KR:\n\nCompany Objective: Retain and grow top talent – automatically scores from KRs including KR1\n\nKR 1: Have 10% of managers enrolled in leadership program – manually scored based on related items\n\nRelated: Sales OKR: Have 10% of managers enrolled in leadership program – child of and automatically scores to CRO Objective\n\nRelated: Marketing OKR: Have 10% of managers enrolled in leadership program – child of and automatically scores to CMO Objective\n\nMethod 2: Add all OKRs as children of Company KR\n\nThis method should only be used if all OKRs that will score towards the Company KR can be children of the KR, because the Company KR progress is automatically scored based on its children. The hierarchy looks similar to this:\n\nCompany objective\n\nCompany KR (a GitLab objective)\n\nDivision objective\n\nDivision KR\n\nDivision KR\n\nTo add the division OKRs as children of the relevant Company KR:\n\nClick on the Company KR you want to be the new parent for an objective/key result.\n\nClick Add in the Child objectives and key results section of the Company KR.\n\nCreate team objective or KR as a child objective of the relevant Company KR (Company KR will be a GitLab objective).\n\nIf the team objectives or KRs already exist, find the objective or key result for alignment by typing the name of the OKR in the search bar that appears in the Child objectives and key results section. See documentation to add a child objective.\n\nIf applicable, add the team key results as children inside of the team objective.\n\nEnsure they have an assignee, labels, etc. following guidelines on Creating Key Results.\n\nA hypothetical example where division OKRs score directly to a company OKR:\n\nCompany Objective: Retain and grow top talent – automatically scores from KRs including KR1\n\nKR 1: Have 10% of managers enrolled in leadership program – automatically scores from child OKRs\n\nCRO OKR: Have 10% of managers enrolled in leadership program\n\nCMO OKR: Have 10% of managers enrolled in leadership program\n\netc. (all divisions participating should be added)\n\nNote: Using this method, if you need to track the team objective or KRs separately, you can take a look at Engineering’s guidance on tracking department OKRs. If you need the team objective or KRs to score to another parent objective, duplicating the OKR is currently the only way to do so.\n\nSearch and Filter OKRs\n\nYou can use the List view to filter by the assignee or by your team using labels. For example:\n\nThis view shows all engineering division OKRs. Division::engineering label can be swapped out for any other division/stage/section/group scoped label.\n\nThis view shows all OKRs assigned to @sytses\n\nYou can bookmark or share the URL for future reference.\n\nWatch this video for a demo on how to find the OKRs you’re looking for:\n\nLast modified October 28, 2024: Split OKR page (ca1fbdd1)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:55:13,415 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:55:13,415 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/security-operations/sirt/sec-incident-response/
2024-12-07 17:55:19,329 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/security-operations/sirt/sec-incident-response/'}, page_content='Security Incident Response Guide\n\nThis is a Controlled Document\n\nIn line with GitLab’s regulatory obligations, changes to controlled documents must be approved or merged by a code owner. All contributions are welcome and encouraged.\n\nPurpose\n\nThe Security Incident Response Team (SIRT) is on-call 24/7/365 to assist with any security incidents. If an urgent security incident has been identified or you suspect an incident may have occurred, please refer to Engaging the Security Engineer On-Call and use the Slack /security command by going to a new message thread anywhere in Slack, typing the following command and pressing enter: /security\n\nInformation about SIRT responsibilities and incident ownership is available in the SIRT On-Call Guide.\n\nScope\n\nIncident Identification\n\nSecurity incident investigations are initiated when any security event is detected on GitLab.com, on another GitLab service, or as part of the GitLab company. These investigations are triaged by qualified Security team members and dispositioned as false positives when the triage evidence is obvious and risk-free. If there is any question about the event being potentially harmful or negatively impactful to GitLab customers, services, products, team members, 3rd party services, or alike, the Security team investigates the incident.\n\nIncident indicators can be reported to SIRT either internally, by a GitLab team member, or externally. It is the Security team’s responsibility to determine when to investigate dependent on the identification and verification of a security incident.\n\nThe GitLab Security team identifies security incidents as any violation, or threat of violation, of GitLab security, acceptable use or other relevant policies.\n\nSIRT will follow processes in the Material Breach Determination internal handbook page for any security incidents that individually, or in aggregate may be a material breach, including 3rd party breaches that may have a material impact to GitLab. Incidents that have the potential to be material will be treated as MNPI.\n\nRoles & Responsibilities\n\nRole Responsibilities GitLab Team Members Responsible for following the requirements in this procedure SIRT Responsible for implementing and executing this procedure SIRT Management (Code Owners) Responsible for approving significant changes and exceptions to this procedure\n\nProcedure\n\nIncident Response Process: this guide covers the following activities for all security incidents\n\nDetection\n\nThe SIRT, other internal, or external entity identifies a Security or Privacy event or risk that may be the result of a potential exploitation of a Security Vulnerability or Weakness, or that may be the result of a misconfiguration, or an innocent error\n\nOne of our Security detection controls identifies event(s) outside of the established security baseline\n\nA security issue is escalated into an incident out of an abudance of caution and to validate any assumptions\n\nAnalysis\n\nSIRT determines whether the reported security or privacy event is in actuality security or a privacy event\n\nSIRT determines the incident severity and priority based on the following incident classification methodology\n\nContainment\n\nPrevent the spread of unauthorized or malicious use of the affected system or data\n\nMitigates and eventualy fully remediates the root cause of the incident to prevent further damage or exposure\n\nSIRT may implement additional controls to minimize the damage as a result of the incident\n\nDetermine if it is safe to continue operations with the affected system\n\nPermit or deny the operations of the affected system\n\nEradication\n\nComponents that have caused the security incident are eliminated\n\nRemoval of the attackers’ access to the environment or the targeted system\n\nStrengthen the controls surrounding the affected system\n\nRecovery\n\nRepresents the effort to restore the affected system’s operations after the problem that gave rise to the incident has been corrected\n\nImplementation of additional monitoring controls\n\nUpdate the incident record with any relevant details\n\nPost-Incident analysis and activities\n\nRetrospective and lessons learned activity\n\nLeaked Secrets Incident Response Process\n\nWhen secrets are confirmed to be leaked, it is important to minimize the exposure time by immediately revoking the secrets. This can be done by automation or manual revocation by the Security team. Security will immediately revoke the secrets to prevent further abuse even if the potential impact of that action isn’t clearly understood at that time. In some cases this may cause disruption, when the secrets are being used for legitimate processes. Because of this potential for impact to services dependent on the revoked secrets, Security posts a notification to the #security-revocation-self-service Slack channel, where secrets owners can use the channel for manual or automated self-service. Since secret has already been exposed and revoked, and to make it easier for secrets’ owners to find their secrets in the channel, the clear text version of the revoked secret is published as a part of the notification.\n\nConfidentiality\n\nSecurity incidents may (and usually do) involve sensitive information related to GitLab, GitLab’s customers or employees, or users who (in one way or another) have engaged with GitLab. GitLab, while codifying the Transparency value, also strongly believes in and strives to maintain the privacy and confidentiality of the data its employees, customers, and users have entrusted us with.\n\nA confidential issue means any data within the issue and any discussions about the issue or investigation are to be kept to a need to know basis. This will involve specific GitLab employees only unless permission is explicitly granted by GitLab Legal, a GitLab Security Director, the VP of Security, or the GitLab Executive Team.\n\nWhich team members have access to a specific incident is defined on a case to case basis by SIRT according to our limited access policy. Whenever a team member needs access to the incident, this should be requested in the corresponding incident channel or in #security-operations. Bypassing security controls to access the incident issue will result in Security Operations being notified.\n\nIncident Tracking\n\nSecurity incident investigations are opened in the SIRT group. The project will be created using the Incident Response project template. To create the incident, the /security command in Slack has to be used over manual creation. Please refer to the Engaging the Security Engineer On-Call page for further detail.\n\nAll artifacts from an investigation must be handled per the Artifact Handling and Sharing internal handbook page.\n\nNOTE: The tracking issue, any collected data, and all other engagements involved in a Security Incident must be kept strictly confidential.\n\nIncident Severity\n\nAssigning severity to an incident isn’t an exact science and it takes some rational concepts mixed with past experiences and gut feelings to decide how bad a situation may be. When considering severity, look at:\n\nThe type of data involved and how it’s classified using the Data Classification Policy\n\nWas this data leaked or disclosed to parties who should not have visibility to it?\n\nHas the data been modified in our records? (either confirmed or believed to be)\n\nWas a user or service account taken over?\n\nWhat level of access did this account have and to what services or hosts?\n\nWhat actions were taken by the compromised account?\n\nIf a vulnerability is present on a host or service, consider the impact it might have on GitLab and the likelihood of it being exploited by using the Risk Factors and Risk Scoring documentation.\n\nWas the vulnerability exploited? If so, how was it used and how frequently?\n\nWhat is the scope of the incident?\n\nHow many GitLab.com users were/may have been impacted?\n\nHow many hosts or services?\n\nHas this incident resulted in any hosts or services being unavailable?\n\nTo help place the correct severity rating on the incident you are about to submit, please refer to the Incident Classification page.\n\nInternal Engagement & Escalation for High-Severity Incidents\n\nCoordinate with internal teams and prepare for the incident investigation:\n\nOpen an incident-focused Slack channel to centralize non-verbal discussion, particularly if the incident is of a sensitive nature. This is done by using /sirt-escalate in slack.\n\nFor artifact handling, a Google Drive folder and shared Google Doc should have been created automatically and linked to the issue.\n\nIn the event that an incident needs to be escalated within GitLab, the Security Engineer On Call (SEOC) will page the Security Incident Manager On Call (SIMOC). It is the responsibility of the SIMOC to direct response activities, gather technical resources from required teams, coordinate communication efforts with the Communications Manager On Call, and further escalate the incident as necessary.\n\nCharacteristics of an incident requiring escalation include but are not limited to the following:\n\nIncidents involving or likely to involve data with an Orange or Red classification\n\nIncidents that are likely to impact, or are actively impacting the availability or functionality of essential services\n\nIncidents affecting legal or financial resources\n\nIncidents that are likely to require a breach notification or public notification\n\nIncidents involving criminal activity or that may require the involvement of law enforcement\n\nIncidents involving key personnel such as executive leadership\n\nIf applicable, coordinate the incident response with business contingency activities.\n\nContainment\n\nOnce an incident has been identified and the severity has been set, the incident responder must attempt to limit the damage that has already occurred and prevent any further damage from occurring.\n\nThe first step in this process is to identify impacted resources and determine a course of action to contain the incident while potentially also preserving evidence. Containment strategies will vary based on the type of incident but can be as simple as marking an issue confidential to prevent information disclosure or to block access to a network segment.\n\nIt’s important to remember the containment phase is typically a stop-gap measure to limit damage and not to produce a long term fix for the underlying problem. Additionally the impact of the mitigation on the service must be weighed against the severity of the incident.\n\nWhen triaging priority::1/severity::1 incidents there may be times that SIRT or Infrastructure are unable to mitigate an issue, or identify the full impact of a potential mitigation. In these cases the Development Escalation Process can be used to engage with the development team on-call. It is important that this process is followed as documented and only for priority::1/severity::1 issues.\n\nRemediation and Recovery\n\nDuring the remediation and recovery phase the incident responder will work to ensure impacted resources are secured and prepared to return the service to the production environment. This process may involve removing malicious or illicit content, updating access controls, deploying patches and hardening systems, redeploying systems completely, or a variety of other tasks depending on the type of incident.\n\nAn Incident Review will be completed for all incidents. To prevent future occurrences and better our security posture, incident retrospectives will be conducted for all severity::1 incidents and others where there is indication for added value.\n\nThis phase should prioritize short term changes that improve the overall security of impacted systems while the full recovery process may take several months as longer term improvements are developed.\n\nResolution\n\nUpon completing the containment, remediation, communication and verification of impacted services, the incident will be considered resolved and the incident issues may be closed after a review.\n\nThe incident response process will move on to a retrospective and lessons learned phase through which the process improvements and overall security of the organization can be analyzed and strengthened.\n\nInternal & External Communication\n\nOur security incident communication plan defines the who, what, when, and how of GitLab in notifying internal stakeholders and external customers of security incidents.\n\nEngaging Law Enforcement\n\nIf during the course of investigating a security event the incident itself, materials involved in the incident (stored data, traffic/connections, etc), or actions surrounding the incident are deemed illegal in the United States, it may be necessary (and advisable) to engage U.S. law enforcement.\n\nThe Security Engineer On-Call will immediately escalate to the Director of Security Operations to raise awareness of the legal concern.\n\nFollowing review, the Engineer and Director will engage the VP of Security and VP of Legal for validation of next steps.\n\nThe Director of Security Operations will then contact the appropriate local law enforcement agencies, state agencies or US (federal) government agencies.\n\nWhen You Join an Incident Channel or Call\n\nIn the event of a perceived major security incident (which may prove to not be one at a later point), adhoc communication is sometimes required for coordination. This is outlined in the sections above. If you are identified as someone who could assist during the perceived security incident with either the identification, confirmation, or mitigation of the incident, you will be added to a dedicated Zoom call or Slack channel. Upon joining that call/channel, please take note of the following:\n\nThis is crisis management communication channel, that means that it’s private by default. It may contain business critical or PII information that cannot be shared with the larger company at this time, or ever. Should GitLab Security determine that the content of this particular communication channel can be made internally available or public at a later point, the required changes will be made.\n\nRead the channel history before asking questions. Get some context, read through past conversations and related documents. The relevant person will reach out to you with specific asks at the right time.\n\nDo your best to stay professional. However, be aware that security incidents are often stressful and we’re all humans. People may raise their voice, or use wording that seems unnecessary, harsh or inappropriate. It’s important to cut people some slack (no pun intended) during this stressful time, and raise/address any potentially erratic behavior with the relevant manager once the incident is over.\n\nHumor is your ally. No, it really is.\n\nIncident Labels\n\nUse proper labels. The correct use of dedicated scoped incident labels is critical to the accuracy of the data in the incident tracker and the subsequent metrics calculated from it. A list of all labels can be found in the GitLab SIRT group internal handbook page.\n\nExceptions\n\nExceptions to this procedure will be tracked as per the Information Security Policy Exception Management Process.\n\nReferences\n\nParent Policy: Information Security Policy\n\nSecurity Communications Runbooks (internal)\n\nIncident Communications Plan\n\nMarketing Emergency Response process\n\nTime-sensitive blog post process\n\nMarketing rapid response process\n\nLast modified November 4, 2024: Fix broken links (2eb0e162)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:55:20,061 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:55:20,062 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/security-operations/sirt/severity-matrix/
2024-12-07 17:55:25,976 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/security-operations/sirt/severity-matrix/'}, page_content='Security Incident Severity and Priority Matrix\n\nIncidents will be classified using Priority and Severity labels. SIRT will use the criteria defined below when assigning labels and the SIRT Escalation Guide for escalations.\n\nPriority\n\nThe priority label is used to indicate the importance and guide the response timing of the incident. Priority labels are expected to be set based on the circumstances of the incident, number of impacted users, and affected systems. Priority should be adjusted as the incident is worked and the conditions change.\n\nUrgency Example Expected Response GitLab Label Immediate A service which is critical for day-to-day operations is unavailable. The incident’s sphere of impact is expanding rapidly, or quick action may make it possible to limit its scope. Time-sensitive work or customer actions are affected. The incident affects high-status individuals or organizations (i.e., upper management or major clients). Unauthenticated RCE vulnerability on production instances. Immediate response from SEOC is needed. Work should continue in every region (follow-the-sun), with updates per shift in relevant channels. ~priority::1 High The fact that an indicent is still ongoing influences the urgency score. Furthermore, if credentials were leaked in the process, we need to act sooner than possible. A patched RCE vulnerability on production instances. The issue can wait until next business day. Work should continue in every assigned region, with daily updates in relevant channels. ~priority::2 Moderate Affected services are optional and used infrequently. The effects of the incident appear to be stable. Important or time-sensitive work is not  affected. A patched RCE vulnerability on production instances that is being rolled out to the wider public. No urgent action required, but actively monitored by SIRT. Work should continue in every assigned region. Updates are posted in the incident issue when needed. ~priority::3 Low Limited to no affected services. Actions being taken are cleanup or preventative. A previously revoked and investigated access token has been discovered. No action required, monitored in case the situation changes. Updates are posted in the incident issue when needed. ~priority::4 Eventually False positives kept open for review, informational notices. No action required, handled when/if SIRT has spare cycles. Updates are posted in the incident issue when needed. ~priority::5\n\nSeverity\n\nThe severity label is used to indicate the actual or potential impact and helps determine the priority of the incident. Severity should remain the highest level assessed once triage has been done. If it is determined the severity was inaccurately assessed, it should be updated with why the adjustment was made and how we arrived at that conclusion clearly documented in the issue comments.\n\nImpact Example GitLab Label Critical Severe impact to production data confidentiality, integrity or availability is likely if immediate action is not taken. Current controls do not satisfactorily mitigate the risk. Possibility of mass customer impact. Or, reputational risk is severe. ~severity::1 High Impact to production data confidentiality, integrity or availability is likely if one or more security controls are circumvented.  Current controls mitigate the initial risk. Customer impact or high likelihood of customer impact. Or, reputational risk is high. ~severity::2 Moderate Unlikely to impact production data confidentiality, integrity or availability unless multiple security controls fail or are bypassed. Current controls mitigate the initial risk. No customer impact. Or, reputational risk is moderate. ~severity::3 Low No risk to impact production data confidentiality, integrity or availability unless multiple security controls fail or are bypassed. Current controls are adequate. No risk of customer impact. Reputational risk is low or highly unlikely. ~severity::4\n\nConsiderations for determining severity\n\nThere are a few factors we take into account when determining impact. Every time we are faced with a security incident, we evaluate the scope and exposure of the risk, the confidentiality level, and more. By doing so, we split the issue into multiple, easier to assess, sub-issues. Here are a few examples:\n\nHow many of the following areas of the CIA Triad apply?\n\nConfidentiality\n\nIntegrity\n\nAvailability\n\nAffected Surface - What is the affected surface?\n\nGitLab infrastructure\n\nCustomer data\n\nCloud accounts\n\nOne particular application\n\nA customer’s instance\n\nYour own machine\n\nExploitability - How easy is it to exploit the issue?\n\nVery easily - Attacker simply needs to run a command or script to trigger the issue.\n\nRequires some effort - Attacker requires specific conditions such as someone else to be logged in to exploit the issue.\n\nDifficult - Attacker requires specific conditions that are difficult to achieve.\n\nVisibility - Who can see this issue?\n\nEveryone\n\nSomeone with specific access\n\nOnly me\n\nThe more areas of the CIA Triade that apply combined with the significance of the Affected Surface, Exploitability, and Visibility should be used to determine an estimated Severity\n\nLast modified June 27, 2024: Fix various vale errors (46417d02)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:55:26,518 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:55:26,518 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/security-operations/secops-oncall/
2024-12-07 17:55:32,516 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/security-operations/secops-oncall/'}, page_content='Security Operations On-Call Guide\n\nThe Security Operations sub-department is collectively responsible for responding to reports of actual or potential security incidents on a 24/7/365 basis.\n\nThe SIRT (Security Incident Response Team) generally responds to reports of suspicious activities (e.g. Phishing, hacking, social engineering) and security alerts.\n\nThe Trust & Safety team generally responds to reports of cryptomining, platform SPAM, abuse, bullying and violations of terms of service.\n\nPrior to scheduling planned time off, Security Operations team members should consult with the team to ensure proper coverage will be available.\n\nSecurity Operations Managers also share in On-Call responsibilities and need to ensure proper coverage for escalations and emergencies. The Security department maintains a series of On-Call escalations to ensure that every reported incident is responded to in a reasonable timeframe.\n\nOn-Call scheduling for SIRT is organized in Pager Duty within the Security Responder policy.\n\nOn-Call scheduling for Trust & Safety is organized in Pager Duty within the Trust & Safety Responder policy.\n\nOn-Call Security Handoffs\n\nTimes\n\nStandard handoff times are as scheduled. However, team members are empowered to agree on a temporary modified handoff schedule as long as all those involved agree and the team is notified about changes.\n\nSIRT (November - April)\n\n23:00 to 07:00 UTC –> APAC - 8 hours\n\n07:00 to 15:00 UTC –> EMEA - 8 hours\n\n15:00 to 23:00 UTC –> AMER - 8 hours\n\nSIRT (April - November)\n\n22:00 to 06:00 UTC –> APAC - 8 hours\n\n06:00 to 14:00 UTC –> EMEA - 8 hours\n\n14:00 to 22:00 UTC –> AMER - 8 hours\n\nSIRT times are reflected in the SIRT Handoffs calendar. In case both parties agree to change the time, this should be reflected in the calendar at least 24 hours prior to the handoff. This allows other team members the ability to adequately plan their schedules the night before. Changing the meeting time counts as a notification.\n\nTrust and Safety\n\n23:00 to 07:00 UTC –> APAC - 8 hours\n\n07:00 to 15:00 UTC –> EMEA - 8 hours\n\n15:00 to 23:00 UTC –> AMER - 8 hours\n\nSIRT Written Handoff\n\nIncident issues are the SSoT for any incident. Be sure to include any significant incident updates within the incident summaries.\n\nSIRT is using the self-developed tool Handogotchi (check promotion of Handogotchi on Tine) for written handover summaries. Handogotchi reminds the SIRT engineer on call to update incidents and add additional information one hour before handoff time. It will automatically send links to open incidents half an hour before handoff times.\n\nWritten handoffs are required to be completed at least half an hour before the end of every shift and are the basis for warm handoffs.\n\nFor all incidents, we highly encourage pausing after no longer than one hour to document and make it a general habit to keep documentation up to date after every work step. For all questions on documentation, please consult the Incident Report Writing Guide\n\nSIRT Warm Handoff\n\nSIRT uses warm handoffs to clarify written handoffs and avoid misunderstandings in complex situations. They should take no more than 15 minutes. One person per region is required (outgoing and incomming).\n\nThe outgoing region prepares the handoff as described in the section above. The incoming region should familiarize themselves with the written handoff before attending the meeting. Team members should be prepared for warm handoff meetings, so that the meetings will be efficient, with a focus on open questions and clarifications.\n\nBecause the incidents are well documented, there is no written agenda for warm handoffs. All significant discussion points that come up must be immediately documented and corrected in the incident issue.\n\nWarm handoffs are only required during the week. This is because warm handoffs would otherwise have to be performed at around midnight on weekends for EMEA.\n\nSIRT On-Call\n\nDuring all On-Call shifts, the On-Call Engineer is filling the role of the "Triage Engineer".\n\nWeekday\n\nWeekday On-Call Engineer Responsibilities\n\nSecurity Operations provides weekday On-Call coverage using a follow-the-sun model. Weekday On-Call Security Engineers are the team members that cover the On-Call responsibilities during their region’s sunny time.\n\nA Weekday On-Call shift typically covers one work week, from Monday to Friday.\n\nThe Weekday On-Call Security Engineer is expected to cover the "Triage Engineer" role, and should be the first responder to alerts and incidents as they are presented via PagerDuty and via the various Slack and alerting channels.\n\nWeekend\n\nWeekend On-Call Security Responsibilities\n\nThe Weekend On-Call Security team member will be responsible for covering On-Call responsibilities from AMER Friday evening until APAC Monday morning according to the established On-Call Security Handoff times.\n\nThe Weekend On-Call Security team member is responsible for timely responding to PagerDuty and the incident response process in accordance with the "Triage Engineer" role.\n\nDuring the weekend hours, the Weekend On-Call Security team member is not expected to be at their computer working unless they are responding to an incident, triaging alers, or working on a leadership request for critical deliverables. However, they will be asked to acknowledge any Pager Duty incidents via their mobile phone within 15 minutes, and begin triaging the incident within one hour. Priority 3 Severity 3 and below incidents can be handled by the team as weekday tasks.\n\nThe Weekend On-Call is responsible to acknowledge, and triage all alerts once a day. Resulting incidents should be either worked or delegated according to the triage guidelines. See "Alert Triage" for details.\n\nWhen there is a signficant business need, the Weekend On-Call Security team member may be responsible for ensuring continuity of critical deliverables as determined by leadership. Critical deliverables will generally consist of, but are not limited to: threat hunting and mitigation, bug fixes, cryptomining, customer impacting SPAM, or detection and response engineering to protect against credible threats.\n\nWeekend On-Call Security Scheduling\n\nWeekend On-Call slots will be filled on a volunteer basis, meaning team members can sign up for the slots that would fit their schedules. The SIRT and Trust and Safety teams will have individual Weekend On-Call schedules so that one person from each team will cover the Weekend On-Call shift. General guidance is that team members should volunteer for the appropriate ratio of qualified team members to weekends requiring coverage. For example, in a team of 12 qualified team members, volunteering for 4 to 5 weekends per year, per person would allow for full coverage. Please note, ratios may change from time to time depending on the size of the team.\n\nIf there are open remaining slots, the Security Operations managers will assign slots to team members who have not hit their target amount of slots. For example, if there’s an open slot and a team member that should volunteer for 4 to 5 slots but has signed up for 2, the Manager can allocate the slot to that team member. If the team member is unavailable, they would be responsible for finding a replacement.\n\nIn case of emergencies, managers may seek other volunteers and in rare cases may need to assign coverage.\n\nWeekend On-Call Security Relief\n\nCurrent On-Call metrics show an average of less than one weekend page per month.\n\nBecause busy On-Call weekends sometimes happen, and because the weekend on-call team member needs to triage alerts, in recognition of weekend coverage, GitLab is proactively asking team members to take the next two business days off following their Weekend On-Call shift as time off in lieu, regardless of whether the team member had to respond to an incident.\n\nWhen scheduled for the Weekend On-Call Security shift, team members should:\n\nSubmit time off in lieu for the next two business days immediately following their Weekend On-Call shift. Because this time off is intended to provide team members with immediate relief, these days cannot be moved to days later in the week or month, regardless of other planned or unplanned time off.\n\nIf a holiday or Friends and Family day falls on the next business day, time off in lieu can be taken for the subsequent two days.\n\nCommit to covering the Weekend On-Call shift. Avoid signing up for weekends you are unable to cover, or otherwise have a conflict.\n\nFind replacement coverage if you cannot commit to covering the entire weekend.\n\nSIRT On-Call Paging\n\nOn-Call Paging Workflow\n\nThe SIRT On-Call paging workflow is currently designed to follow this escalation path:\n\nThe first page goes to our incident slack channel.\n\nAll Security Engineers in the sunny region are paged after 5 minutes of no response, with one designated On-Call Security Engineer per region during the week. During the weekend, one person will have volunteered for sole responsibility of weekend coverage. The on-call page will occur either all at once, or in a round-robin fashion. Team members not designated as the On-Call Security Engineer can and should provide assistance if the On-Call Security Engineer misses the page. When weekend assistance is provided, team members should request taking time off in lieu with their manager, and target 1:1 (hour for hour) time off, immediately following the weekend as long as proper coverage is available.\n\nThe Security Operations manager in the sunny region is paged as a backup if the team members don’t acknowledge the pages.\n\nSecurity Managers who volunteer as backups are paged if SIRT does not acknowledge the previous pages.\n\nThe Security Operations Director is paged if Security Managers don’t acknowledge the pages.\n\nSIRT On-Call Paging Duties\n\nThe On-Call Engineer’s primary concern is to provide timely and adequate responses to incoming pages. When receiving a page:\n\nAcknowledge the alarm in the corresponding alert Slack channel or through PagerDuty directly.\n\nReview incident’s GitLab issue and follow the checklists posted there for triaging.\n\nIf the alarm is not acknowledged, the Security Incident Manager On-Call will be alerted.\n\nEngineers should acknowledge pages within the first 15 minutes, and start performing initial triage of potential incidents within the first hour of the initial page.\n\nSecurity Managers On-Call\n\nIn addition to the Security Engineers being On-Call, the Security Managers across the GitLab Security Department act as backups in the event the Security Engineers are unable to acknowledge security pages. PagerDuty will automatically engage the Security Manager On-Call if SIRT doesn’t acknowledge the paging attempts.\n\nIt’s the responsibility of the Security Manager On-Call to:\n\nBe available via mobile phone during their On-Call shift if the Security Engineer On-Call does not acknowledge a page.\n\nAttempt to contact the Security Engineer On-Call to acknowledge the page. Note: If Slack is not available or an alternative means of communication is required, PagerDuty has cell phone numbers of GitLab team members involved in the on-call process. GitLab also sets up a Zoom channel (#Slack Down!) as backup communication channel.\n\nIf the Security Engineer On-Call is unresponsive, attempt to contact other Engineers to take on the page. Prioritize based on timezone and region.\n\nIn the event of a high-impact security incident to GitLab, the Security Manager On-Call will be engaged to assist with cross-team/department coordination.\n\nTriage Engineer\n\nDuring On-Call shifts the Security Engineer On-Call is the Triage DRI and has these core responsibilities:\n\nAcknowledge and triage pages; delegate\n\nMonitor and triage incidents; delegate\n\nMonitor and triage alerts; delegate alerts that are for their own activity; delegate resulting incidents\n\nContinue critical assignments as determined by management\n\nWeekday only:\n\nMonitor and respond to security related slack channels; delegate\n\nImprove on-call and incident handling processes - document on-call related problems and improvement opportunities by opening issues and any necessary support tickets (e.g. Devo support).\n\nContinue ongoing work where possible\n\nTriage Engineer Responsibility to delegate\n\nDelegation allows the team to spread the workload across the global team while maintaining adequate coverage and response times. It also minimizes the risk of one single person having to handle spikes in incident volume.\n\nOn-Call Engineers must delegate incidents to other Engineers after performing initial triage.\n\nDelegation guidelines:\n\nIncidents classified with either S1, P1, S2, or P2 should only be delegated to team members available in the current sunny region.\n\nAll other incidents can be assigned to any team member not out of office in any region.\n\nSometimes, team members are working on a high-priority, time sensitive assignment and are temporarily unavailable for delegation. These situations should be communicated to the team transparently. If those team members inadvertently receive delegated incidents, they should work with their manager for assistance in incident reassignment.\n\nThe On-Call Engineer is the last resort if no other team member is available to work on high-urgency incidents.\n\nTriage Process\n\nIncident Triage\n\nIncidents are triaged by following the checklist posted by the TriageBot.\n\nAlert Triage\n\nAlert triage is a continuous task on weekdays and a task that should be done at least once a day on weekends.\n\nAny alert can be converted to an incident and assigned to another team member following the triage delegation guidelines above.\n\nIncident Ownership\n\nWhoever is assigned to the incident after the initial triage is the person responsible for incident resolution. Use the assignee field in the GitLab incident to identify the responsible person. In case of a priority 1 incident, it should have one assignee per region. In these cases, the work should continue around the globe until the incident is contained and the priority lowered. In that case, the incident should go back to only having one assignee and DRI. When multiple people work on one incident, work is divided into tasks with their corresponding assignees.\n\nOwnership of an incident means being the person responsible for:\n\nEnsuring continued progression to a contained and resolved state\n\nMaintaining ongoing 24/7 coverage of high-severity incidents\n\nAccurate and timely issue tracking and communication with stakeholders\n\nAdequate documentation and communications\n\nBeing the responsible person does not imply being the sole person to perform incident tasks. Team members from all departments can be called upon to assist in incident resolution, and these requests should be documented as a task or related issue.\n\nExceptions\n\nExceptions to this procedure will be tracked as per the Information Security Policy Exception Management Process.\n\nReferences\n\nParent Policy: Information Security Policy\n\nLast modified November 14, 2024: Fix broken external links (ac0e3d5e)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:55:33,164 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:55:33,164 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/security-operations/sirt/security-incident-communication-plan/
2024-12-07 17:55:39,205 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/security-operations/sirt/security-incident-communication-plan/'}, page_content='Security Incident Communications Plan\n\nThis is a Controlled Document\n\nIn line with GitLab’s regulatory obligations, changes to controlled documents must be approved or merged by a code owner. All contributions are welcome and encouraged.\n\nPurpose\n\nGitLab takes the security of our clients’ information extremely seriously, regardless of whether it’s on GitLab.com or in a self-managed instance. In keeping with GitLab’s value of transparency we believe in communicating about security incidents clearly and promptly.\n\nScope\n\nThis communication response plan maps out the who, what, when, and how of GitLab in notifying and engaging with internal stakeholders and external customers on security incidents. This plan of action covers the strategy and approach for security events which have a ‘high’ or greater impact as outlined in GitLab’s risk scoring matrix.\n\nRoles & Responsibilities\n\nRole Responsibilities GitLab Team Members Responsible for following the requirements in this procedure SIRT Responsible for implementing and executing this procedure SIRT Management (Code Owners) Responsible for approving significant changes and exceptions to this procedure\n\nProcedure\n\nWhat is an incident?\n\nThe GitLab Security team identifies security incidents as any violation, or threat of violation, of GitLab security, acceptable use or other relevant policies. You can learn more about how we identify incidents in the GitLab security incident response guide.\n\n💁 Corporate incident response\n\nFor Support or Infrastructure managed incidents where external communication guidance is needed, please see the corporate communications incident response plan and engage that team via #corp-comms in slack.\n\n👷 Infrastructure incident response\n\nFor Infrastructure incidents, please follow the infrastructure incident management and communication process.\n\nDefining the scope/severity of an incident\n\nThe Security Engineer On-Call will determine the scope and severity and potential impact of the security incident. Once the potential impact has been determined, implementation of the appropriate internal and external communications strategy should begin.\n\nRoles and responsibilities in a Security incident\n\nSecurity team roles and responsibilities\n\nRole Responsibilities Security Engineer on Call (SEOC): This is the on-call Security Operations Engineer. The individual is the first to act, validate, and begin the process of determining severity and scope. Security Incident Manager on Call (SIMOC): This is a Security Engineering Manager who is engaged when incident resolution requires coordination across multiple parties. The SIMOC is the tactical leader of the incident response team, typically not engaged to perform technical work. The SIMOC assembles the incident team by engaging individuals with the skills, access, and information required to resolve the incident. The focus of the SIMOC is to keep the incident moving towards resolution, keeping stakeholders informed and performing SecCMOC duties. Security Communications Manager on Call (SecCMOC): This is the Security Incident Manager On-Call (SIMOC), Security Incident Commander or Security Assurance Engineer who will coordinate external communications efforts according to this security incident response plan and liaise across the extended GitLab teams to ensure all parties are activated, updated and aligned. Security External Communications: This function partners with and advises incident response teams in reviewing and improving messaging for external audiences (including customers, media, broader industry). This role laises with marketing teams for any necessary reviews or messaging deployment. This function should be engaged once first draft content has been developed using the Security incident external response issue template .\n\nMore about the CMOC responsibilities\n\nAs security practitioners and incident response engineers, our security assurance and security operations teams and engineers are best positioned to develop initial messaging and serve in the CMOC/Communications manager on call role.\n\nEach team-appointed CMOC is the DRI for:\n\nOpening the Security incident external response issue template and tagging in potential stakeholders and contributors\n\nDrafting the initial message(s)\n\nTracking development and deployment of the various content and\n\nIdentifying key stakeholders for contribution, review and approval (support, security/SIRT leadership, legal, etc)\n\nRouting and securing approvals from various parties (support, security/SIRT leadership, legal, etc)\n\nKeeping stakeholders updated and informed on the progress of communications development in the related incident response slack channel and issue(s)\n\nMore about the Security External Communications function responsibilities\n\nThe Security External Communications function is the DRI for:\n\nEditing and improving first drafts provided by CMOC\n\nAdvising on appropriate channels and forms of communication needed\n\nActing as an approval point on final messaging to ensure it’s ready for external use\n\nLiaising with PR and corporate communications for additional reviews and/or messaging needs (public/media statements)\n\nDeploying the messaging via collaboration with our PR (media statement), Content Marketing (blog post) and Marketing Operations teams (email response)\n\nPosting final communications materials to slack channels (#developer-relations, #social_media_action, #sales, #security-department and #customer-success) for awareness and use.\n\nSupport manager on call will manage support team awareness\n\nExtended team roles, responsibilities and points of contact\n\nMarketing Operations: Responsible for sending incident-related email to impacted parties in a security incident. This group has established a Marketing emergency response process and is engaged by creating an incident communication request using the incident_communications template, tagging in the assigned timezone’s coverage owner and posting the issue in the #mktgops channel in Slack.\n\nMarketing Ops can send emails through MailGun or Marketo. This group will determine based on the information provided what the best platform is for distribution. If a custom distribution list needs to be created, the data team may need to be involved.\n\nSupport Team: Using background information and prepared responses provided by the Security Engineer On Call and Communications Manager On Call, our Support Team will triage and respond to customer communications stemming from the security incident. Contact the on-call manager via #spt_leadership in Slack. If it’s urgent page the Support Manager On-call using /pd-support-manager command in Slack. To ensure this group has early awareness on security incidents and events they are autotagged as an FYI in the security-external-incident-or-event-response template.\n\nDeveloper Relations: May need to respond to customers and the general public via social channels, as such should be engaged before public-facing materials are released. Any prepared responses or FAQs should be provided to assist with their interactions. Contact this group in #developer-relations or any Slack channel by pinging @devrel-team. To ensure this group has early awareness on security incidents and events they are autotagged as an FYI in the security-external-incident-or-event-response template.\n\nDesignated Approvers: This is the group of individuals who act as reviewers and approvers across each piece of communications developed for a security incident. It includes representatives from Security, Support, Customer Success, Legal, Corporate Communications and Investor Relations.\n\nCommunicating internally\n\nSecurity incidents can be high-pressure, high-stress situations. Everyone is anxious to understand the details around the investigation, scope, mitigation and more. Ensuring that stakeholders across security, infrastructure, engineering and operations teams are informed and engaged is one of the chief responsibilities of the Security Incident Manager On Call. The Security Incident Manager On Call should focus on providing high-level status updates without delving too deeply into the technical details of the incident, including:\n\nCurrent Risk\n\nUsers Impacted (some, many, all?)\n\nServices Impacted (production, enterprise apps, other)\n\nTimeline of events\n\nMitigation steps that have been taken\n\nCurrent status of the incident\n\nNext steps\n\nCommunicating with GitLab team members\n\nAny time there is a service disruption for team members, the CMOC should post details regarding the disruption and related issue(s) in #whats-happening-at-gitlab, and cross-post in any related channels. It is important to identify if this is a production incident affecting gitlab.com or a service used by the organization.\n\nIncident response channel on Slack\n\nIn the cases of incidents that are on-going and require constant communication the Security Engineer on Call will set up an incident response Slack channel. All security incident team members and extended POCs should be invited. If the nature of the incident allows, the Slack channel will be public to GitLab and a link to this channel will also be shared in #security-department Slack channel to increase visibility.\n\nEngaging key internal stakeholders (when/how)\n\nGroup & Contacts When to Engage DRI to Engage At what Cadence In what Channel Director of Security Operations For S1 incidents immediately upon determination of the S1 severity rating SIMOC/CMOC 30 minute intervals (unless otherwise requested) In incident response Slack channel VP of Security For S1 incidents immediately upon determination of the S1 severity rating Director of Security Operations 30 minute intervals (unless otherwise requested) Slack direct message Broader e-group Immediately in cases of a data breach or an RCE with evidence of exploitation VP of Security 30 minute intervals (unless otherwise requested) #e-group Slack channel Sr. Director of Corporate Marketing and Director of Corporate Communications Immediately, if the incident has been publicly reported or if there is a regulatory requirement to make an announcement. In other cases, once the full impact and associated risk has been determined. SIMOC/CMOC Continuous In incident response Slack channel Legal If GitLab EE customers are impacted, or if the security incident includes a data breach including but not limited to: Exposure of PII / Personal Data Private Projects Financial Information VP of Security Continuous Incident response Slack channel Designated key approvers As soon as we know we’ll need to communicate with customers CMOC Continuous Incident response Slack channel\n\nCommunicating externally\n\nExternal communications should happen as soon as possible after the scope and impact of the security incident is determined, using concise and clear language. The first external communications are directed to affected parties. Examples include: Affected customers and third parties (including JiHu), providers of products, services or organizations involved in the supply chain for system components as related to the incident. Regulatory authorities are contacted based on incident scope, regulatory and legal requirements.\n\nTurnaround on customer messaging\n\nOnce it has been determined that external response is needed, the SIRT team should aim to develop, gain approval on a final customer communication and distribute and/or publish within 6 hours for an S1 severity vulnerability.\n\nProcess for security incident external communications\n\nOnce we’ve determined that we need to make an external statement or communicate with customers in some way, open a new issue using the Security incident external response issue template. This issue will be used by the SIMOC/SecCMOC to track content development, reviews and approvals.\n\nThe new security incident external response issue should be assigned to the SecCMOC.\n\nOnce all the actions under the “CMOC actions to take upon opening this issue” section are completed and a first draft(s) is/are in place, tag @heather into the issue for first review and consult on communications forms/channels (more details below).\n\nCommunications review, approval and deployment process\n\nOnce all of the various suggested communications is ready, the SecCMOC should tag @heather in the related security incident external response issue and security incident slack channel for first round review and edits.\n\nIn parallel, our Security External Communications team will engage the appropriate marketing teams for support (PR, Marketing Ops, Content teams) and begin creating the related issues for parallel marketing support and message deployment efforts.\n\nWhen Security External Communications has completed their review, the SecCMOC should route the communication doc to the designated key approvers as outlined below for their collaboration and review; being sure to note the time at which all approvals must be achieved (targeted deployment time is 6 hours, and includes 1-2 hours for information gather and communications drafting, and 1 hour of deployment time for blogs to be published and emails to be deployed). At this time, the designated key approvers have 30 minutes to review and make any necessary edits to the doc. Reviews must be provided or a stand-in appointed within this 30 minute time limit.\n\nOnce all feedback and edits have been synthesized by the SecCMOC, the designated key approvers should be tagged in slack for their final review and approval. This review and approval process should take no more than 30 minutes and approvers should mark their approval in the approval matrix at the top of the working incident response comms google doc.\n\nWhen the communication(s) is/are final, our Security External Communications will work with the appropriate marketing and communications teams to deploy the communications to the appropriate external and internal audiences.\n\nOur Security External Communications will ensure all final materials and associated deployment details are noted in the related communications issue and close the issue.\n\nDesignated key approvers\n\nOur intent is to provide clear and accurate information to GitLab users as quickly as possible. In the case of an S1 (critical) vulnerability, the targeted turnaround time on approved and deployed communications is 6 hours. Because of this accelerated response window, our security team (SecCMOC or Incident Commander) will announce the targeted cut-off time for approvals at the beginning of the review and approvals process (6 hours from the start of communications drafts) and will move forward, if needed at that time, when at least 2 of the 4 required groups (Security, Legal, Customer Success and Investor Relations) have approved. See below for more information.\n\nGroup Blog Customer Email FAQs for Support Teams Media Response Social/Forum Response VP of Security Approver Approver Approver Approver if quote attributed to Security, FYI otherwise FYI Only Senior Director of Legal, Privacy and Product Approver Approver Approver Approver Approver VP Customer Success Approver Approver FYI Only Approver FYI Only Support Manager on Call FYI Only FYI Only FYI Only FYI Only FYI Only Director of Corp Comms FYI Only FYI Only FYI Only DRI/Contributor FYI Only VP of Investor Relations Approver Approver FYI Only Approver FYI Only\n\n**Note**\n\nSee this confidential issue for contact details\n\nDesignated back-up approvers (engaged if primary reviewer is unavailable or unresponsive)\n\nFor the “required” approvers, we need at least 2 designated back-up approvers.\n\nSecurity: If VP Security is not available, one of the Security directors may approve, if not available move to VP of Engineering.\n\nLegal: Senior Director of Legal, Privacy and Product can approve. If not available, then move to Legal Counsel, and then move to CLO.\n\nCustomer Success: VP Customer Success can approve. If not available, Snr Director, Customer Success Managers, then Director of Customer Success, Public Sector.\n\nSupport Team: Support Manager on call can approve. If not available, move to a member of Support Senior Leadership, then to Support Managers if needed.\n\nCorporate Comms: Director of Corp Comms can approve. If not available, move to Manager, Public Relations and then move to Manager, Corp Comms if needed.\n\nInvestor Relations: VP of Investor Relations can approve. If not available, move to Chief Financial Officer, and then move to VP Finance and Business Technology for back-up approval.\n\n**Note**\n\nSee this confidential issue for contact details.\n\nAgreed upon response time for designated key approvers\n\nDesignated key approver response time: 30 minutes\n\nPer our crisis comms firm and GitLab’s Corporate Incident Response plans, each approver has 30 minutes to respond and review communications (providing feedback or edits) before we engage back-ups. Once feedback from the approvers has been received, reviewed and consolidated, a final review from approvers will be requested and each approver has 30 minutes response time to provide their approval. If we are nearing the established deploy time for communications and a given teams’ review and approval is not achieved within 30 minutes, we will move forward to finalization and deployment once we have approval from at least 2 of the 4 required groups (Security, Legal, Customer Success and Investor Relations). See below for more information.\n\nContacting designated key approvers on an urgent basis\n\nSee this confidential issue for more information on how to contact designated key approvers.\n\nEngaging designated backUp approvers\n\nIf 30 minutes has passed and the SecCMOC has not heard from a specific designated key approver, we move to engage all of that individual’s designated back-up approvers in the incident-related slack channel and issue. If we are nearing the established deploy time for communications and a given teams’ review and approval is not achieved within 30 minutes, we will move forward to finalization and deployment once we have approval from at least 2 of the 4 required groups (Security, Legal, Customer Success and Investor Relations).\n\nCommunications channels and forms\n\nThe communications channels and forms that should be used in an incident or event can vary but should align with our need to be responsive to our customers and our transparency value, and be balanced with the potential risk and exposure to customers.\n\nCommonly used forms and channels of communication:\n\nOur most common form of customer response is via direct email communications to affected customers.\n\nWhen a deeper dive response is needed, or to ensure broader coverage on a security incident or event, a blog post may be developed on an urgent basis.\n\nSee deeper dive explanations on forms and channels for consideration\n\nCommunication to JiHu should happen via the #security-vulnerability channel within the JiHu Slack workspace. GitLab team members Dominic Couture, James Ritchey, Jerome Ng, Mek Stittri and Kevin Chu have access to this channel.\n\nHelpful templates and runbooks\n\n👉 Our Security external incident or event response template (this is an internal template) has links to templates that can be used (make a copy)to start various communications.\n\n📝 Security incident communications runbooks are located here (internal only).\n\nPreparing and enabling external facing teams\n\nIt is important to keep in mind, any time we are communicating externally, we need to advise our support, customer, social and developer relations teams that we’ll be making external communication about an issue that affects customers and/or the community.\n\nFor this reason, each incident response (direct email, media statement, blog post, etc) should have accompanying:\n\nSocial media statement\n\nFAQs for our Support and customer-facing teams\n\nOn-going, live incidents on GitLab.com\n\nFor on-going, live site incidents on GitLab.com, updates are provided by the SIMOC/CMOC through status.io to https://status.gitlab.com/ and the @GitLabStatus twitter handle.\n\nExternal statements and other public, official communications\n\nDepending on scope, impact or risk associated with the incident, our Corporate Communications and Marketing team may determine that additional outreach is necessary. Any official statements about the security incident would be made by GitLab’s Director of Corporate Communications, VP of Corporate Marketing, CMO or VP of Security.\n\nOther helpful information\n\nPotential channels for use in a security incident\n\nCommunications Channels Purpose/Message Additional Details Incident Response Customer Email Provides incident background, response, potential, impact, follow-up actions, and who to contact with questions. Drafted by SIMOC/CMOC and reviewed by DRIs from Support, Legal, External Comms and Security. Sent from incident-response@gitlab.com . Should be in plain text with no link tracking . If an accompanying blog post is published, blog should be linked. Mitigation and response blog post Details the background, GitLab response and any action required by our customers. Developed when it is determined that a longer, more-in-depth response is needed, Content for the blog post is provided by the SIMOC/CMOC , and reviewed and approved by designated key approvers . The content team performs copyedits and merges. Note: collaboration and work on the response blog post should happen in the related incident response channel on slack. GitLab Security Release Alert/Email Indicates required action for customers and links to related mitigation and response blog. Email sent to opt-in security notices distribution list. If a related blog post has been published, this email should include a link. Prepared and sent by Security External Communications or Marketing Ops , Sent to Security Notices distro through Marketo. Users can sign up for this distribution list through our Communication Preference Center . Customer Frequently Asked Questions (FAQs) List of early customer questions and responses, or probable questions and responses. Created by SIMOC/CMOC and Support DRI. Provided to appropriate Support group . Social media post For distribution of related blog post, details our response to X issue. Security External Communications engages @devrel-team in the incident response Slack channel. Provides Community Expert(s) with tweet text and blog link. GitLab social media team should also be alerted for ongoing awareness and monitoring, using @social in slack.\n\nSync meetings to develop and review customer communications\n\nWhen appropriate, key stakeholders for contribution, review and approval should meet synchronously in a Zoom session to create and fine-tune customer communications (emails, FAQs, blog post, etc). Meeting synchronously in this case allows us to expedite the development of communications with key inputs from stakeholders in security, customer support and beyond and quickly move into the review stage. These zoom sessions are recorded and will be linked into the related security incident external response issue.\n\nExceptions\n\nExceptions to this procedure will be tracked as per the Information Security Policy Exception Management Process.\n\nReferences\n\nParent Policy: Information Security Policy\n\nSecurity Incident Response Guide\n\nSecurity Communications Runbooks (internal)\n\nIncident Communications Plan\n\nMarketing Emergency Response process\n\nTime-sensitive blog post process\n\nMarketing rapid response process\n\nSample issue template for security incident communications review and approvals (publicly-accessible)\n\nThis sample issue template can used be to route, review and track approvals on the communications surrounding critical security incidents. As this is a sample, you would need to adjust/modify/tailor as necessary to suit your own organization’s structure, processes and needs. Given that each organization is different and critical security incidents may vary, GitLab cannot guarantee any results with respect to your use of the template.\n\nLast modified September 18, 2024: fix-headings length per https://gitlab.com/gitlab-com/content-sites/handbook/-/issues/340#top (16808ce7)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:55:40,622 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:55:40,622 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/security-operations/sirt/security-shadow-security-operations/
2024-12-07 17:55:46,801 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/security-operations/sirt/security-shadow-security-operations/'}, page_content='Security Shadow: Security Operations\n\nCompletion of each course you will receive a certificate. At the completion of all 3 courses your name will be recognized on this page.\n\nSecurity Incident Response Team (SIRT)\n\nGitLab’s Security Incident Response Team is the first line of defense for the GitLab SaaS and GitLab as an organization. The primary goal of SIRT is to minimize and control damage from security incidents. This is accomplished through the development and deployment of detection tools to identify when a security incident has occurred, taking action to identify and contain the event to limit its scope and impact, remediating the underlying issue that led to the security event, and recovering from the security event so that operations can return to normal. In addition to responding to incidents, the SIRT works to proactively prevent security incidents through the management and deployment of cyber defense tools, ensuring compliance with security best practices for our infrastructure and team members, and maintenance and training around the incident response process.\n\nSchedule / Topics Covered:\n\nSIRT101.1: Intro to Incident Response\n\nSIRT101.2: Log investigation\n\nSIRT101.3: Detection, triage, remediation\n\nSIRT101.4: Hands-on SIRT Team Exercise\n\nCourse Length: 4 days, 8 hours\n\nTeam Manager: Valentine Mairet @vmairet, Matt Coons @mcoons\n\nTrust and Safety\n\nHave you ever debated why something is right or wrong, questioned a rule and wondered how to get around it? Do you prefer the uneasiness of ambiguity over the monotony of always knowing what to do? If you answered yes to the above, Trust and Safety might be the place you discover what happens behind the curtains… or not, who knows?\n\nThe Trust and Safety teams’ purpose is to try and ensure that users of GitLab.com operate within the scope of the GitLab Website Terms of Use, more specifically, our Acceptable Use Policy (AUP). As the name implies, the AUP is a policy that governs what the business has deemed to be the acceptable use of GitLab.com. The AUP mainly consists of 3 parts:\n\nCompliance: Ensuring that we are enforcing the relevant laws and regulations that are applicable to GitLab.com.\n\nThese are non-negotiable and include things like complying with the DMCA and removing illegal content.\n\nPrinciples: Ensuring that GitLab.com is not used in a way that negatively impacts others.\n\nThis is primarily based on our Values and include things like removing content that is concidered harmful and protecting others privacy.\n\nGoal: Ensuring that GitLab.com is not used in a way that would negatively impact our Vision.\n\nThis is primarily used to ensure that GitLab.com is used for it’s intented purpose, and to reduce any negatvie impact caused by an unintended and/or unforseen use of it.\n\nIf you think this is something you would be interested in learning about, maybe even do one day, come join us for a crash course in understanding the world of the Trust and Safety team!\n\nSchedule / Topics Covered:\n\nTS101.1: What we do and why - Introduction\n\nTS101.2: How we do it - Tooling and Workflows\n\nTS101.3: Hands-on Experience\n\nCourse Length: 3 days, 6 hours\n\nTeam Manager: Charl de Wit @cjdewit\n\nEnrollment\n\nReady to enroll? Click here for more information.\n\nLast modified July 9, 2024: Fix links and spelling (e30f31b6)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:55:47,300 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:55:47,300 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/support/readiness/operations/docs/policies/project_setup/gitlab_folder_setup/
2024-12-07 17:55:53,240 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/support/readiness/operations/docs/policies/project_setup/gitlab_folder_setup/'}, page_content='.gitlab folder setup\n\nSupport Operations policies page for setting up the .gitlab folder\n\nThe exact setup will depend on who is managing the project.\n\nEveryone in Support Readiness\n\nCreate a folder named .gitlab\n\nCreate a file in that folder named CODEOWNERS\n\nMake the contents the following:\n\n[Support Operations]\n* @jcolyer @nabeel.bilgrami @avilla4 @dtragjasi @secole @rverschoor\n\nUS Citizens only\n\nCreate a folder named .gitlab\n\nCreate a file in that folder named CODEOWNERS\n\nMake the contents the following:\n\n[Support Operations]\n* @jcolyer @secole\n\nZendesk Global Support Contributions Project\n\nCreate a folder named .gitlab\n\nCreate a file in that folder named CODEOWNERS\n\nMake the contents the following:\n\n[Support Managers]\n* @gitlab-com/support/managers\n\nZendesk US Government Support Contributions Project\n\nCreate a folder named .gitlab\n\nCreate a file in that folder named CODEOWNERS\n\nMake the contents the following:\n\n[Support Managers]\n* @JamesRLopes @lbot\n\nLast modified January 18, 2024: Support Readiness Handbook Revamp Part 1 (dc7e3936)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:55:53,745 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:55:53,745 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/campaigns/template/
2024-12-07 17:55:59,723 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/campaigns/template/'}, page_content='[NAME] Campaign\n\nEverything you need to know about the [NAME] campaign.\n\nCampaign Overview\n\nBusiness Objectives\n\nCampaign Visual\n\nMURAL goes here\n\nCampaign Pages & Activities\n\nSee the FY22 Marketing Calendar for upcoming virtual events\n\nAlways On Lead Generation:\n\n📚 Content |\n\n📹 On-Demand Webinar |\n\nResearch & Prep\n\nPersona & Positioning\n\nLevel:\n\nFunction:\n\nKeyword Research\n\nPolished Messaging\n\nBuyer Journeys, Content & Emails\n\nPrescriptive Buyer Journeys\n\nIndividual Contributor\n\nAwareness Content:\n\nConsideration Content:\n\nDecision/Purchase Content:\n\nManager\n\nAwareness Content:\n\nConsideration Content:\n\nDecision/Purchase Content:\n\nMarketo Nurture Emails\n\nOutreach Emails\n\nBehind the Scenes\n\nCampaign Execution Documentation & Resources\n\n[Campaign Epic]()\n- [Project timeline plan (GANTT)]()\n- [Copy Doc]()\n\nLast modified July 29, 2024: Fixing more formatting issues caused by the handbook migration (9b5eccc2)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:56:00,207 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:56:00,207 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/engineering/development/incubation/cloud-seed/
2024-12-07 17:56:05,555 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/engineering/development/incubation/cloud-seed/'}, page_content='⛅🌱 Cloud Seed\n\n⛅🌱 Cloud Seed\n\nGitLab is the one DevOps platform. Teams use GitLab (SaaS or self-managed) for development, planning, collaboration and automation. However, digital transformation is incomplete without cloud adoption.\n\nThus, Cloud Seed — a collaboration with Google Cloud — makes it trivial to consume cloud services from GitLab.\n\nCapabilities\n\nGenerate Google Cloud Service Accounts\n\nService accounts are authentication credentials that can be generated from the GitLab web interface\n\nUsed for a wide range of integrations and automation with Google Cloud services\n\nDeploy to Google Cloud Run\n\nCloud Run is a fully managed deployment platform for containerized applications\n\nSetup automated deployments to Cloud Run via the GitLab web interface including support for Preview Environments\n\nEvery Git commit, branch and tag is automatically deployed to the appropriate Cloud Run service environment\n\nProvision Google Cloud SQL databases\n\nProvision popular database instances easily from the GitLab web interface\n\nSupport all major versions of PostgreSQL, MySQL and SQL Service\n\nGenerate instances, databases and users to be used with deployment and test automations\n\nEnvironment (i.e. Git ref) aware database provisioning\n\nUsecases\n\nCloud native development with automated deployments to Cloud Run\n\nCloud migration and app modernization with Cloud SQL relational databases\n\nPositive business outcomes (grouped by persona)\n\nList of user personas with specific benefits they actualize:\n\nCompliance Manager, Security Analyst, Security Operations Engineer\n\nSecure, standardized deployment pipelines across the organization\n\nGitLab-Google Cloud driven authorization and permission model\n\nProduct Manager, Product Designer\n\nPreview environments to validate feature branches\n\nDevelopment Team Lead, Software Developer, Platform Engineer, Software Engineer in Test\n\nContinuous deployment for all Git commits, branches and environments\n\nEasy deployment automation and database provisioning\n\nPreview environments to validate feature branches\n\nSystems Administrator, Infrastructure Operator\n\nSecure, standardized deployment pipelines across the organization\n\nPrincipled GitOps with application source and infrastructure state\n\nApplication Ops, Release Manager\n\nStandardized pipelines for release automation\n\nSupport for feature, test and production release environments\n\nApplication Development Director\n\nIncrease Operational Efficiencies\n\nDeliver Better Products Faster\n\nReduce Security and Compliance Risk\n\nJobs to be Done\n\nDeploy web applications\n\n☑️ Authentication and authorization\n\n☑️ Deployment credential generation\n\n☑️ Provisioning and enablement of cloud services\n\n☑️ Deployment pipelines\n\n☑️ Preview environments\n\nProvision cloud data stores\n\n☑️ Authentication and authorization\n\n☑️ Database instance generation\n\n☑️ Database and user setup\n\n⏳ Networking configuration\n\nOpen source\n\nCloud Seed is an open-source program led by GitLab Incubation Engineering.\n\nSign up for the invite-only Trusted Testers platform and try out Cloud Seed before anyone else.\n\nEveryone can contribute\n\nThere are several ways one may contribute to Cloud Seed. These are listed below:\n\nBecome a Cloud Seed Trusted Tester in GitLab and share feedback\n\nIf you are familiar with Ruby on Rails and/or Vue.js, consider contributing to GitLab as a developer. Much of Cloud Seed is an internal module within the GitLab code base\n\nIf your familiarity lies with GitLab pipelines, consider contributing to the Cloud Seed Library project\n\nIf your expertize is in Google Cloud APIs and Google Cloud technologies, reach out to us, we need you!\n\nLinks\n\nCloud Seed\n\n@OpenCloudSeed on Twitter\n\nCloud Seed documentation\n\nSign up for the invite-only Trusted Testers platform\n\nSubmit feedback\n\nDemos\n\nRidiculously simple deployments\n\nPreview Environments\n\nDatabases Proof-of-Concept\n\nLast modified November 26, 2024: Fix broken external links (bc83f2be)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:56:06,136 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:56:06,136 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/leadership/1-1/
2024-12-07 17:56:12,121 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/leadership/1-1/'}, page_content='1-1\n\nMaintaining an effective and efficient agenda is important to get the best out of the 1-1 (read as: one to one) meetings you have with your team members. Furthermore this page will take you through other tips and tricks to conduct an effective 1-1 meeting.\n\nThe 1-1 Agenda\n\nMake sure you use a consistent agenda format for each 1-1.\n\nBoth parties add items to the agenda. Preferably, the majority added by the team member. If the manager puts more than half of the items on the agenda this is an indication that something is wrong.\n\nReference the suggested format for leadership as necessary.\n\nConducting a 1-1\n\nWe recorded a training about 1-1s which you can find here:\n\nIt’s advisable to schedule 1-1’s at least once a week. The choice of synchronous or asynchronous meetings can be made by the manager and their direct report, depending on their preferences and needs. To avoid prolonged periods without face-to-face communication, it is preferable for the manager and their direct report to have a minimum of two regularly scheduled synchronous 1-1s every month, barring any PTO or leave from work.\n\nFor example, some managers schedule 1-1s on alternating weeks, with one week for synchronous meetings and the next week for asynchronous meetings. This approach allows for more dedicated focus time and aligns with our priority of emphasizing asynchronous communication.\n\nCreate a Google doc as the agenda and set the sharing settings exclusively between you and the team member. This should not be a public document because performance feedback should be as private as possible.\n\nFrom High Output Management (edited sightly for language):\n\n“A key point about a one-on-one: it should be regarded as the reports’s meeting, with its agenda and tone set by them … issues that preoccupy and nag the individual contributor.”\n\nHow often you should have 1-1 meetings: “The answer is the job- or task-relevant maturity of each of your individual contributors. In other words, how much experience does a given report have with the specific task at hand?…the most effective management style instance varies from very close to very loose supervision as a report’s task maturity increases.”\n\nBill Campbell, executive coach to top executives at Google, had a suggested approach to the 1-1. Instead of leaving the conversation open, he required both the manager and the team member to bring a list of 5 things to discuss. At the start of the meeting, they would match lists and talk about whatever is on both lists first. After that, they would spend time on 4 topics – performance on job requirements, relationships with peer teams, leadership and innovation.\n\nIf you have negative or positive feedback give it right away rather than waiting for the 1-1. However, make sure bi-directional feedback is given at least as often as the 1-1 meeting. The face to face 1-1 is also useful for feedback that the person may be especially sensitive too, or is being given for the second time and needs to be taken more seriously.\n\nIt’s important not to push times of the 1-1’s for “more important” tasks. Book them and ensure you always are on time. Similarly, canceling a 1-1 should be a last resort. The exception to this is talent acquisition interviews. If participating in an interview schedule, reschedule the 1:1 with as much advance notice as possible, but prioritize the interview.\n\nOne communication style does not fit all. Some need very direct feedback. Others work better with FYI style information to then come to the conclusion you want them to come to on their own. Others work well with clear goals, but without a clear prescription as to how to reach the goal. Great managers can adapt their style to the report.\n\nIt is common to start with a bit of small talk. You can also consider starting with asking how are you as a person?\n\nThe end of the meeting is a good time to ask questions people might be hesitant to answer. People will often reveal their important information at the end of a conversation. Use this to get information about things that are bothering them about other people in the company, including you as a manager. Ask a question like ‘How can I make your life better?’ or ‘How’s the team and the work with other people?’. Don’t put this question on the agenda in advance. Since it is the end of the meeting it might be needed to add it to the agenda to discuss in the next meeting.\n\nSetting and managing expectations is maybe your most important task. Both the managers expectations of the work done by the report and the reports expectations about the work and company.\n\nReports tend to assume that they must do everything added by the manager, make it clear that they can push back (not a good idea, not worth the time), and redirect (please handle it directly with this person, can you arrange for this). You want to prevent the agenda piling up. The manager will put items on the agenda because it is in the functional area of the report and the manager doesn’t want to bypass them. But in case the manager cares about something and the report doesn’t it might be preferable for the manager (or an executive assistant) to do the work.\n\nActively listen to identify what the direct report is saying. The manager should strive to do 20% of the talking while the direct report does 80%.\n\nIf you have few items on the agenda from the report try the following questions:\n\nIs there anything that needs clarity?\n\nWhat are you most proud of/excited about?\n\nWhat can I (your manager) improve on?\n\nAnything you think important that happened since the last 1-1\n\nWhat are potential troubles you see for the team\n\nWhat are potential troubles you see for the company\n\nWhat went well since last week?\n\nWhat went not so well since last week?\n\nIs there anything I can do to help?\n\nAnything non-work related worth mentioning?\n\nWhen x happened, what will you do differently next time?\n\nHave you identified any career development opportunities that I can help you with? For example: Internship for Learning\n\nOther great questions to consider can be found in the Culture Amp Blog: 24 great one-on-one meeting questions or in 15Five’s The Great eBook of Employee Questions.\n\nConsider encouraging direct reports to keep their 1:1 document open in their browser throughout the week. As items come up, they can add them in real time instead of waiting until 30 minutes before the meeting to scramble to fill in the agenda.\n\nAsking open ended questions is important. “You doing alright?” is a yes/no question. There is no room for an answer unless you dig and prod to get more. Instead asking things like “Tell me how you’ve been doing since we last talked” leave more room for discussion and result in something both more actionable and results driven. Your goal is not just to know how they are doing, but why they feel that way.\n\nConsider populating the agenda to the 1-1 meeting at least 24 hours in advance of the meeting. This will enable the direct report and manager mental space to think more critically about each topic.\n\nLearning From the CEO on Conducting a 1-1\n\nThe Learning & Development team and the CEO, discuss conducting a 1-to-1 in more detail during a handbook learning session.\n\nCareer Development Discussion at the 1-1\n\nWe recorded a training about career mapping which you can find here:\n\nThese discussions should take place once a month and after the 360 Feedback meeting has taken place. As a manager of people you play a crucial part in developing careers for your reports. This is for them but you should be able to support this process and help them achieve their goals. This is a join collaboration so prior to the meeting think about what questions to ask, specifically identifying competencies(c), skill gaps(sg) and career objectives (co). Adrienne Smith who wrote increase employee retention with career pathing suggests the following:\n\nWhich projects are you most proud of that you’ve finished here? (c)\n\nWhat is your favorite part of your job? (c)\n\nWhich projects have you struggled with most in this role? (sg)\n\nWhat’s your least favorite part of your day-to-day? (sg)\n\nWhen do you ask for help most often? (sg)\n\nWhat parts of your role do you want to do more of? Less of? (co)\n\nWhat don’t you do in your current role that you’d like to? (co)\n\nWhat would you like to learn next? (co)\n\nOnce you have established the goals you can then create a career development plan\n\nWhy career development for team members is key to being a great leader\n\nProviding team members with a clear path of advancement within the group, department or division that includes career development opportunities is a win-win-win for team members, managers and GitLab. Team members who are challenged, engaged and who are actively contributing relevant solutions stay with organizations. An engaged workforce allows the department and divisions to meet their current and future needs for talent and skills and increases performance and decreases regrettable attrition.\n\nPlease make sure as a manager you have reviewed the Career Development Section in the handbook\n\nThere are many reasons that career development conversations are important. Below are a few examples though there are many more reasons.\n\nIncrease team productivity and performance\n\nFor managers, having career development conversations offers them a chance to help develop team members which then has an impact on the overall organization. It’s a critical skill for those serious about increasing their teams’ productivity and performance. Development conversations will help the group, department, division and GitLab retain great team members, which at the end of the day also contributes to the manager’s own success.\n\nBuild a bench of high contributors\n\nOn top of increasing performance, these career development conversations allow managers to build a bench of top talent contributor and create a succession pipeline. This will help reduce worries about losing top talent and who the team can turn to for critical tasks. Good managers know that if you have a strong bench, you have a lot less to worry about.\n\nBe a great leader\n\nWhen it comes down to, it the best managers or leaders — the ones that team members want to have and are happy continue being part of the team. These are the managers that take an interest in their team members lives and career. By learning about what your team members wants, what they strive for and by being able to help them drive to their goals, you will build credibility, trust and respect. This in turns also contributes to your overall success as a manager.\n\nAttract, engage and retain top talent\n\nA managers’s job is not to just drive to OKRs and performance. It is also to attract, engage and retain top talent team members and maximize their contribution to the group, department or division. If you are interested in your team members aspirations, success and what motivates them, you will attract top talent because people will want to work for you. Once you get great team members on board, you will need a plan to get them and keep them engaged. Career development can be and should be one of the ways you as a manager invest your time and energy to help drive engagement, performance and results.\n\nPreparing for a team member’s performance and development conversation\n\nCareer conversations do not have to be intimidating\n\nCareer development conversations are vital for the team members, managers and GitLab’s success. However, not all managers are prepared to address career development due to either lack of experience in having these conversations or a fear that the conversation will be difficult or unpleasant. Here are a few other reasons that managers may avoid having these conversations:\n\nCareer development conversations will take up time they do not have and create more work\n\nTeam members will want different roles or opportunities on an unrealistic timeframe\n\nTeam members will have aspirations that do not match their current skill level\n\nTeam members will take conversations about their career as a promise of a promotion\n\nTeam members will leave after they have developed new skills\n\nNot discounting these concerns, but as a manager it is your job to engage team members in meaningful career development conversations.\n\nIf a team members expectations or timeframe is unrealistic, you can explore having them use their time to find opportunities that will engage and prepare them for when their opportunities arise. If they are ready for promotion but the opportunity is not in scope or plan for the business it is best to be transparent with the team member. Discuss any timeline of if/when a position may be available or if there is no plan currently to add that role. You can also work with the team member to look for internal opportunities like internship or cross collaborative projects to help keep the team member engaged while continuing in their role.\n\nIf a team members expresses career ambitions that are beyond their current skill set, then that is an opportunity to talk about the next level skills and experience that might help prepare them to get them where they want to go. If your department or division has job matrices or competencies this is a good time to review those with the team member. Technical skills are only one part of the team members ability to continue to grow and succeed. If there are issues with attitude and behaviors this is a good time to also share what the team member needs to work on in regards soft skills as part of their career growth and development.\n\nIf you are concerned that your career development conversation could be construed as a promise of a promotion, focus the conversation around skills gap development and opportunities. Try to focus on the things needed now rather than focusing on a specific time frame.\n\nIt is possible that some team members may leave for other opportunities after they acquire a new skill set. However, it is even more possible that they will leave if they believe you or GitLab is not interested in their career aspirations or development. Engaging in meaningful career development conversations show that you as a manager care about them personally and their future development.\n\nPreparing for the discussion\n\nStrengths and wins\n\nAs a manager part of your job is to learn more about the team members you manage. What are their skills, interests and career goals? The tone of the career development conversation should be transparent, encouraging, curious and show that you are interested and invested in the team member. Spend some time before you have a conversation to think about the following:\n\nThe team members key strengths, skills and wins\n\nThe team members engagement level\n\nWhat are opportunities for their development\n\nCurrent level of skills in technical or functional areas\n\nWhat are their strong leadership competencies or behaviors\n\nCareer development conversations shouldn’t be done on a whim or just “winging it,” but instead these should be thought out and conversations that you prepare for ahead of time. You should come prepared to offer team members feedback, offer suggestions and to ask pertinent questions.\n\nWhat questions might team members ask?\n\nTeam members want feedback on their strengths, performance and their potential within GitLab. Be prepared to answer the following questions:\n\nWhat you say are my top strengths or top skill?\n\nWhat skills should I build on?\n\nAre you aware of any development opportunities that would be helpful for me?\n\nI see this as my career path, what career path do you see based on my skills?\n\nShould I be gathering career development feedback from others?\n\nSince you are already having regular 1:1s with your team member you may have ideas regarding your team members development aspirations. Plan ahead and take the time to think about what questions they may ask and come prepared to the conversation.\n\nHaving the discussion\n\nMaintain the right frame of mind\n\nComing to the meeting with an open mind and the willingness to learn more about the team members career development aspirations will set the right tone for the conversation.\n\nA best practice could be having the team member start the meeting by expressing their goals for the conversation. Your job as a manager is to listen and understand their desires and help them explore options that may be available for reaching those goals. Try and refrain from interjecting, let the team member finish before you start talking. Try not to be judgemental on what they say, different people will have different career goals and it is important to respect their ideas. However, this can also be a time for you to provide them with feedback, suggestions, recommendations and guidance. It can also be an opportunity for you to connect them with different people within GitLab and additional resource that support their identified career path.\n\nAs a manager you should follow up on the goals and activities you both identify. This will show the team member that you do listen and have a vested interest in their future success. Also, career conversations should not be a one-time annual conversation. A best practice is to meet at least quarterly for a check-in. Keep in mind some team members may want to meet more often and some less frequently.\n\nBe open about your own career goals and development\n\nIf asked, share your career goals with your team members. This transparency shows that you are not only willing to hear their career goals, but you are also willing to share your own career path. That could also include discussing with your team members the areas that you have identified to focus on in the future. Be open about questions regarding your own career path and experiences to date. Your team member may be able to take away some valuable lessons that you have learned in your own journey.\n\nAdditional resources\n\nBelow are several recommended articles regarding career development conversations.\n\n5 business reasons to put employee career development at the top of your agenda\n\nCareer Development Mentoring Benefits\n\nWhy Employee Development is Important, Neglected and can Cost You Talent\n\nIf You’re Not Helping People Develop, You’re Not Management Material\n\nBolt’s Developing Your Team section from their Managing our team playbook.\n\nKey Points\n\nActively Listen. Self-assessment is difficult and people often overestimate or underestimate their skillset. Don’t be quick to discount their assessment. Look for common ground and focus on understanding their overall goals.\n\nControl. Maintain control of the conversation to ensure it stays on track. The focus should be on their current skillset and abilities and how to cultivate those for a career path within the company.\n\nAdaptation. Adapting your approach to different personality types is key. People that overestimate their skillsets should be given specifics on where they do, and don’t, meet expectations. They may need areas of failing to be pointed out more plainly (but always caringly). Those that underestimate their skillset may need more emphasis on what they are doing right as they tend to focus on the negative. Also, not everyone wants to advance. Some are very happy in the role they are in and want to stay there. That should also be supported. Learn more in our Learning & Development Handbook.\n\nTransitioning 1-1s\n\nWhen taking over management of an existing team member, consider the following guidelines to ensure the team member experiences a psychologically safe transition.\n\nManager Transition Meeting\n\nIn an effort to be transparent, managers should consider ensuring that all of the information provided to the future manager by the current manager is done in full view of the team member. This might not work for all team members. You should ask whether the team member will feel comfortable having this conversation openly, and respect their boundaries. When choosing to remain transparent, schedule a transition meeting and follow the Manager Transition Meeting Agenda.\n\n1-1-1 Transition Schedule\n\nThe following schedule can ensure a smooth transition:\n\nCurrent Manager: Create a 1-1-1 and invite the team member and the future manager\n\nPrior to the meeting get approval from the team member to share the existing 1-1 doc (and other feedback documents) with the future manager. Or, if they request start a new 1-1 document and share it with the team member and the future manager. This will give the future manager an opportunity to review in advance of the meeting.\n\nTeam Member: If a new 1-1 document was started, transfer any relevant content\n\nGroup: Continue 1-1-1s for up to a month (if needed)\n\nNew Manager: Remove the former manager from calendar invites and the 1-1 document\n\nAbrupt 1-1 transitions can threaten a team member’s sense of psychological safety and career stability. If this is a concern, consider scheduling follow-on 1-1-1 transition meetings.\n\nManager Transition Meeting Agenda (example)\n\nAttendees\n\nTeam Member:\n\nCurrent Manager:\n\nFuture Manager:\n\nIntroduction\n\nTEAM MEMBER, in the coming weeks I will transition management support to FUTURE MANAGER. This is an opportunity for you to comment, agree, and disagree with how your performance, feedback, professional goals, growth areas, and 1:1 document content is shared with FUTURE MANAGER. We want to ensure you have a complete picture of the information we share. The goal is to make sure we’re transparent in the transition of your career, how you want to grow, and how I can support you.\n\nWe understand that this meeting format may feel a bit awkward as we will openly discuss your work performance. This is all in the service of the goal to fully support you.\n\nAgenda\n\nIntroductions and reason why this manager transition is happening.\n\nReview most recent performance evaluations, OKRs, and goals.\n\nShare any additional feedback since recent reviews.\n\nAre there any follow-on 1-1-1 transition meetings needed?\n\nShadowed 1-1\n\nShadowing a 1-1 is a scenario in which a GitLab team member attends the 1-1 of their manager and their manager’s manager. The intent of this model to provide trust through transparency, build connections between team members and leaders who they may not otherwise interact with regularly, and open opportunities for collaboration be providing a broader knowledge to team members. The shadowed 1-1 is exemplified by Sid by having the CEO Shadows attend 1-1s with his direct reports.\n\nAgenda\n\nPortions of the agenda will be suitable for sharing and others will not. Care should be taken to separate items that could breach our communication guidelines or potentially reveal confidential information. A suggestion on how to handle this would either be to not share the agenda with the shadow(s) or have a separate agenda for private items, these are just suggestions.\n\nAttendees\n\nAttendance could be limited to direct reports but could also include other people. A suggestion might be to have a sign up for attendance and, in order to maintain the relationship and support expected to arise from 1-1 meetings, alternate shadow weeks with non-shadowed weeks. Suggest having a separate zoom link for shadowed 1-1s.\n\nExample\n\nAn engineering manager decides to open up their 1-1 meetings to their team. The engineering manager checks with their manager that this is acceptable and determines a plan for review. When a shadow will be present, this should be indicated clearly on the agenda. Utilising a separate zoom link, all 3 people join and walk through the agenda. Participation level of the team member is up to the regular participants of the 1-1 but, consider encouraging engagement. At a point where sensitive topics need to be discussed, the team member will be asked to leave.\n\nLeadership Engagement Check-Ins\n\nLeadership Engagement Check-Ins, (also known as Stay Interviews) are conducted to help leadership improve retention in their teams. It helps them understand why team members stay and what might cause them to leave. In a Leadership Engagement Check-In, people managers ask standard, structured questions in a casual and conversational manner.\n\nProcess\n\nCadence: Schedule your Engagement Check-In at least every 6 months with each of you direct reports. People leaders can repurpose a scheduled 1-1 meeting;\n\nFormat: Use sync communication via Zoom;\n\nPreparation: Preparation should be done before the meeting by the manager and the team member. The manager should set expectations with their team members prior to the meeting to ensure that the team member feels as comfortable as possible heading into the conversation. Managers can include a copy of this Handbook page so their direct report is fully aware of the specific questions that will be asked during the call. Ask the team member to review the questions and think about them prior to the call. Allow them the opportunity to type responses before the meeting if they wish to do so.\n\nQuestions: Have a look at the below questions and take notes during the meeting.\n\nFollow up: At the end of the conversation summarize and follow up on any actions.\n\nStructure\n\nOpening\n\nStart the conversation by explaining the purpose of the meeting and why it’s important to you as a manager. An example is below.\n\n“Thanks for taking the time to have this check-in conversation. Team member engagement is very important to me, and this talk is a way to better understand how things are going for you and how I can help to improve your experience at GitLab. I would like to talk with you about the reasons you stay with GitLab so I understand what I can do to make this a great place to work for you.”\n\nQuestions\n\nIt’s important to listen and gather feedback from the team member about how they feel about GitLab in an objective manner:\n\nWhat do you like most about your job?\n\nWhat do you like least about your job?\n\nHow would you describe a great day at work?\n\nWhat motivates you to stay at GitLab?\n\nWhat would make you consider leaving GitLab?\n\nIf you could change one thing about your job, team or company, what would it be?\n\nWhat can I do to support you?\n\nScenarios (situations and reactions)\n\nTeam member has expressed the desire to stay at GitLab and is engaged\n\nI am so pleased to hear GitLab is a great place for you and really value your input going forward.\n\nIn case there’s a change in your feelings I want to make sure you can always speak up, even outside of these engagement check-ins.\n\nTeam member expressed both reasons to stay but also reasons for leaving\n\nI really want to thank you for your valuable input and feedback.\n\nSummarizing what we have discussed I would love to work on an engagement plan so that we can make sure GitLab is a great place to work for you.\n\nLet’s follow up in one week and prepare items we can work on to improve your experience at GitLab.\n\nTeam member expressed mostly reasons why they consider leaving and isn’t engaged\n\nI really want to thank you for your valuable input and feedback.\n\nLooking at your concerns I would love to work on an engagement plan so that we can make sure GitLab becomes a great place to work for you.\n\nLet’s follow up in one week and prepare items we can work on to improve your experience at GitLab.\n\nOther scenarios\n\nIf you have a scenario different from the above, and/or you need help with messaging, please work with your manager or People Business Partner.\n\nClosing\n\nTo close the Engagement Check-In, summarize the key points discussed, and work with the team member to develop an engagement plan (if applicable). Be sure to end on a positive note. An example is below.\n\n“Let me summarize what I heard you say about the reasons you stay at GitLab, as well as reasons you might leave. Then, let’s develop a plan to make this a great place for you to work. I appreciate you sharing your thoughts with me today. I am committed to doing what I can to make this a great place for you to work.”\n\nIf, during the Engagement Check-In, issues arise around health, performance, compensation, etc. and you need assistance, please work directly with your manager or your People Business Partner.\n\nFollow Up\n\nAfter the call has closed, capture some notes about what was discussed and share with the team member to ensure you heard their feedback correctly. It is important to do this for all team members - even if they had positive feedback about their engagement level.\n\nFor team members who had positive feedback, you will want to continue to find opportunities that align to things that make for a positive experience for them. For team members that had constructive feedback, you will want to use your notes as a start of an engagement plan.\n\nSuggested 1:1 Agenda and Daily Standup Format\n\nThis page describes the recommended 1:1 agenda format, and is based on how Sid formats his 1:1 agendas. It also captures how this format is modified for daily standup agendas. If you are new to 1:1s or not sure how to make your previous experience with 1:1s work in GitLab’s culture, this can be a great starting place for you to learn.\n\nRemember that 1:1s are private meetings between a manager and their report, so consistency is secondary to effectiveness - please make sure to find a format that works for you and your team.\n\nLast modified November 26, 2024: Fix broken external links (bc83f2be)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:56:12,997 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:56:12,998 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/support/readiness/operations/docs/gitlab/1-1_issue_generator/
2024-12-07 17:56:19,176 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/support/readiness/operations/docs/gitlab/1-1_issue_generator/'}, page_content='1-1 issue generator\n\nSupport Operations documentation page for the 1-1 issue generator\n\nWhat is the 1-1 issue generator\n\nThe 1-1 issue generator is a project created in house to assist in the creation of GitLab issues for use in 1 on 1 meetings. This uses a customizable formatting and various APIs to gather details and present it in a way that is useful to both manager and report.\n\nThe source code for it is located here.\n\nHow does the 1-1 issue generator work\n\nThis all works utilizing ruby scripting and GitLab CI/CD. The CI/CD component of this is straight forward, in that it has 4 stages and they run the ruby scripts within the project.\n\nTest stage\n\nThis stage runs the ./bin/test file within the repo. That file tests for the following:\n\nIs the YAML file able to be parsed?\n\nDo comment YAML files contain the ticket_review boolean?\n\nDo comment YAML files contain the comments array?\n\nAre the template files readable by an ERB renderer?\n\nIf any of the above answers are no, then the test stage will fail, preventing the CI/CD from running further. This is used to prevent merging bad files into the repo.\n\nGather stage\n\nThis stage runs the ./bin/gather file within the repo. That file runs the gather function within the Generator::Client class.\n\nThe Generator::Client.gather function obtains various data points spanning from:\n\nZendesk Global\n\nZendesk US Federal\n\nPagerduty\n\nGitLab.com\n\nIt combines all this data into an artifact file.\n\nReport stage\n\nThis stage runs the ./bin/daily_report file within the repo. That file takes the artifact made in the Gather stage and commits it to the Daily reports repo.\n\nCreate stage\n\nNote: While previous stages ran for multiple people, some jobs in this stage will only run for a single person at a time.\n\nThis stage will run one of three different jobs:\n\nweekly_report: This creates 1-1 issues for weekly use\n\nmonthly_report: This creates an issue covering a month’s worth of data\n\nquarterly_report: This creates an issue covering the current quarter’s worth of data\n\nAll of the jobs that run will call to a file in the repo that will link to various functions relating to the job itself. While there is some variance in how the three run, overall they all gather data from the Daily reports repo and then pass it into an ERB template file. This is then compiled into a gitlab.com issue via the GitLab API.\n\nWhen does 1-1 issue generator run\n\nBy using GitLab CI/CD schedules, we have the following set to run at various intervals:\n\nName What it does When it runs Gather metrics Runs the Gather stage Daily at 0100 UTC Create 1-1 Issues Runs the Create stage Daily at 0300 UTC\n\nChange management\n\nAs these are maintained via sync repositories, our standard change management process applies to all 1-1 issue generator changes. See standard change management for more information.\n\nLabels to use\n\nFor all issues and MRs involving 1-1 issue generator, the label Support-Ops-Category::GitLab Projects should be used.\n\nChange criticality\n\nAs this is an internal tool with no direct impact, all issues/MRs related to 1-1 issue generator will be classified as criticality 4\n\nLast modified June 27, 2024: Remove heading levels exception and fix errors (4e6ac4e3)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:56:19,804 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:56:19,805 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/create-cluster-101/
2024-12-07 17:56:25,785 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/create-cluster-101/'}, page_content='101 - Creating Kubernetes cluster\n\nObjective: Manually creating a Kubernetes cluster to use with Auto DevOps in GitLab\n\nYou will need Kubernetes cluster up and running in order to use GitLab Auto DevOps feature. This is a step by step guide to help you to manually create a Kubernetes cluster in Google Cloud Platform.\n\nMore details Auto DevOps\n\nPreparation\n\nYou need a Google Cloud Platform account, GitLab employees will have this. Ensure you are logged in with your GitLab account.\n\nSteps to create Kubernetes cluster\n\n| Step | What it looks like | | 1. Open a browser and login to Google Kubernetes Engine | | 2. GitLab employees - Sign-in using your GitLab email. | | | 3. GitLab employees should use the gitlab-demos project. Others should select or create a project to work in.| | | 4. Under COMPUTE on the side bar select Kubernetes Engine -> Clusters.| | | 5. Click CREATE CLUSTER. | | | 6. Set name for your cluster. GitLab Product and Solution Marketing employees, the naming convention is sm_<yourname>, or, if you are in the Product Marketing sub-group use pmm_<yourname>, or for the Technical Marketing group use tmm_<yourname>. Keep the overall name short (up to 16 chars). Set the number of nodes to 3, and expand the page for additional settings.| | | 7. GitLab employees should select the ‘demonet’ network in Networking. Others should select or create network. | | | 8. Enable legacy authorization. | | | 9. You are ready to create the cluster, click Create. | | | 10. It will take a few minutes to create the cluster, once it is created, you will see your just created cluster on the list.| | | 11. Now you are ready to integrate your GitLab project with Kubernetes, and use the Auto DevOps feature. | 12. Cleanup steps PLACEHOLDER ||\n\nLast modified June 27, 2024: Fix various vale errors (46417d02)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:56:26,222 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:56:26,223 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/101/
2024-12-07 17:56:32,016 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/101/'}, page_content='101 - No Tissues with Issues\n\nObjective\n\nA quick overview of how to plan and manage regular work using GitLab. The focus of this page is to help you learn how to work with Groups, Projects, Issues and Boards to plan and manage the your work and your team’s work.\n\nNote: If you are only looking for instructions on how to submit an Issue, feel free to skip forward to Issues in Action.\n\nThe Big Picture\n\nOrganizing\n\nGitLab provides Groups, Sub-Groups and Projects to structure your organization’s work and grant access to several members at once. For example,\n\nGroup - Account Management\n\nSub-group - Regions - AMS, EMEA, APAC\n\nProject - Countries - North America (within AMS), France (within EMEA), Singapore (within APAC)\n\nDefining\n\nGitLab allows you to group related work in the form of epics, sub-epics and issues - which are the smallest unit of work. For example,\n\nEpic - Annual Business planning\n\nSub-epic - Quarterly Business planning (e.g., Q1, Q2, Q3, Q4)\n\nIssues - Plan for Individual Customers\n\nPlanning\n\nGitLab facilitates planning your work with roadmaps with a start and end date, milestones and labels. For example,\n\nGroup Roadmap - Timeline for your annual business planning\n\nGroup Milestone - Key milestones during your planning - e.g., Start and end dates for Q1, Q2, Q3, Q4 planning\n\nProject Milestone - Deployment milestones for a specific customer\n\nDoing the work\n\nProjects can be used strictly for Issue Tracking, or for development of technology projects including source code, build, test, deploying applications.\n\nBringing it all together\n\nThe Details\n\nGitLab Groups\n\nIn order to manage multiple projects (portfolios of projects), the GitLab Group is the entity that enables strategic planning and tracking of business initiatives through delivery. At the Group Level, you can manage sub-groups, projects, epics, milestones, roadmaps and group level boards. Groups With GitLab Groups you can assemble related projects together and grant members access to several projects at once. Groups can also be nested in subgroups.\n\nGitLab “Project”\n\nThe project in GitLab is the core building block, where work is organized, managed, tracked and delivered. A project in GitLab enables the team to collaborate and plan their work in the form of Issues (use cases/requirements), Issue boards (Kanban), and Milestones (Sprints). With Projects in GitLab, you can create projects for hosting your codebase, use it as an issue tracker, collaborate on code, and continuously build, test, and deploy your app with built-in GitLab CI/CD. Your projects can be available publicly, internally, or privately, at your choice. GitLab does not limit the number of private projects you create.\n\nThe GitLab Project is much, much, much more than simply project management. The GitLab project unlocks the power of an industry leading source code management repository and a CI/CD pipeline. The Merge Request is the linkage between the issue and the actual code changes. The merge request captures the design, implementation details (code changes), discussions (code reviews), approvals, testing (CI Pipeline), and security scans.\n\nGroup vs Project\n\nGroup\n\nGroups are like ‘folders’\n\nProject\n\nProjects have many ’things’ like issues, repositories, merge requests, etc.\n\nHands on: Explore Groups and Projects\n\nLink to the GitLab Marketing Group\n\nLink to www-gitlab-com Project\n\nGitLab 101 Exercise Group and Projects This group (subgroups and projects is for GitLab 101 exercises)\n\nLabels\n\nThe label in GitLab is a flexible and powerful mechanism to tag and track work. Labels are used to define columns in the issue boards and make it easy to search and find issues or merge requests related to a common theme. Labels can be defined at EITHER Group or Project level\n\nLabels allow you to categorize issues or merge requests using descriptive titles like bug, feature request, or docs. Each label also has a customizable color. Labels allow you to quickly and dynamically filter and manage issues or merge requests you care about, and are visible throughout GitLab in most places where issues and merge requests are located.\n\nHands on: Explore Group and Project Labels\n\nExplore these two examples of Labels:\n\nLink to Group Label List in the GitLab 101 Group\n\nLink to GitLab 101 ABM Sample Project Label List\n\nCreate a Label in this project GitLab 101 ABM Sample Project\n\nIssue\n\nThe issue in GitLab is the fundamental planning object. It is where the team documents the use case in the description, discusses the approach, estimates the size/effort (issue weight), tracks actual time/effort, assigns work, and tracks progress. Labels enable the team to tag issues, track status, and associate issues with different initiatives. Issues are part of a Project\n\nIssues Issues can have endless applications. For example, Issues can be used to; Discuss the implementation of a new idea, Submit feature proposals, Ask questions, Report bugs and so on.\n\nIssues in Action: Common Use Cases\n\nIssues are appropriate for almost any type of interaction or request—feature suggestions, bug reports, general discussions, and more. Whatever an Issue’s purpose, to use it effectively, the author must communicate two things:\n\nThe intended audience\n\nThe information necessary to allow the audience to respond asynchronously\n\nThe exercises below provide best practices for communicating both.\n\nHands on: Create an Ad Hoc Issue\n\nSince Issues live in Projects, the first step to creating an issue is locating the appropriate Project for your topic and audience. In this example, we’ll be creating an ad hoc, free-text issue, asking a question of the Account Based Marketing Team in the GitLab101: Account Based Marketing Sample Project. To create the Issue:\n\nVisit the main Project page.\n\nClick the Issues link in the left-hand nav to view the Issues List.\n\nClick the green New Issue button in the top-right corner of the screen.\n\nAdd a Title that summarizes your question or comment\n\nType your comment or question in the Description field, as you would an email. The field supports Markdown, which you can preview as you type.\n\nYou can @mention stakeholders or other interested parties to send them notifications and To-Do list items from this Issue. For this exercise, @mention yourself, to avoid spamming your coworkers with a test message.\n\nAssign the issue to yourself. This issue will now be linked to your current Issue list, accessible by clicking the Issues icon at the right corner of the purple toolbar at the top of the page.\n\nIMPORTANT: Due to our Transparency value, the default View setting for Issues is public. If your issue contains customer information or other sensitive data, check the checkbox next to “This issue is confidential and should only be visible to team members with at least Reporter access.”\n\nClick the green “Submit Issue” link.\n\nCongratulations! You’ve just created an issue. You should receive an email summarizing your Issue, and you can add to the Issue’s conversation simply by replying to that email.\n\nCommonly-used group Issue Boards include:\n\nCorporate Marketing\n\nProduct and Solution Marketing / Product Marketing\n\nHands on: Create a Templated Issue\n\nTo minimize the amount of back-and-forth required to provide all necessary information for complex requests, Project owners have created Issue templates for the most common use cases. These templates provide a description of all necessary information and formatting to complete a request. In many cases, they also provide a checklist for the author to review before submitting.\n\nWhen submitting a templated issue, please take the time to read the entire description and respond to any checkboxes ([ ]) before submitting.\n\nFor this exercise, we will create a Sales Enablement request using the Enablement template.\n\nTo request an Enablement session:\n\nVisit the Product Marketing Group page.\n\nClick the Issues link in the left-hand nav to view the Issues List.\n\nClick the green New Issue button in the top-right corner of the screen.\n\nSelect Enablement from the Template drop-down menu and click the orange Apply Template button.\n\nFill out details in each section (for example, “Learning Objectives / Key points”) as completely as you can, adding additional items or removing unused bullets as necessary.\n\nIdentify stakeholders and other interested parties using @mentions as in the previous exercise.\n\nAdd a Due Date if you have one. This does not guarantee that work will be delivered by this date, but it adds context for the Project owner who receives and triages this request.\n\nDo not remove or modify the /label code at the bottom of the issue. This will assign appropriate Labels to ensure proper routing.\n\nDo not assign the issue. This will delay the processing of your request. Each Group within Product and Solution Marketing has a process to triage and assign issues.\n\nSince this is an active project, DO NOT click the green Submit Issue button unless you are actually requesting an Enablement session.\n\nOther common templated use cases include:\n\nRequesting Assets\n\nCase Studies: Create a new issue in the Corporate Marketing Group and apply the Customer_Story_Kickoff template.\n\nNew Content / Collateral (e.g., white papers): Create a new issue in the Corporate Marketing Group and apply the content-resource-request template.\n\nSwag: Create a new issue in the Corporate Marketing Group and apply the BulkSwagRequest template.\n\nRequesting People\n\nTechnical Evangelist support: Create a new issue in the Corporate Marketing Group and apply the technical-evangelist-request template.\n\nRequesting Event Sponsorship / Support\n\nEvent sponsorship: Create a new issue in the Corporate Marketing Group and apply the Corporate-Event-Request template.\n\nVirtual event sponsorship: Create a new issue in the Corporate Marketing Group and apply the Virtual_Sponsored_Event template.\n\nAccount Support and Access\n\nFor common licensing, customer access, and technical support issues, please visit the handbook’s Internal Support page for access to the appropriate issue templates.\n\nBoards\n\nBoards provide a flexible and dynamic approach to visually manage a project. Boards make it easy for a team to create lists and move issues from one list to another. List on the board can be defined by a label, assignment, or milestone. Here, teams can manage their backlog of work, prioritize the items, and then move the issues to the team or specific stage in the project. Each list in the board calculates the total size (weights) of the associated issues, enabling the team to understand how much work is assigned at any given time. Boards are available for EITHER Group or Project\n\nProject Issue Boards The GitLab Issue Board is a software project management tool used to plan, organize, and visualize a workflow for a feature or product release. It can be used as a Kanban or a Scrum board. It provides perfect pairing between issue tracking and project management, keeping everything in the same place, so that you don’t need to jump between different platforms to organize your workflow. With GitLab Issue Boards, you organize your issues in lists that correspond to their assigned labels, visualizing issues designed as cards throughout that lists.\n\nThe group level issue board makes it possible for oversight and governance of the projects and sub groups. This view, makes it easy to see how specific issues are flowing through the lifecycle and to understand the overall capacity of the teams.\n\nHands on: Play with boards\n\nTodd’s CMO board is a group level board, where labels define the lists: https://gitlab.com/groups/gitlab-com/marketing/-/boards/906226\n\nThe Product and Solution Marketing Sales Enablement board: https://gitlab.com/gitlab-com/marketing/product-marketing/boards/918030\n\nThe Plan/ Milestone board, where the lists are defined by Milestones: https://gitlab.com/groups/gitlab-org/-/boards/706864\n\nThe Plan Backend assignment board, where the lists are defined by who will be doing the work on a specific release: https://gitlab.com/groups/gitlab-org/-/boards/631316\n\nCreate an BOARD in this Project : Account Based Marketing\n\nMilestones\n\nMilestones establish a target date for a sprint or specific bundle of issues and code changes to be delivered. The milestone enables the team to either set a specific Start and Stop for the work, as in a Sprint, or the milestone could be a fixed point in time. Milestones are EITHER Group or Project\n\n| Milestones in GitLab are a way to track issues and merge requests created to achieve a broader goal in a certain period of time. Milestones allow you to organize issues and merge requests into a cohesive group, with an optional start date and an optional due date. | ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ |\n\nGroup Level Planning\n\nEpics\n\nIn order to track groups of related issues, the GitLab epic gives product owners and leaders the ability to link and manage work over an extended time frame. Planning work use Epics allows you to create parent and child epics. An epic can span multiple milestones and makes it easier to manage the overall flow and priority of work. Epics are GROUP ONLY\n\n| Epics let you manage your portfolio of projects more efficiently and with less effort by tracking groups of issues that share a theme, across projects and milestones | |\n\nRoadmaps\n\n| The roadmap is a visual representation of the various epics for the group. The roadmap view can be filtered by label and organized by start / stop date of the epics in order to visualize the sequence of work. At this point, GitLab doesn’t create dependencies between issues or epics. | ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ |\n\nLast modified July 29, 2024: Fixing more formatting issues caused by the handbook migration (9b5eccc2)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:56:32,967 - vector_db.py - ERROR - Error indexing documents in Faiss: Tried to add ids that already exist: {'0'}
2024-12-07 17:56:32,968 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/103/
2024-12-07 17:57:17,531 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:57:17,532 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:57:18,168 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:57:18,841 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:57:52,715 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:57:52,716 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 17:57:53,310 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:57:53,864 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 17:57:58,485 - service.py - INFO - Processing URL: https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:57:58,486 - service.py - INFO - URL https://handbook.gitlab.com/sitemap.xml is identified as a sitemap.
2024-12-07 17:57:58,486 - service.py - INFO - Processing sitemap: https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:57:58,486 - service.py - INFO - Fetching sitemap from https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:58:01,004 - service.py - INFO - Successfully fetched sitemap from https://handbook.gitlab.com/sitemap.xml
2024-12-07 17:58:01,256 - service.py - INFO - Extracted 3788 URLs from the sitemap.
2024-12-07 17:58:01,257 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/values/
2024-12-07 17:58:08,797 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/values/'}, page_content='GitLab Values\n\nLearn more about how we live our values at GitLab\n\nCREDIT\n\nGitLab’s six core values are 🤝 Collaboration, 📈 Results for Customers, ⏱️ Efficiency, 🌐 Diversity, Inclusion & Belonging, 👣 Iteration, and 👁️ Transparency, and together they spell the CREDIT we give each other by assuming good intent. We react to them with values emoji and they are made actionable below.\n\nAbout our values\n\nWe take inspiration from other companies, and we always go for the boring solutions. Our CEO, Sid Sijbrandij, has shared the origin of each of the CREDIT values, but just like the rest of our work, we continually adjust our values and strive to make them better. GitLab values are a living document. In many instances, they have been documented, refined, and revised based on lessons learned (and scars earned) in the course of doing business.\n\nWe used to have more values, but it was difficult to remember them all. In response, we condensed them, created an acronym (CREDIT), and listed operating principles to guide behavior.\n\nEveryone is welcome to suggest improvements. Please assign MRs to update these values to our CEO Sid and @mention him in Slack if you work at GitLab Inc. or on Twitter if you don’t.\n\nDriving Results with CREDIT from GitLab on Vimeo.\n\n🤝 Collaboration\n\nTo achieve results, team members must work together effectively. At GitLab, helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve. Similarly, you can rely on others for help and advice—in fact, you’re expected to do so. Anyone can chime in on any subject, including people who don’t work at GitLab. The person who’s responsible for the work decides how to do it, but they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented.\n\nKindness\n\nWe value caring for others. Demonstrating we care for people provides an effective framework for challenging directly and delivering feedback. Kindness doesn’t mean holding back on feedback or avoiding disagreements, these are crucial to professional growth and getting results for customers. Kindness means you make a separation between the work and the person, you can criticize someone’s work but still be respectful to the person. Give as much positive feedback as you can, and do it in a public way.\n\nShare\n\nThere are aspects of GitLab culture, such as intentional transparency, that are unintuitive to outsiders and new team members. Be willing to invest in people and engage in open dialogue. For example, consider making private issues public wherever possible so that we can all learn from the experience. Don’t be afraid of judgement or scrutiny when sharing publicly, we all understand it’s impossible to know everything.\n\nEveryone can remind anyone in the company about our values. If there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions.\n\nShare problems you run into, ask for help, be forthcoming with information and speak up.\n\nNegative feedback is 1-1\n\nGive negative feedback in the smallest setting possible. One-on-one video calls are preferred.\n\nNegative feedback is distinct from negativity and disagreement. If there is no direct feedback involved, strive to discuss disagreement in a public channel, respectfully and transparently.\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nWe deal with negative all the time at GitLab. If it’s not a problem, then why are we discussing it? We deal with negativity a lot, and that’s also part of our ambition.\n\nIf you want to get better, you talk about what you can improve. We’re allowed to publicly discuss negative things; we’re not allowed to give negative feedback in a large setting if it could be feasibly administered in a smaller setting.\n\nNegative feedback can be given in a group setting if it’s to someone higher in the management chain. This shows that no one is above feedback. GitLab co-founder and CEO Sid Sijbrandij and former CTO Eric Johnson discuss this in this GitLab Unfiltered video.\n\nProvide feedback in a timely manner\n\nWe want to solve problems while they are small. If you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer), please voice your concerns rather than keeping them to yourself. If you need to escalate beyond your manager, you could consider speaking to your skip-level, a more senior person, or a people business partner.\n\nSay thanks\n\nRecognize the people that helped you publicly, for example in our #thanks chat channel.\n\nWhen publicly thanking, it’s important to recognize the following:\n\nShowing thanks in as large a setting as possible (company-wide) at a company as large as ours is the exception instead of the norm, it takes some getting used to.\n\nBeing thanked at the company level for what you view as a relatively small or minuscule contribution can feel awkward.\n\nThanking a person in #thanks should be done sincerely and summarize why you are thankful so the person on the receiving end can easily understand why they are being thanked. Even while assuming positive intent, not all folks are comfortable with public praise. Help this person understand how they went above and beyond and why you felt it was important for the team member to be recognized.\n\nThere are a number of good ways and places to say thanks. We shouldn’t limit saying thanks to just the #thanks channel.\n\nGive feedback effectively\n\nGiving feedback is challenging, but it’s important to deliver it effectively. When providing feedback, always make it about the work itself; focus on the business impact and not the person. Make sure to provide at least one clear and recent example. If a person is going through a hard time in their personal life, then take that into account. An example of giving positive feedback is our thanks chat channel. For managers, it’s important to realize that team members react to a negative incident with their managers six times more strongly than they do to a positive one. Keeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself. In the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the team member’s performance going forward. Give recognition generously, in the open, and often to generate more engagement from your team.\n\nGet to know each other\n\nWe use a lot of text-based communication, and if you know the person behind the text, it will be easier to prevent conflicts. So we encourage people to get to know each other on a personal level through informal communication, for example, virtual coffee chats, and during GitLab Contribute.\n\nReach across company departments\n\nWhile it’s wise to seek advice from experts within your function, we encourage GitLab team members to do the same across departments. This enables the company to iterate more quickly, embrace the understanding that everyone can contribute and include more diverse perspectives when possible.\n\nDon’t pull rank\n\nIf you have to remind someone of the position you have in the company, you’re doing something wrong. People already know our decision-making process. Explain why you’re making the decision, and respect everyone irrespective of their function. This includes using the rank of another person - including the CEO - to sell an idea or decision.\n\nAssume positive intent\n\nWe naturally have a double standard when it comes to the actions of others. We blame circumstances for our own mistakes, but individuals for theirs. This double standard is called the Fundamental Attribution Error. In order to mitigate this bias, you should always assume positive intent in your interactions with others, respecting their expertise and giving them grace in the face of what you might perceive as mistakes.\n\nWhen disagreeing, folks sometimes argue against the weakest points of an argument, or an imaginary argument (e.g. “straw man”). Assume the points are presented in good faith, and instead try to argue against the strongest version of your opponent’s position. We call this arguing against a “steel” position, instead of a “straw” one. This concept is borrowed from argue the “steel man” technique.\n\nA “steel” position should be against the absolute most effective version of your opponent’s position — potentially even more compelling than the one they presented. A good “steel” position is one where the other person feels you’ve represented their position well, even if they still disagree with your assumptions or conclusion.\n\nAddress behavior, but don’t label people\n\nThere is a lot of good in this article about not wanting jerks on our team, but we believe that jerk is a label for behavior rather than an inherent classification of a person. We avoid classifications.\n\nSay sorry\n\nIf you made a mistake, apologize as soon as possible. Saying sorry is not a sign of weakness but one of strength. The people that do the most work will likely make the most mistakes. Additionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to be repeated by someone else. Mistakes can include when you have not been kind to someone. In order to reinforce our values, it is important, and takes more courage, to apologize publicly when you have been unkind publicly (e.g., when you have said something unkind or unprofessional to an individual or group in a Slack channel).\n\nNo ego\n\nDon’t defend a point to win an argument or double-down on a mistake. You are not your work; you don’t have to defend your point. You do have to search for the right answer with help from others.\n\nIn a GitLab Unfiltered interview, GitLab Head of Remote Darren M. adds context on this operating principle.\n\nIn many organizations, there’s a subtle, low-level, persistent pressure to continually prove your worth. And I believe that this fuels imposter syndrome and wreaks havoc on mental health.\n\nWhat’s so troubling to me is how often perception is reality. In other words, those who have mastered the art of being perceived as elite reap benefits, though this has nothing to do with actual results.\n\nAt GitLab, “no ego” means that we foster and support an environment where results matter, and you’re given agency to approach your work in the way that makes sense to you. Instead of judging people for not approaching work in an agreed-upon way, “no ego” encourages people to glean inspiration from watching others approach work in new and different ways.\n\nBeing no ego is a standard we hold ourselves as people to but is not one that applies to GitLab as a company or product. We want to celebrate and highlight GitLab’s accomplishments, including being one of the largest all-remote companies. This doesn’t mean we don’t recognize our mistakes, including how we handled telemetry.\n\nSee others succeed\n\nA candidate who has talked to a lot of people inside GitLab said that, compared to other companies, one thing stood out the most: everyone here mentioned wanting to see each other succeed.\n\nDon’t let each other fail\n\nKeep an eye out for others who may be struggling or stuck. If you see someone who needs help, reach out and assist. This might involve offering to pair program or setting up a sync brainstorming session. The goal is to connect them with someone else who can provide expertise or assistance. We are a team, so we succeed and shine together by supporting each other!\n\nPeople are not their work\n\nAlways make suggestions about examples of work, not the person. Say “You didn’t respond to my feedback about the design” instead of “You never listen”. And, when receiving feedback, keep in mind that feedback is the best way to improve, and that others giving you feedback want to see you succeed.\n\nDo it yourself\n\nOur collaboration value is about helping each other when we have questions, need critique, or need help. No need to brainstorm, wait for consensus, or do with two what you can do yourself. The Bolt Handbook refers to this as the Founder Mentality, where all team members should approach the problem as if they own the company.\n\nBlameless problem solving\n\nInvestigate mistakes in a way that focuses on the situational aspects of a failure’s mechanism and the decision-making process that led to the failure, rather than cast blame on a person or team. We hold blameless root cause analyses and retrospectives for stakeholders to speak up without fear of punishment or retribution.\n\nShort toes\n\nPeople joining the company frequently say, “I don’t want to step on anyone’s toes.” At GitLab, we should be more accepting of people taking initiative in trying to improve things. As companies grow, their speed of decision-making goes down since there are more people involved. We should counteract that by having short toes and feeling comfortable letting others contribute to our domain. For example, pointed, respectful feedback to a proposal by GitLab’s CEO led to his own merge request being closed. However, it is not required to respond to comments.\n\nIt’s impossible to know everything\n\nWe know we must rely on others for the expertise they have that we don’t. It’s OK to admit you don’t know something and to ask for help, even if doing so makes you feel vulnerable. It is never too late to ask a question, and by doing so, you can get the information you need to produce results and to strengthen your own skills as well as GitLab as a whole. After your question is answered, please document the answer so that it can be shared.\n\nDon’t display surprise when people say they don’t know something, as it is important that everyone feels comfortable saying “I don’t know” and “I don’t understand.” (As inspired by Recurse.)\n\nCollaboration is not consensus\n\nWhen collaborating, it is always important to stay above radar and work transparently, but collaboration is not consensus and disagreement is part of collaboration. You don’t need to ask people for their input, and they shouldn’t ask you “Why didn’t you ask me?” You don’t have to wait for people to provide input, if you did ask them. You don’t need to have everyone agreeing to the same thing - they can disagree, commit, and disagree. Two-way doors decisions can be reversed as part of disagree, commit, and disagree, while one-way door decisions benefit from more input. Recognize these reversible two-way door decisions for when less input is required to iterate faster. We believe in permissionless innovation—you don’t need to involve people, but everyone can contribute. This is core to how we iterate, since we want smaller teams moving quickly rather than large teams achieving consensus slowly.\n\nCollaboration Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate collaboration when we take action to help others and include other’s (both internal and external) input (both help and feedback) to achieve the best possible outcome.\n\nGitLab Job Grade Demonstrates Collaboration Competency by… Knowledge Assessment 5 Develops collaboration skills by learning from other team members Knowledge Assessment for Individual Contributors 6 Grows collaboration skills by using different types of communication; files issues appropriately, asks in the right Slack channels and uses the right labels. 7 Models collaborative behavior for fellow team members and others within the group. 8 Coaches team members on how to collaborate more effectively and pointing team members to the right channels to collaborate. Knowledge Assessment for People Leaders 9 Fosters collaborative decision making and problem solving across the departments. 10 Drives team collaboration across divisions/departments, silos, and division boundaries. 11 Develops networks and builds partnerships, engages in cross-functional activities; collaborates across boundaries, and finds common ground with a widening range of stakeholders.  Utilizes contacts to build and strengthen internal support base 12 Leads collaboration and teamwork in daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Encourages greater cross-functional collaboration among e-team leaders. 14 Champions collaboration and teamwork into daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Champions cross-functional collaboration among e-team leaders and GitLab.\n\n📈 Results for Customers\n\nWe exist to help our customers achieve more. Everything we do should be in service of making our customers successful with GitLab. Results for Customers is at the top of our values hierarchy, as our customers achieving results drives overall business performance that enables everything else.\n\nThe Results for Customers value is displayed through the following operating principles:\n\nSet Ambitious & Measurable goals\n\nWhile we iterate with small changes, we strive for large, ambitious results. We have an ambitious mission and vision, and we aim to be the best in the world across all our functions. Setting ambitious, measurable goals enables us to best deliver customer results. We agree in writing on measurable goals. Within the company we use OKRs to stay accountable. We have and report against KPIs with guiding targets.\n\nUnderstand our customers\n\nAll GitLab team members should understand our customers’ needs, issues, and value propositions. We understand how they use GitLab and what they need from a platform in order to meet their goals. Internally facing teams consider the impact of their work as it pertains indirectly to GitLab’s customers.\n\nWe better understand customers and their needs through:\n\nReviewing public facing GitLab issues from our customers and users\n\nDogfooding our product to understand the user experience\n\nReading customer stories from Marketing and Sales\n\nAttending Customer fireside chats\n\nLearning feedback from our customers and users on product features and roadmap\n\nCo-create\n\nWe create together with our customers. There is an open dialogue between GitLab and our customers so that we can better identify what they need. As a result of building a solution for them, we can also bring that solution to the world.\n\nKeep end users in sight\n\nOur focus is to increase customer results. At GitLab, one way to drive customer results is through platform enhancements that drive the most value for direct users. This requires being aware of the Concur effect.\n\nArvind Narayanan, a Princeton Professor, described his frustration with Blackboard in a viral Tweet:\n\nIt has every feature ever dreamed up. But like anything designed by a committee, the interface is incoherent and any task requires at least fifteen clicks (and that’s if you even remember the correct sequence the first time).\n\nSoftware companies can be breathtakingly clueless when there’s a layer of indirection between them and their users. Everyone who’s suffered through Blackboard will have the same reaction to this: try having less functionality!\n\nRyan Falor followed up on Narayanan’s tweet with his definition of the Concur Effect:\n\ndecision makers are not direct users\n\nfeatures are overwhelming and disjointed\n\nuser experience gets worse over time\n\nSee the Hacker News discussion for a specific UX example.\n\nAt GitLab, we want to drive customer results through focusing on platform enhancements that drive the most value for direct users.\n\nCustomer results are more important than:\n\nWhat we plan to make. If we focus only on our own plans, we would have only GitLab.com and no self-managed delivery of GitLab. This does not mean that we will agree to every feature request, but we won’t let existing plans be an obstacle to working on what will drive the most customer value.\n\nLarge customer requests. Catering to requests from large customers leads to the innovator’s dilemma, we need to also focus on results for small and future customers.\n\nOur existing scope. For example, when customers asked for better integrations and complained about integration costs and effort, we responded by expanding our scope to create a single application for the DevOps lifecycle.\n\nOur assumptions. Every company works differently, so we can’t assume that what works well for us will support our customers’ needs. When we have an idea, we must directly validate our assumptions with multiple customers to ensure we create scalable, highly relevant solutions.\n\nWhat we control. We strive to provide the best possible experience for each of our customers, and take responsibility for all of the aspects that we can reasonably control.\n\nMeasure impact, not activity\n\nWe care about what you achieve: the code you shipped, the needle you moved, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldn’t feel like they did something wrong, unless it negatively impacted a goal or result they were responsible for. You don’t have to defend how you spend your day if you are performing and delivering against expectations. We trust team members to do the right thing instead of having rigid rules. We trust team members to show up and do their best work. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too many hours, talk to your manager to discuss solutions.\n\nDogfooding\n\nWe use our own product in the way our users do to surface improvements that will lead to better customer results. GitLab is a DevSecOps Platform that can be used by people throughout the business. This is how we use it within GitLab. For example, we use our OKR functionality company-wide to inform product enhancements and for team members to have a great understanding of the customer experience. We also dogfood in the following ways:\n\nOur development organization uses GitLab.com to manage the DevOps lifecycle of GitLab itself.\n\nAll team members use GitLab to collaborate on this handbook.\n\nWe capture content and processes in Git repos and manage them with GitLab.\n\nWhen something breaks, doesn’t work well, or needs improvement, we are more likely to notice it internally and address it before it impacts our larger community.\n\nGive agency\n\nWe give people agency to focus on what they think is most beneficial. If a meeting doesn’t seem interesting and someone’s active participation is not critical to the outcome of the meeting, they can always opt to not attend, or during a video call they can work on other things if they want. Staying in the call may still make sense even if you are working on other tasks, so other peers can ping you and get fast answers when needed. This is particularly useful in multi-purpose meetings where you may be involved for just a few minutes.\n\nChallenger mindset\n\nChallenging the status quo can lead to remarkable results - we must never stop. A challenger mindset requires that we continually ask ourselves bold, difficult questions about our business the problems we solve while resisting complacency. To succeed we must innovate and delight our customers with the value of the products we build. A challenger mindset requires a relentless pursuit of excellence - we must be tenacious. Each win for our customers builds reputational capital we can use to earn the trust of prospects in a competitive market. While competition is a feature of capitalism internally as GitLab team members we must focus our efforts inwardly on achieving our very best results for customers to win market share.\n\nGrowth mindset\n\nYou don’t always get results and this will lead to criticism from yourself and/or others. We believe our talents can be developed through hard work, targeted training, learning from others, on-the-job experience, and receiving input from others. It is in our DNA as a company and individuals to look for opportunity, stay humble, and never settle. We try to hire people based on their trajectory, not their pedigree. We also strive to foster a culture of curiosity and continuous learning where team members are provided and proactively seek out opportunities to grow themselves and their careers. We believe that with the right expectations and direction, people can grow to take on new challenges and surpass expectations.\n\nCross-functional optimization\n\nOur definition of cross-functional optimization is that you do what is best for the organization as a whole. Don’t optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. For example, you may have set a non-urgent functional milestone that is supposed to land at the end of the quarter. If delivering within the last week requires engagement from the GTM teams, the right decision may be to push your own team’s target by a week to reduce the ask for the GTM team as the GTM focuses on meeting its revenue objectives.\n\nIn the context of collaboration, if anyone is blocked by you on a question, your approval, or a merge request review, you should prioritize unblocking them, either directly or through helping them find someone else who can.\n\nEmbrace Tenacity\n\nWe refer to this as “persistence of purpose”. As talked about in The Influence Blog, tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. We value the ability to maintain focus and motivation when work is tough and asking for help when needed.\n\nHave Ownership & Accountability\n\nWe expect team members to complete tasks that they are assigned. You are responsible for executing with attention to detail, connecting the dots across the organization and anticipating and solving problems. As an owner, you are responsible for overcoming challenges, not suppliers or other team members. Take initiative and proactively inform stakeholders when there is something you might not be able to solve.\n\nSense of urgency\n\nTime gained or lost has compounding effects. Try to get the results as fast as possible, but without compromising our other values and ways we communicate, so the compounding of results can begin and we can focus on the next improvement.\n\nOperate with a bias for action\n\nIt’s important that we keep our focus on action, and don’t fall into the trap of analysis paralysis or sticking to a slow, quiet path without risk. Decisions should be thoughtful, but delivering fast results requires the fearless acceptance of occasionally making mistakes; our bias for action also allows us to course correct quickly. Try to get results as fast as possible, but without compromising our other values and ways of working\n\nDisagree, commit, and advocate\n\nWhen a decision is in place, we expect people to commit to executing it. Any past decisions and guidelines are open to questioning as long as you act in accordance with them until they are changed. This is a common principle. Every decision can be changed; our best decision was one that changed an earlier one. In a manager-report relationship, usually the report is the Directly Responsible Individuals (DRI). The manager may disagree with the final decision, but they still commit to the decision of the DRI.\n\nIn a group setting, participants may disagree with a proposal but not articulate their views for one reason or another. Sometimes, many or all individuals may disagree yet choose not to speak up, because no one believes they would get agreement from the group. As a result, everyone loses out on their feedback. Dissent is expression of that disagreement. However, it can be difficult and even socially expensive. Expression of feedback is a way for everyone to grow and learn, and is based on facts rather than opinions. Share your perspective, rather than agreeing simply to avoid conflict or to go along with everyone else.\n\nWhen you want to reopen the conversation on something, show that your argument is informed by previous conversations and assume the decision was made with the best intent. You have to achieve results on every decision while it stands, even when you are trying to have it changed. You should communicate with the DRI who can change the decision instead of someone who can’t.\n\nEscalate to unblock\n\nIf there is a disagreement and you can’t move forward because of it, agree to escalate and escalate to one or both of your managers. Early escalation, delivered with context of the challenge, enables managers to function as an unblocker.\n\nResults Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate results when we do what we promised to each other, customers, users, and investors.\n\nGitLab Job Grade Demonstrates Results Competency by… Knowledge Assessment 5 Develops the skills needed to commit and execute on agreed actions. Knowledge Assessment for Individual Contributors 6 Applies commitment to results and demonstrates ability to execute on agreed actions. 7 Models a sense of urgency and commitment to deliver results. 8 Coaches team members to collaborate and work iteratively towards results with the focus on the outcome and not hours worked. Knowledge Assessment for People Leaders 9 Fosters a culture of ownership of personal performance. 10 Drives efficient execution of results ensuring collaboration between team members. 11 Develops quarterly OKR\'s ensuring the performance and results of one or more teams. 12 Leads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency. EVP/CXO Leads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency.\n\n⏱️ Efficiency\n\nAt GitLab, efficiency means producing results without wasting materials, time, or energy. We optimize solutions globally for the broader GitLab community over one person or a small group. Focus on efficiency should be global in nature, not just local to a given function. Global efficiency could include efficiency with customers, candidates, and contributors as well. It is easy to prioritize consistency over efficiency because consistency is often more efficient initially and makes managing processes more efficient. We should slow down when optimizing for consistency. Taking a company-wide lens when evaluating changes will help ensure that new processes will improve efficiency for GitLab as a whole and be the best decision for the company as a whole.\n\nWhen we work internally with other team members, we leverage GitLab’s unique working practices and operating principles to achieve top efficiency. We do not expect people outside of GitLab to conform to GitLab’s ways of working, and we will make accommodations to work effectively with them. For example, we may collaborate heavily in-person and not default to async communications.\n\nOnly Healthy Constraints\n\nMost companies regress to the mean and slow down over time. While some changes are required as a company grows and matures, not all change is inevitable or should be allowed to passively happen. As GitLab grows, we are conscious of how we operate and how it enables our ability to continue to operate with the agility of a startup. We try to limit ourselves to healthy constraints.\n\nWrite things down\n\nWe document everything: in the handbook, in meeting notes, in issues. We do that because “the faintest pencil is better than the sharpest memory.” It is far more efficient to read a document at your convenience than to have to ask and explain. Having something in version control also lets everyone contribute suggestions to improve it.\n\nBoring solutions\n\nUse the simplest and most boring solution for a problem, and remember that “boring” should not be conflated with “bad” or “technical debt.” The speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps. Don’t pick an interesting technology just to make your work more fun; using established, popular tech will ensure a more stable and more familiar experience for you and other contributors.\n\nMake a conscious effort to recognize the constraints of others within the team. For example, sales is hard because you are dependent on another organization, and development is hard because you have to preserve the ability to quickly improve the product in the future.\n\nSelf-service and self-learning\n\nTeam members should first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame. Write down any new information discovered and pay it forward so that those coming after will have better efficiency built on top of practicing collaboration, inclusion, and documenting the results.\n\nTeam members have more room to grow themselves when they are able to self-service and self-learn.\n\nEfficiency for the right group\n\nOptimize solutions globally for the broader GitLab community. As an example, it may be best to discard a renewal process that requires thousands of customers to each spend two hours in favor of one that only takes sixty seconds, even when it may make a monthly report less efficient internally! In a decision, ask yourself “For whom does this need to be most efficient?” Quite often, the answer may be your users, contributors, customers, or team members that are dependent upon your decision.\n\nBe respectful of others’ time\n\nConsider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions.\n\nSpend company money like it’s your own\n\nEvery dollar we spend will have to be earned back. Be as frugal with company money as you are with your own. In saying this, we ask team members to weigh the cost of purchases against the value that they will bring to the company.\n\nConsider the degree to which a purchase increases your ability to better accomplish your work and achieve business results relative to cost. Lowering overhead reduces the cost to operate the business and lets us shift spend toward other priority areas.\n\nWe have guidelines around this operating principle to help team members better understand our expensing process and expectations.\n\nFrugality\n\nAmazon states it best with: “Accomplish more with less. Constraints breed resourcefulness, self-sufficiency, and invention. There are no extra points for growing headcount, budget size, or fixed expense.”\n\nShort verbal answers\n\nGive short answers to verbal questions so the other party has the opportunity to ask more or move on.\n\nKeep broadcasts short\n\nKeep one-to-many written communication short, as mentioned in this HBR study: “A majority say that what they read is frequently ineffective because it’s too long, poorly organized, unclear, filled with jargon, and imprecise.”\n\nManagers of one\n\nWe want each team member to be a manager of one who doesn’t need daily check-ins to achieve their goals. Team members are given the freedom to own projects and initiatives and are trusted to see them through to a successful end.\n\nWhen team members are managers of one they can have an increased work/life balance, because they are more empowered to make decisions around how they allocate their time throughout each day.\n\nFreedom and responsibility over rigidity\n\nWhen possible, we give people the responsibility to make a decision and hold them accountable for that, instead of imposing rules and approval processes. You should have clear objectives and the freedom to work on them as you see fit. Freedom and responsibility are more efficient than rigidly following a process, or creating interdependencies, because they enable faster decision velocity and higher rates of iteration.\n\nWhen team members have freedom and responsibility over rigidity, they have more room to help others.\n\nAccept mistakes\n\nNot every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient; a mistake only affects one. Once you have accepted the mistake, learn from it. When team members are free to accept mistakes, they can take more calculated risks.\n\nMove fast by shipping the minimal valuable change\n\nWe value constant improvement by iterating quickly, month after month. If a task is not the smallest viable and valuable thing, cut the scope.\n\nEmbrace change\n\nAdoption of features, user requirements, and the competitive landscape change frequently and rapidly. The most successful companies adapt their roadmap and their organization quickly to keep pace. One of the things that makes this challenging is the impact on our team. People may need to change teams, subject matter, or even who manages them. This can rightly feel disruptive. If we coach ourselves to embrace the positive aspects of change, such as increased opportunity and new things to learn, we can move faster as a company and increase our odds of success. It is important to hold management accountable for being deliberate.\n\nEfficiency Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate efficiency when we work on the right things, not doing more than needed, and not duplicating work.\n\nGitLab Job Grade Demonstrates Efficiency Competency by… Knowledge Assessment 5 Develops an understanding of being a manager of 1 by taking responsibility for your own tasks and delivering on commitments. Brings up ideas for process improvements to 1:1s. Learns to write everything down as it is far more efficient to read a document at your convenience than to have to ask and explain. Knowledge Assessment for Individual Contributors 6 Develops a deeper understanding of efficiency and actively identifies process inefficiencies within the team. Seeks out ways to be more effective in their role, while also starting to mentor others in ways to work efficiently. 7 Models a culture of efficiency within the team where people make good, timely decisions using available data and assessing multiple alternatives. Models using boring solutions for increasing the speed of innovation for our organization and product. 8 Takes ownership of own team process inefficiencies, implements cross team efforts in ensuring things are running smoothly. Implements a way of working in the team where team members first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame. Knowledge Assessment for People Leaders 9 Takes ownership of group level process inefficiencies and guides cross sub-departments in ensuring things are running smoothly. Fosters a culture in the sub-departments where you respect others\' time and promote self-service and self-learning. 10 Drives the framework of frugality on a department level and owns departments efforts in ensuring things are running smoothly. Drives efficient resolution of highly complex or unusual business problems that impact the department / team. Holds their managers and peers accountable for upholding this value. 11 Develops the framework and strategy of frugality cross division resulting in efforts ensuring things are running smoothly. Develops leaders to action on division/department/team inefficiencies. Hold their management teams accountable for upholding this value. 12 Leads with efficiency across the company. Ensures efficient resource allocation decisions across the company. Leads across company strategy and policy improvements that move the business towards more efficiency. They hold their senior management and the e-group accountable for upholding this value. EVP/CXO Champions GitLab\'s strategy for efficiency internally and externally. Constantly looking for efficiency improvements cross company and holding other e-group members accountable for upholding efficiency too. They are comfortable leading through frugality and accepting of mistakes.\n\n🌐 Diversity, Inclusion & Belonging\n\nDiversity, inclusion and belonging are fundamental to the success of GitLab. We aim to make a significant impact in our efforts to foster an environment where everyone can thrive. We are designing a multidimensional approach to ensure that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. We actively chose to build and institutionalize a culture that is inclusive and supports all team members equally in the process of achieving their professional goals. We hire globally and encourage hiring in a diverse set of countries. We work to make everyone feel welcome and to increase the participation of underrepresented minorities and nationalities in our community and company. For example, we celebrate our sponsorship of diversity, inclusion & belonging events.\n\nBias towards asynchronous communication\n\nTake initiative to operate asynchronously whenever possible. This shows care and consideration for those who may not be in the same time zone, are traveling outside of their usual time zone, or are structuring their day around pressing commitments at home or in their community.\n\nThis is demonstrated by communicating recordings of meetings, using GitLab Issues and Merge Requests rather than texts, calls, or Slack messages, and being sensitive to local holidays and vacation statuses. Encourage others to default to documentation rather than pressuring others to be online outside of their working hours.\n\nEmbracing uncomfortable ideas and conversations\n\nPart of embracing diversity is a willingness to embrace often uncomfortable conversations and situations. This concept is also at the core of inclusion and helping to eliminate the problems that are faced by certain GitLab team members who may not be in the majority.\n\nWe believe that being willing to embrace discomfort is the path forward to a safe, balanced and inclusive work place for all. Challenge yourself, challenge your own pre-set notions and ideas about different cultures or things you don’t understand. When we are willing to embrace being uncomfortable, we can focus on actually fixing the issues at hand rather than simply “appearing to care”.\n\nUnderstanding the impact of microaggressions\n\nMicroaggressions are much more than merely rude or insensitive comments. They can wear people down by slowly chipping away their sense of belonging/safety/inclusion over time. What is a microaggression?\n\n“The everyday slights, indignities, put downs and insults that people of color, women, LGBT populations or those who are marginalized experiences in their day-to-day interactions with people.” - Derald W. Sue\n\nAt GitLab we believe that everyone is entitled to a safe working space where they can express who they are and participate in conversations without worry of being spoken to in a harmful way, given that we want to encourage everyone to be mindful of what is a microaggression and be mindful of their potential impact.\n\nSeek diverse perspectives\n\nWe believe that team members seeking feedback from a diverse group of team members, inside and outside of their group or function, leads to better decisions and a greater sense of team member belonging. For more guidance on how we define Diversity, please refer to GitLab’s definition of Diversity, Inclusion & Belonging. Feedback from a more heterogenous group often leads to better business outcomes as we incorporate diverse perspectives and uncover unconscious bias.\n\nAn example of this operating principle in action showcases the value of actively seeking diverse perspectives. The term “Brag Document” was used to describe when individuals documented their accomplishments. Documenting accomplishments is critical to team member development. However, team members had the psychological safety to raise the question of whether or not the title of the document made some feel uncomfortable. In an effort to seek a diverse perspective, a survey was conducted in one of the Team Member and Advocacy Resource Group (TMRG) channels. The poll results showed that 100% of those polled preferred a different title and the title was changed.\n\nMake family feel welcome\n\nOne of the unique elements to an all-remote culture is the ability to visit a person’s home while collaborating. If the tenor of the meeting allows, feel welcome to invite your family members or pets to drop by and greet your colleagues. Be mindful of language and use of profanity to encourage a family-friendly environment.\n\nShift working hours for a cause\n\nCaregiving, outreach programs, and community service do not conveniently wait for regular business hours to conclude. If there’s a cause or community effort taking place, feel welcome to work with your manager and shift your working hours to be available during a period where you’ll have the greatest impact for good. For colleagues supporting others during these causes, document everything and strive to post recordings so it’s easy for them to catch up.\n\nBe a mentor\n\nPeople feel more included when they’re supported. To encourage this, and to support diversified learning across departments, consider GitLab’s Internship for Learning program.\n\nCulture fit is a bad excuse\n\nWe don’t hire based on culture or select candidates because we’d like to have a drink with them. We hire and reward team members based on our shared values as detailed on this page. We want a values fit, not a culture fit. We want cultural diversity instead of cultural conformity. Said differently: “culture add” > “culture fit” or “hire for culture contribution” since our mission is that everyone can contribute.\n\nReligion and politics at work\n\nWe generally avoid discussing politics or religion in public forums because it is easy to alienate people that have a minority opinion. This doesn’t mean we never discuss these topics. Because we value diversity, inclusion and belonging, and want all team members to feel welcome and contribute equally, we encourage free discussion of operational decisions that can move us toward being a more inclusive company. GitLab also publicly supports pro diversity, inclusion & belonging activities and events.\n\nThere is sometimes a grey area where advocating for diversity and political activities may intersect. Team members should use discretion in grey area communications, because a culture of belonging requires us to be respectful of the broad spectrum of views within our work environment. What does this mean in practice? Please feel empowered to share information that highlights diversity, inclusion and belonging issues and how GitLab and GitLab team members can get involved. In line with our Code of Business Conduct and Ethics, avoid posting articles that reference specific political figures or parties.\n\nWhile it is acceptable for individuals to bring up politics and religion in social contexts such as coffee chats and real-life meetups with other coworkers (with the goal to understand and not judge), always be aware of potential sensitivities, exercise your best judgment, and make sure you stay within the boundaries of our Code of Business Conduct and Ethics.\n\nWe’re a global company where perspectives and local norms may differ from culture to culture. Diversity, inclusion and belonging is about broad inclusion at a worldwide level. If there is a question or concern, please reach out to diversityinclusion@gitlab.com or #diversity_inclusion_and_belonging.\n\nQuirkiness\n\nUnexpected and unconventional things make life more interesting. Celebrate and encourage quirky gifts, habits, behavior, and points of view. Open source is a great way to interact with interesting people. We try to hire people who think work is a great way to express themselves.\n\nBuilding a safe community\n\nDo not make jokes or unfriendly remarks about characteristics of the people who make up GitLab and how they identify. Everyone has the right to feel safe when working for GitLab and/or as a part of the GitLab community. We do not tolerate abuse, harassment, exclusion, discrimination, or retaliation by/of any community members, including our team members. You can always refuse to deal with people who treat you badly and get out of situations that make you feel uncomfortable.\n\nUnconscious bias\n\nWe recognize that unconscious bias is something that affects everyone and that the effect it has on us as humans and our company is large. We are responsible for understanding our own implicit biases and helping others understand theirs. We are continuously working on getting better at this topic.\n\nInclusive benefits\n\nWe list our Parental Leave publicly so people don’t have to ask during interviews.\n\nInclusive language & pronouns\n\nUse inclusive language. For example, prefer “Hi everybody” or “Hi people” to “Hi guys”, and “they” instead of “he/she”. While there are several good guides from folks like 18f, University of Calgary, and Buffer on using inclusive language, we don’t keep an exhaustive list. When new possibly non-inclusive words arise, we prefer to be proactive and look for an alternative. If your goal is to be inclusive, it is more effective to make a small adjustment in the vocabulary when some people have a problem with it, rather than making a decision to not change it because some people don’t think it is a problem. And if you make a mistake (e.g. accidentally using the wrong pronoun or an outdated phrase), acknowledge it, apologize gracefully and move on; there is no need to dwell on it, and you can work to avoid making that mistake in the future. Please also visit our Gender and Sexual-orientation Identity Definitions and FAQ page if you have questions around pronouns and other topics related to gender / sexual orientation.\n\nLearn how to pronounce other people’s names\n\nWe attach part of our identity to our names, and if it is mispronounced it can feel less inclusive. If it happens repeatedly, you may be unintentionally sending a message to that person that you are not interested in learning how to pronounce their name correctly. This applies to everyone you are in contact with: team members, customers, candidates for jobs, and anyone else.\n\nPeople whose name is repeatedly mispronounced might feel unimportant or self-conscious, and might not speak up about it. Other negative behaviors include giving a person a nickname without their permission, or actively avoiding using their name in sync calls.\n\nIt might be challenging to pronounce names from a different language or culture than your own, but with some effort, name pronunciation can be learned by anyone. Some ways to achieve this are:\n\nAsk the person for help in a private space: “I’m sorry, I don’t think I am pronouncing your name correctly. Can you help me with the correct pronunciation?”\n\nUse the written and recorded pronunciation tools in Slack.\n\nUse online tools such as videos recorded on YouTube or NameShouts.\n\nPractice the pronunciation with a friend or team member who knows the correct pronunciation.\n\nAlways avoid making jokes or comments about how it is difficult to pronounce their name.\n\nUse of nicknames\n\nSome people might choose to use a nickname, for example: “Bob” instead of “Robert”. As long as this is their choice this is perfectly acceptable. We should avoid assigning a nickname to a person without their permission.\n\nSlack pronunciation features\n\nSlack has two features to help with this issue: the phonetic name pronunciation field and the ability to record your own name pronunciation audio clip. We encourage all team members to complete both of these. Update them by editing your profile.\n\nInclusive interviewing\n\nThis is documented on our page about interviewing.\n\nInclusive meetings\n\nBe consciously inclusive in meetings by giving everyone present an opportunity to talk and present their points of view. This can be especially important in a remote setting.\n\nWith internal meetings, consider using an agenda document for questions. For example, with GitLab Group Conversations, every meeting has a numbered list that GitLab team members can add questions to. During the meeting, questions are answered in turn and discussions noted in the same document. Sometimes, these documents can have so much traffic (during the meeting) such that only a limited number of people can edit the document. In these situations, those who have questions should post on zoom chat and those who can edit the document should help copy the question over to the document. In addition, those who can edit the document should also post in zoom chat to see if anyone has any questions that they could help add to the document so that meeting attendees are more empowered to contribute to the conversation.\n\nCustomers are not used to working in this way. To promote inclusion with customers: ask participants for their goals; make sure during demos that you pause for question; leave time for discussion.\n\nInclusive and fair policy to regions with fewer employees\n\nBeing globally distributed has the benefit that someone can cover for you when you are off work. However, population density is not balanced across timezones. Policies should remain fair to those in less dense regions.\n\nFor example, the Asia Pacific region covers more timezones but has fewer team members. If we use an algorithm to assign tasks to those in later timezones, all American tasks would fall on the fewer Asia Pacific employees. This can damage belonging and inclusivity and should be avoided.\n\nWhen planning an event, the organizer should cater for location density differences to maximize participation in all regions.\n\nSee Something, Say Something\n\nAs a globally-dispersed company, we have team members from many different backgrounds and cultures. That means it is important for each of us to use great judgment in being respectful and inclusive of our teammates. At the same time, we may sometimes not fully realize we have said or done something to offend someone. It is important that our teammates hold each other accountable and let them know if they have unintentionally or intentionally done something so they can learn and gain additional understanding of perspectives different from our own. It is also important that our teammates don’t feel excluded or minimized by the words we use or the things we do. Thus, we all need to speak up when we see something that isn’t respectful or inclusive.\n\nEmbracing Neurodiversity\n\nNeurodiversity refers to variations in the human brain regarding learning, attention, sociability, mood, and other mental functions. There are various neurodevelopmental conditions, like autism, ADHD, dyslexia, dyscalculia, dyspraxia, cognitive impairment, schizophrenia, bipolarity, and other styles of neurodivergent functioning. While neurodivergent individuals often bring unique skills and abilities which can be harnessed for a competitive advantage in many fields (for example, cybersecurity), neurodivergent individuals are often discriminated against. Due to non-inclusive hiring practices, they sometimes have trouble making it through traditional hiring processes. Neurodiversity inclusion best practices benefit everyone, and at GitLab, everyone can contribute. The handbook, values, strategy, and interviewing processes must support the ability for everyone to thrive.\n\nAt GitLab we embrace Neurodiversity through adopting a variety of different work styles and communication styles, and we lean into transparency, asynchronous as a default working style, and pre-filled meeting agendas. These best practices become even more important when embracing neurodiversity. Providing multiple ways to consume information (written / video / audio) allows everyone to contribute independent of their preferred comprehension style. It is important to ask team members specifically what their preferred communication method is in order to provide them information in a format that is easily consumable for them.\n\nRemember, brains work differently and always assume positive intent, even if someone behaves in an unexpected way. While it may be an unexpected behavior to you, it may not be unexpected to the individual exhibiting the behavior. That is the beauty and value of diversity, embracing differences and becoming stronger and better as a result.\n\nWe also recommend that all team members review the Reasonable Accommodation process. A Reasonable Accommodation for a team member could include noise-cancelling headphones, scheduling smaller group session zoom calls, providing very explicit and precise instructions and due-dates when given tasks, or providing a variety of supportive software tools.\n\nThe most important thing that managers can do is facilitate an environment in which all team members feel psychologically safe enough to make requests for what they need in order to do their job.\n\nFamily and friends first, work second\n\nLong-lasting relationships are the rocks of life, and come before work. As someone said in our #thanks channel after helping a family member for five days after a hurricane: “THANK YOU to GitLab for providing a culture where “family first” is truly meant”. Use the hashtag: #FamilyAndFriends1st\n\nEquity not just equality\n\nEquity vs. Equality: What’s the Difference?\n\nWhile the terms equity and equality may sound similar, the implementation of one versus the other can lead to dramatically different outcomes for marginalized people.\n\nEquality means each individual or group of people is given the same resources or opportunities. Equity recognizes that each person has different circumstances and allocates the exact resources and opportunities needed to reach an equal outcome.\n\nDiversity, Inclusion & Belonging Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate diversity, inclusion and belongings when we foster an environment where everyone can thrive and ensuring that GitLab is a place where people from every background and circumstance feel like they belong and can contribute.\n\nIf you would like to improve your skills or expand your knowledge on topics relating to Diversity, Inclusion, & Belonging at GitLab, check out our resources:\n\nBeing an Ally\n\nBeing Inclusive\n\nRecognizing Bias\n\nGitLab Job Grade Demonstrates Diversity & Inclusion Competency by… Demonstrates DIB Behaviors by… (Should not be considered an exhaustive list) Knowledge Assessment 4 Learns to understand the impact of biases. Gathering more information about the skills needed to be accountable for their actions, apologizes and learn. 5 Develops an understanding of the impact of biases; seeks to learn more about their own biases. Is accountable for their actions, apologizes and learns from their mistakes. DIB training and/or other company wide training to further education on DIB Attend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions Participate in a DIB Initiative: join TMRGs you identify with, support other groups as an Ally, attend events, "like" slack posts and spread the word Participate in a TMRG initiative Member of a working group related to a DIB initiative, e.g. participate in a Mentorship program Knowledge Assessment for Individual Contributors 6 Has a growing understanding of the impact of biases; fosters a sense of inclusion and belonging on their team. Holds themselves and peers accountable for upholding this value by kindly pointing out when mistakes might be made. Encourages an inclusive team environment where differences are encouraged and everyone can contribute. 7 Actively aware of how bias or exclusion might occur on a team and helps to facilitate a team environment where team members belong and feel safe. Models empathy with their interactions with customers and cross functional team members. 8 Implements best practices to limit bias on their team. They ensure blameless accountability is practiced throughout their team. Creates an environment where team members feel safe to share ideas and welcomes individual differences. DIB training and/or other company wide training to further education on DIB Attend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions Participate in a DIB Initiative: join TMRGs you identify with, support other groups as an Ally, attend events, like posts and spread the word Participate in a TMRG initiative Member of a working group related to a DIB initiative, e.g. participate in a Mentorship program Hiring Manager ensure a diverse candidate slate and interview panel Active participant and advocate for department DIB goals Knowledge Assessment for People Leaders 9 Proactively finds ways of facilitating an inclusive team environment and assesses processes to protect against unconscious bias. They hold their team members accountable including cross functional stakeholders. Promotes individual differences across their team and other departments. 10 Drives diversity, inclusion and sense of belonging across their department. They hold their managers and peers accountable for upholding this value. They are actively involved in the execution of D&I strategies and encourage others to participate. Black is Tech, Grace Hopper 11 Embeds the value of Diversity & Inclusion across their division and finds opportunities to limit the impact of bias on decision making processes. Uses feedback and data to formulate a strategy on how to make improvements. They hold their management teams accountable for upholding the value. 12 Leads with the value of Diversity & Inclusion across the company and finds opportunities to limit the impact of bias on decision making processes. They sponsor internal initiatives to increase trust, psychological safety and inclusion. They hold their senior management and the e group accountable for upholding this value. DIB Team & Leadership DIB Council to establish an action plan for your departments & division Serve as an TMRG executive sponsor Embed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate EVP/CXO Champions the value of Diversity, Inclusion and Belonging into the company\'s strategy. They champion and sponsor internal and external D&I initiatives. They speak to the importance of this value in company-wide meetings. They hold their leaders and other e group members accountable for upholding this value. They continuously seek ways to increase trust, psychological safety and inclusion across the broader company. Yearlies initiative focused on continuing to build a diverse team of top talent that we retain and grow Advocate and Integrate DIB into your organizational KPIs/OKRs, e.g.OKR: continue to build and grow a diverse workforce/organization Partner with the DIB Team & Leadership DIB Council to establish an action plan for your departments & division Serve as a TMRG executive sponsor Embed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate\n\n👣 Iteration\n\nMerriam-Webster defines iteration as the “the action or a process of iterating or repeating: such as a procedure in which repetition of a sequence of operations yields results successively closer to a desired result.” At GitLab, we iterate to do the smallest valuable thing to get fast feedback and efficiently reach a desired end goal. Feedback can be from internal users (dogfooding), a limited number of external users (through our early access program), or through feedback from our broader user community. We validate each iteration and adjust, but not at the expense of the user experience that we deliver to our customers.\n\nWhen we iterate at GitLab, we break up the work that we know we need to do into smaller chunks to iterate toward a targeted end state:\n\nMerge in codebase\n\nDogfood\n\nHave some external users (early access program)\n\nEnsure global optimization (use standardized systems)\n\nPlan beyond the iteration\n\nIteration does not require us to ship features that are open to all users from day one. Feedback can come from internal users or a limited number of external users (early access program). Moving through the release process is not iteration though. Iteration is also not a replacement for having a plan. We expect you to know where you are going, but you can iterate to get there.\n\nAn iteration might be additive (adding something) or subtractive (removing something). If you make suggestions that can be excluded from the first iteration, turn them into a separate issue that you link.\n\nWhile you should have a clear vision of the desired outcome and how it addresses a customer pain point or improves the user experience, be efficient in your planning. Unless you identify important cross-functional interdependencies, focus detailed planning on the first step. It might feel you are moving too slowly; however, planning is critical in order to ensure you can move fast when implementing. You’re doing it right if you feel that you have shipped the minimal feature set in the first iteration. This value is the one people most underestimate when they join GitLab. The impact, both on your work process and on how much you achieve, is greater than anticipated. Frequently, the simplest version that provides value turns out to be the best one.\n\nMany people who join GitLab say they already practice iteration. But this is the value that is the hardest to understand and adopt. People are trained that if you don’t deliver a perfect or polished thing, there will be a problem. If you do just one piece of something, you have to come back to it. Doing the whole thing seems more efficient, even though it isn’t. If the complete picture is not clear, your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other GitLab team members being really effective with iteration but don’t know how to make the transition, and it’s hard to shake the fear that constant iteration can lead to shipping lower-quality work or a worse product. In reality, it is possible to ship a minimally valuable product while continuing to adhere to the documented quality standards.\n\nThe way to resolve this is to write down only what value you can add with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration can be uncomfortable, even painful. If you’re doing iteration correctly, it should be. Reverting work back to a previous state is positive, not negative. We’re quickly getting feedback and learning from it. Making a small change prevented a bigger revert and made it easier to revert.\n\nHowever, if we take smaller steps and ship smaller, simpler features, we get feedback sooner. Instead of spending time working on the wrong feature or going in the wrong direction, we can ship the smallest product, receive fast feedback, and course correct. People might ask why something was not perfect. In that case, mention that it was an iteration, you spent only “x” amount of time on it, and that the next iteration will contain “y” and be ready on “z”.\n\nIteration enables results and efficiency.\n\nIn the GitLab Unfiltered video embedded above, GitLab CEO and co-founder Sid Sijbrandij shares key operating principles to reinforce iteration in an organization.\n\nStart with a long-term vision\n\nIteration involves driving results in pursuit of a long-term vision. While the intermediate goals may change as we iterate, we are unlikely to be successful if we don’t start with a vision of what we are working toward. Shipping that vision in iterations allows us to learn from customers using it and adjust the vision if needed. Iteration for the sake of iteration can lead to inefficiencies and not deliver desired results.\n\nIteration is no substitute for planning\n\nIteration without a plan can lead to inefficiencies and a subpar customer experience. Before iterating we need to plan. A plan should include:\n\nTime-bound objective: Where we want to be in a year\n\nUX: User experience we are working toward\n\nQuality: What quality is sufficient quality, inclusive of security\n\nSuccess metric: Usage we want at a specific time\n\nData schema: The data schema we need to measure progress towards project goals\n\nGTM plan: How we want to go to market\n\nEnablement: When we’d plan to train and enable the support and field teams\n\nMarketing: When we’d launch marketing (doesn’t have to be at release)\n\nSecure by design: default to the most secure configuration\n\nThe release process is not iteration\n\nMoving through the release process is not iteration.\n\nThe release process can include:\n\nDogfooding\n\nEarly access\n\nIncremental release using a feature flag\n\nDevelopment stage progression (such as experiment to beta)\n\nRelease\n\nAnnouncement\n\nWhile development stages can be used to indicate release progress, is not itself iteration.\n\nIterate toward global maximum\n\nIf we are not aware of interdependencies beyond our team, and we are not collaborating with others across the organization, we risk deliverables that settle into a “local maximum” of quality, richness, and efficiency. This localization is largely defined by team structure and organizational boundaries. While an iteration can take place within a single team, that team is responsible for identifying inter-dependencies and proactively communicating and aligning with other teams working on related projects. This helps ensure that iterations are not “half-baked” and align with work being done across the entire organization.\n\nDon’t wait\n\nDon’t wait on the small things. When you have something of value like a potential blog post or a small fix, implement it straight away. Right now, everything is fresh in your head and you have the motivation. Inspiration is perishable. Don’t wait until you have a better version. Don’t wait until you record a better video. Don’t wait for an event (like Contribute). Inventory that isn’t released is a liability since it has to be managed, becomes outdated, and you miss out on the feedback you would have received had you implemented it straight away. When we don’t wait we signal intent to others that we have a purpose to resolve something. Note: “Don’t wait” should not be used as a justification for not iterating toward the global maximum or at expense of the plan. If there are interdependencies to be considered or the iteration is customer facing, slow down and ensure that we are considering what is best for GitLab and our customers.\n\nSet a due date\n\nWe always try to set a due date. If needed, we cut scope. If we have something planned for a specific date, we make that date. For example we shipped over 133 monthly releases. But every one of them doesn’t contain all the features we planned. If we planned an announcement for a certain date, we might announce less or indicate what is still uncertain. But we set a due date because having something out there builds trust and gives us better feedback.\n\nCleanup over sign-off\n\nAs discussed in Sid’s interview on iteration, waiting for approval can slow things down. We can prevent this with automation (such as tests of database migration performance) or clean-up after the fact (refactor a Pajamas if something was added that isn’t coherent), but we try to ensure that people don’t need to wait for sign-off. As iteration does not require us to ship to all users on day one, we can clean up after an internal or beta release to mitigate the negative impact to all customers.\n\nStart off by impacting the fewest users possible\n\nIteration does not mean being open to all users from day one. If you do a gradual rollout of your change, prefer:\n\nFew users over many users\n\nInternal users (dogfooding) over external users\n\nEnvironments with fast feedback (SaaS) over slow feedback (self-managed)\n\nReduce cycle time\n\nShort iterations reduce our cycle time. Merging frequently also prevents merge conflicts.\n\nWork as part of the community\n\nSmall iterations make it easier to work with the wider community. Their work looks more like our work, and our work is also quicker to receive feedback.\n\nMinimal Valuable Change (MVC)\n\nWe encourage MVCs to be as small as possible. Always look to make the quickest change possible to improve the user’s outcome. If you validate that the change adds more value than what is there now, then do it. This may be additive (adding something) or subtractive (removing something). No need to wait for something more robust. More information is in the product handbook, but this applies to everything we do in all functions. Specifically for product MVCs, there is additional responsibility to validate with customers that we’re adding useful functionality without obvious bugs or usability issues.\n\nMake a proposal\n\nIf you need to decide something as a team, make a concrete proposal instead of calling a meeting to get everyone’s input. Having a proposal will be a much more effective use of everyone’s time. Every meeting should be a review of a proposal. We should be brainwriting on our own instead of brainstorming out loud. State the underlying problem so that people have enough context to propose reasonable alternatives. The people that receive the proposal should not feel left out and the person making it should not feel bad if a completely different proposal is implemented. Don’t let your desire to be involved early or to see your solution implemented stand in the way of getting to the best outcome. If you don’t have a proposal, don’t let that stop you from highlighting a problem, but please state that you couldn’t think of a good solution and list any solutions you considered.\n\nBy making a proposal you also provide better visibility into the work and the context surrounding it.\n\nIn this GitLab Unfiltered video, GitLab CEO and co-founder Sid Sijbrandij converses about iteration in engineering, leveraging proposals to break work into smaller components.\n\nEverything is in draft\n\nAt GitLab, we rarely mark any content or proposals as drafts. Everything is always in draft and subject to change. When everything is in draft, contributions from team members as well as the wider community are welcomed. By having everything in draft and assuming others have low context, confusion can be reduced as people have shared access to information.\n\nUnder construction\n\nAs we continue to expand the number of users we have, they will continue to expect stability and reliability. We must optimize for the long term without sacrificing stability along the way. This means that users may be inconvenienced in the short term, but current and future users will enjoy a better product in the end.\n\nEducating users on the longer-term plan helps create a shared understanding of how a small change will incrementally grow into something more. For example, we could share how a dropdown will evolve into a much more nuanced solution in the future. We can take the following steps to articulate our plan:\n\nOpen a feedback issue that provides context about the initial MVC (example)\n\nEnsure the direction page articulates a long-term plan (example)\n\nAnnounce the MVC in a release post, link to the feedback issue, and link to the direction page (example)\n\nLow level of shame when dogfooding\n\nIn many organizations, you take a risk when you put forth any work that’s not perfect, work where you haven’t spent endless cycles planning for contingencies or counterpoints. Because of this, you’re incentivized to invest a lot of time and effort into preparing for ‘What if?’ scenarios before any work is presented, even if the release is not customer facing and there is a low level of risk in imperfection.\n\nThe downside to that is clear when we are dogfooding: If you do eventually put forth the work, but it needed to be course-corrected a long time ago, you’ve squandered time that you could have spent improving it through iteration.\n\nHaving a low level of shame when dogfooding or working internally requires you to combat a natural inclination to conceal work until it’s perfect, and instead celebrate the small changes.\n\nCultural lens\n\nCultural differences can bring unique challenges and expectations to iteration. For some, expressions like “it doesn’t have to be perfect…” can challenge cultural norms. We encourage you to bring your authentic self and seek shared understanding when iterating. Giving feedback and ensuring psychological safety are necessary for every iterative attempt.\n\nFocus on improvement\n\nWe believe great companies sound negative because they focus on what they can improve, not only on what is working well. In every conversation, inside and outside the company, we should ask a question: What do you think we can improve? This doesn’t mean we don’t recognize our successes; for example, see our Say Thanks value.\n\nWe are positive about the future of the company. We are Short Term Critical And Long Term Optimistic (STeCALTO, for short).\n\nBe deliberate about scale\n\nFirst, optimize for speed and results (and be deliberate about how your change affects other processes/functionality); when it is a success, figure out how to scale it. Great examples are in this article by Paul Graham.\n\nResist bundling\n\nResist the urge to bundle a series of smaller iterations so team members don’t see a project as their last (or best) opportunity to contribute. It’s tempting to create encompassing projects or initiatives that roll many smaller projects up. This incarnation of scope creep drives up cost, encourages fewer risks, and incentivizes perfection (via longer cycle times) over progress. When we resist bundling, we reduce the risk that work will be canceled due to scale or scope. By resisting bundling we also reduce the coordination needed because fewer people or teams may be involved.\n\nMake two-way door decisions\n\nMost decisions are easy to reverse. In these cases, the Directly Responsible Individual should go ahead and make them without approval. Only when you can’t reverse them should there be a more thorough discussion. By embracing iteration and making two-way door decisions, we are more efficient and achieve more results.\n\nChanging proposals isn’t iteration\n\nChanging something without shipping it is a revision, not iteration. Only when the change is rolled out to users, whether internal users or a limited customer group, can you learn from feedback. When you’re changing a proposal based on different opinions, you’re frequently wasting time; it would be better to roll out a small change quickly and get real world feedback. Never call a revision an iteration because it is almost the opposite.\n\nEmbracing Iteration\n\nIn order to embrace iteration, we should have the attitude that we are trying to achieve as much as possible in a small amount of time; it’s where we land at the end state of an iteration that counts. The benefit of iteration is to get fast feedback from users. Focus on sharing context at the end of the first iteration rather than a hypothetical future state that requires multiple iterations. By embracing iteration we can increase creativity in incremental components.\n\nMake small merge requests\n\nWhen you are submitting a merge request for a code change, or a process change in the handbook, keep it as small as possible. If you are adding a new page to the handbook, create the new page with a small amount of initial content, get it merged quickly via Handbook Usage guidelines, and then add additional sections iteratively with subsequent merge requests. Similarly, when adding features to GitLab, consider ways to reduce the scope of the feature before creating the merge request to ensure your merge request is as small as possible.\n\nAlways iterate deliberately\n\nRapid iteration can get in the way of results if it’s not thought out; for example, when adjusting our marketing messaging (where consistency is key), product categories (where we’ve set development plans), organizational structure or product scope alignment (where real human stresses and team stability are involved), sales methodologies (where we’ve trained our teams) and this values page (where we use the values to guide all GitLab team members). In those instances, we add additional review to the approval process; not to prohibit, but to be more deliberate in our iteration. The change process is documented in the GitLab Handbook Usage page and takes place via merge request approvals.\n\n12 things that are not iteration\n\nIteration is often counterintuitive and difficult to do. To clarify what an iteration is, it helps to see examples of what is not an iteration. Below are 12 examples of things we’ve seen mistaken as iteration, but don’t meet our definition of iteration.\n\nReducing quality, or lowering goal posts\n\nAvoiding or reducing documentation\n\nCompromising on security\n\nDelivering something that’s not the recommended path or on by default\n\nShipping something of no value\n\nAn excuse to focus on unimportant items\n\nMoving through the release process\n\nRevisions you don’t ship or publish\n\nAn excuse to impose unrealistically tight timelines\n\nAn excuse to avoid planning\n\nImposing long hours\n\nExpecting others to fix your work\n\nIn this GitLab Unfiltered video, GitLab co-founder and CEO Sid Sijbrandij elaborates on each of these 12 things that are not iteration.\n\nIteration Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate iteration when we do the smallest viable and valuable thing, get it out quickly for feedback, and make changes based that feedback.\n\nGitLab Job Grade Demonstrates Iteration Competency by… Knowledge Assessment 5 Develops own knowledge by trying and failing. When asking questions isn\'t content with silence or unhelpful/incomplete responses, seeks out primary sources. Knowledge Assessment for Individual Contributors 6 Actively looks for opportunities to iterate and contribute to boring solutions. Balances short term gains and long term benefit with team\'s help. Ships things that aren\'t 100% knowing that you\'ll be able to improve them in the next revision. Asks questions with abandon. Publicly shares failures if you\'ll help colleagues learn. 7 Independently balances short term gains and long term benefit. Identifies opportunities to deliver projects in an iterative way. 8 Is able to take long term goals and turn them into small actionable steps that can be implemented in an iterative way. Identifies and prevents decisions that are not "two-way door decisions". Ships. All the time. Sounds like a broken record in discussions with more junior members of the team; always asking if we can make something smaller. Knowledge Assessment for People Leaders 9 In addition to upholding the requirements of a Staff/Manager level, a Principal/Sr. Manager practices and fosters the value of iteration to team members. They hold their team members accountable for iteration and boring solutions. 10 In addition to upholding the requirements of a Principal/Sr. Manager, a Distinguished/Director proactively finds ways to drive the value of iteration and boring solutions. 11 In addition to upholding the requirements of a  Distinguished/Director , a Sr. Distinguished/Sr. Director embeds the value of Iteration across the department and division.  They use their cognitive and analytical abilities to anticipate and adapt to unpredictabilities in regard to strategic risk in a way that benefits all involved. 12 In addition to upholding the requirements of a Sr. Distinguished/Sr. Director , a Fellow/VP leads the way for the value of Iteration across the division and cross functional teams. They confidently lead their teams through change and proactively take risks based on values and the strategic vision. EVP/CXO In addition to upholding the requirements of a Fellow/VP,  the EVP champions the value of Iteration across GitLab. They are comfortable leading through discomfort and the unease associated with change and innovation.\n\n👁️ Transparency\n\nBe open about as many things as possible. By making information public, we can reduce the threshold to contribution and make collaboration easier. Use public issue trackers, projects, and repositories when possible. Transparency is not communication. Just because something exists in the handbook or elsewhere doesn’t mean it can’t be communicated again or in a more robust fashion to the people who need to understand or acknowledge it. On a personal level, be direct when sharing information, and admit when you’ve made a mistake or were wrong. When something goes wrong, it is a great opportunity to say “What’s the kaizen moment here?” and find a better way without hurt feelings.\n\nEven as a public company, we know that our value of transparency will be key to our success. This value can be hard to follow at times. You might ask yourself: what should be shared, how much to share, whether or not to speak up but definitely take the time to always opt for maximum transparency by adhering to the operating principles below. Often, company values get diluted as they grow, most likely because they do not write anything down. But we will make sure our values scale with the company. As a public company, we declare everyone in the company as an insider, which allows us to remain transparent internally about our numbers, etc. Everything else that can be transparent will continue to be so.\n\nWhen there are exceptions, material that is not public by default is documented.\n\nPublic by default\n\nEverything at GitLab is public by default. The public process does two things: allows others to benefit from the conversation and acts as a filter. Since there is only a limited amount of time, we prioritize conversations that a wider audience can benefit from.\n\nOne example of transparency at GitLab is the public repository of this website that also contains this company handbook. Others include the GitLab CE and GitLab EE issue trackers, as well as marketing and infrastructure. Transparency creates awareness for GitLab, allows us to recruit people that care about our values, gets us more and faster feedback from people outside the company, and makes it easier to collaborate with them. It is also about sharing great software, documentation, examples, lessons, and processes with the whole community and the world in the spirit of open source, which we believe creates more value than it captures.\n\nIn line with our value of transparency and being public by default, all GitLab team member profiles should be public. Public profiles also enable broader collaboration and efficiencies between teams. To do so, please make sure that the checkbox under the Private profile option is unchecked in your profile settings. If you do not feel comfortable with your full name or location on your profile, please change it to what feels appropriate to you as these are displayed even on private profiles.\n\nBecause we are public by default and have the SAFE framework we don’t need to make cases for why things should be transparent. If something is unSAFE and needs to remain not public it can be.\n\nNot public\n\nWe make information public by default because transparency is one of our values. However it is most important to focus on results. Therefore, a category of information is public unless there is a reason for it not to be. If something is not public, there should be a reference in the handbook that states a confidential decision was taken with a link to our Not Public guidelines, unless GitLab Legal and Corporate Affairs believes it carries undue risk. We document what is not public by default on our communication page.\n\nIf you believe something shouldn’t be public that currently is (or vice versa), then make a merge request to the relevant page(s) suggesting the change so that you can collaborate with others and discuss with the DRI. When content contains information which is not public it is recommended to remove the specific sections which are not public, put them on their own page in the internal handbook, and then link out to that with a “not public/internal only” note. Always share publicly what we can.\n\nWhen information is not public, it may also be treated as limited access, only shared with certain GitLab roles, teams, or team members due to privacy considerations, contractual obligation, or other reasons that the author or DRI can specify. Certain kinds of information default to limited access, including details about team members or customers who did not give permission to share the information.\n\nMost companies become non-transparent over time because they don’t accept any mistakes. Instead, we should always err on the side of transparency when there is a choice to be made between caution or inaction, and transparency. If we make a mistake, we now know what the limits of transparency are for the company and we should document this. The only exception to this rule would be in the case when there are legal concerns.\n\nBecause some information is not public the public information can be lacking some context. We should be cognizant of that.\n\nDirectness\n\nBeing direct is about being transparent with each other. We try to channel our inner Ben Horowitz by being both straightforward and kind. Feedback is always about your work and not your person. That doesn’t mean it will be easy to give or receive it.\n\nArticulate when you change your mind\n\nIf you state one thing, and then change course and support a different direction, point, or outcome, articulate this. It is OK to have your position changed by new data. Articulating that an earlier stance is not your current stance provides clarity to others and encourages data-driven decision making.\n\nSurface issues constructively\n\nBe transparent to the right people (up) at the right time (when still actionable). If you make a mistake, don’t worry; correct it and proactively let the affected party, your team, and the CEO know what happened, how you corrected it, and how—if needed—you changed the process to prevent future mistakes.\n\nTransparency is most valuable if you continue to do it when there are costs\n\nWe practice transparency even when hiding the facts would be easier. For example, many companies do not give you the real reason why they declined your application because it increases the chance of legal action. We want to only reject people for the right reasons and we want to give them the opportunity to grow by getting this feedback. Therefore, we’ll accept the increased risk of holding ourselves to a high standard of making decisions and do the right thing by telling them what we thought. Other examples are being transparent about security incidents and participating in and contributing to Live Broadcasts.\n\nTransparency has costs (distraction, mis-interpretation, etc.) but also great benefits (productivity, hiring, retention, brand awareness, etc). Team members can view more details on these benefits by referencing the “Transparency Benefit Quantification” slides in Google Drive). We should carefully weigh the tradeoff between costs and benefits, to prevent a knee-jerk reaction to reduce transparency when it has costs.\n\nSingle Source of Truth\n\nBy having most company communications and work artifacts be public to the Internet, we have one single source of truth for all GitLab team members, users, customers, and other community members. We don’t need separate artifacts with different permissions for different people.\n\nFindability\n\nOur transparency value means more than just making information accessible to all. In order to improve performance it’s important that we not only ensure information is accessible, but also ensure it flows to the correct places and is findable by those who need it. Focusing on information flow will ensure you, for example, utilize multi-modal communication, or that you keep your stakeholders informed of changes by posting links to MRs in Slack.\n\nSay why, not just what\n\nTransparent changes have the reasons for the change laid out clearly along with the change itself. This leads to fewer questions later on because people already have some understanding. A change with no public explanation can lead to a lot of extra rounds of questioning, which is less efficient.\n\nThis also helps with institutional memory: a year from now when you want to know why a decision was made, or not, the issue or MR that has the decision also shares why the decision was made. This is related to Chesterton’s fence - it’s much easier to suggest removing or changing something if you know why it exists in the first place.\n\nIf you use generalized terms such as “industry standard” or “best practices,” be sure to give context, as without context they can be seen as potentially vague or opaque.\n\nSimilarly, merely stating a single value isn’t a great explanation for why we are making a particular decision. Many things could be considered “iteration” or “efficiency” that don’t match our definition of those values. Try to link to an operating principle of the value or provide more context, instead of just saying a single value’s name.\n\nSaying why and not just what enables discussion around topics that may impact more than one value; for instance, when weighing the efficiency of boring solutions with the focus on customer results. When decisions align with all of our values, they are easy to discuss and decide. When there are multiple values involved, using our values hierarchy and directly discussing the tradeoffs is easier with more context.\n\nArticulating why also helps people understand how something changed when you articulate that you changed your mind.\n\nSaying why does not mean justifying a decision against all other suggestions. The DRI is responsible for their decision. The DRI is not responsible for convincing other people, but they should be able to articulate their reasoning for the change.\n\nWhen a GitLab Team Member comes across an ask or material (MR, handbook, etc.) that does not provide a “why” with sufficient context, the Team Member is responsible for getting the why and, if needed, working with the DRI to ensure that it is adequately documented and communicated to give context to other team members. In the absence of a why, team members may speculate the why. This is something that can lead to disruption and inefficiency.\n\nReproducibility\n\nEnable everybody involved to come to the same conclusion as you. This not only involves reasoning, but also providing, for example: raw data and not just plots; scripts to automate tasks and not just the work they have done; and documenting steps while analyzing a problem. Do your best to make the line of thinking transparent to others, even if they may disagree.\n\nTransparency Competency\n\nCompetencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. We demonstrate transparency when we are open with as many things as possible reducing the threshold to contribution and make collaboration easier.\n\nGitLab Job Grade Demonstrates Transparency Competency by… Knowledge Assessment 5 Uses public issue trackers, projects, and repositories when possible. Looks for opportunities to publicly share the things that they are working on. Knowledge Assessment for Individual Contributors 6 Provides context and background on projects and issues so that those with no prior knowledge are able to contribute to the discussion. They welcome feedback and new ideas as they know that will lead to a better solution. 7 Continually surfaces improvements across their functional area of expertise. They share feedback with others and understand how to disagree and commit to solutions. They model what it means to be as open as possible. They encourage conversation in public channels. 8 Implements open processes across their team. They also track team issues and projects openly so their team members are aware of everything that is happening on a team at a given time. They leverage feedback to drive the best possible outcomes with the information they have available. They also share feedback with their team and their peers in a timely, kind manner so their position on a given topic is known. Knowledge Assessment for People Leaders 9 Fosters and coaches openness across cross functional departments. They lead cross functional issues, projects and ideas inviting feedback to generate the best possible solution. They hold their teams accountable to continue to find opportunities to share things openly. They give feedback to their team members, peers and managers in a timely, kind manner so their position on a topic is known. 10 Drives their departmental strategy with openness as a key value. They hold their management team accountable to working openly and pushes them to make everything transparent even when it might be difficult to do so. They coach managers on the value that additional feedback can bring to the end solution. 11 Develops leaders that work openly and continue to provide timely, kind feedback across their division. They develop leaders that drive their teams with openness as a foundational part of the way that they operate. 12 Leads the company by being open in all things. They are open with things that might traditionally not be shared broadly. They communicate directly and provide feedback in a timely manner to initiatives happening within their department and across the company. They hold the e group and other leaders accountable for upholding this value. EVP/CXO Champions transparency both internally, across the company and externally. They participate both internally and externally in events and share the value that being open can provide to increasing trust with team members and others that interact with our product. They provide timely, kind feedback with initiatives happening internally and externally. They hold the e group and other leaders accountable for upholding this value.\n\nWhy have values\n\nOur values provide guidelines on how to behave and are written to be actionable. They help us describe the type of behavior that we expect from GitLab team members. They help us to know how to behave in the organization and what to expect from others.\n\nValues provide a framework for distributed decision making, detailed in GitLab’s TeamOps management philosophy. They allow individuals to determine what to do without asking their manager and they allow teams to make consistent decisions. When teams across the organization reference the same values in their decision making, there is consistency in how decisions are made. This ensures that our culture remains driven by our values.\n\nLastly, values create a conscious culture that is designed to help you prosper and experience exceptional personal growth through work.\n\nFive dysfunctions\n\nOur values also help us to prevent the five dysfunctions:\n\nFear of conflict Seeking artificial harmony over constructive passionate debate => prevented by transparency, specifically directness and collaboration, specifically short toes\n\nAbsence of trust Unwilling to be vulnerable within the group => prevented by collaboration, specifically kindness\n\nAvoidance of accountability Ducking the responsibility to call peers on counterproductive behavior which sets low standards => prevented by results, iteration, and transparency\n\nInattention to results Focusing on personal success, status, and ego before team success => prevented by results\n\nLack of commitment Feigning buy-in for group decisions creates ambiguity throughout the organization => prevented by transparency, specifically directness\n\nSome dysfunctions are not addressed directly by our values; for example, trust is not one of our values. Similar to happiness, trust is something that is an outcome, not something you can strive for directly. We hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given.\n\nOperating principles\n\nOperating principles are behaviors that empower GitLab team members to definitively live out a given value. They clarify what a given core value means and looks like at GitLab. Understanding this distinction is critical to thriving at GitLab, particularly for newer team members who may be familiar with a prior organization’s interpretation of iteration or collaboration (as examples).\n\nProcess for removing operating principles\n\nValues are not just things we do, but things that actively drive good behavior. When we remove them it doesn’t mean we stopped believing in it, just that it wasn’t actively helping to drive behavior. If we don’t prune our operating principles, then we will be like every other company: things that make sense but are not leading to a better culture.\n\nTo remove an operating principle from the Handbook page, submit your change through a merge request and explain your reasons in the merge request description.\n\nThe GitLab Value Handbook Page owner must approve and merge the request.\n\nMention the specific value\n\nMost companies have a list of values. In companies without strong values, folks often use generalizations when they refer to values. For example, “not a value add” or “scored well on values during our interview.” In companies with strong values, folks name the specific, relevant value as it applies to a given topic or situation. Values are only powerful when they are individually understood and applied by team members.\n\nHow to scale the business while preserving GitLab values?\n\nFor certain business decisions or projects (such as compensation and end-point management ), GitLab team members may have a lot of opinions and interest, and they want to provide their feedback and comments. On the other hand, it might be challenging for the project DRI to digest and respond to all these inputs. What should you do in this scenario?\n\nEveryone can contribute at GitLab. We encourage team members to share feedback and leave comments on issues. Leaving feedback and comments shows that team members care about a topic and about GitLab as a company. These perspectives may also uncover potential risks and problems in the project.\n\nThere shouldn’t be a “Don’t they have their job to do?” type of response. Furthermore, we shouldn’t judge team members who are perceived as being the “squeaky wheel.” At GitLab, we measure results, not hours. As long as a team member is producing required results, they are empowered to decide how to spend their time.\n\nOn the other hand, as GitLab grows in size, we need to make decisions and the decisions may not be agreed to by everyone. If a decision or project is sensitive or controversial, and receives large amounts of feedback, it can be challenging for the project DRI to handle. In these cases, it’s best to have time-boxed feedback built into timelines.\n\nIn a hypothetical example where a DRI needs to decide between red and gold potatoes for a stew, they would create an issue with the following sentiment:\n\nWe’re deciding between red potatoes and gold potatoes to go into the stew. We have to decide by Tuesday 2020-07-14 so that we can get our order to the grocery store on Wednesday 2020-07-15. We’ll be collecting input and feedback until that point. Jane is the DRI and will make the decision on 2020-07-14 with all the information we have at that point. Here is the framework we’re using for the decision:\n\nare there allergies to consider?\n\ncost per pound\n\nteam member preferences\n\nOnce the decision is made, it will be what is going into the stew.\n\nThis method has shown itself to be effective at soliciting productive feedback that doesn’t derail a timeline while ensuring team members feel heard.\n\nWhy our values are public\n\nCompanies are encouraged to copy and implement GitLab’s values. They are Creative Commons and can be copied verbatim.\n\nWe make our values public for the same reasons we make our OKRs (Objectives and Key Results) and strategy public. There is great power and efficiency in teams who share company values. Concealing values until after someone is hired into an organization is not a wise strategy.\n\nNot everyone will see our values and feel aligned with them, and that’s OK. By making values public, it shows respect for the time of job seekers who conduct due diligence on prospective employers. When people who are aligned with GitLab’s values apply for an open vacancy, this allows our hiring teams to more efficiently move candidates through the interview process.\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nCompanies may ask you to write a blank check. They’ll say, ‘Come join our organization, and when you’re here, you need to subscribe to our values, our way of working, and our strategy. It’s very essential, and it’s part of our identity!’\n\nBut these companies don’t give you the opportunity up front to evaluate it. It doesn’t make any sense to me. If it’s so important that people share your values, have them out there.\n\nHierarchy\n\nOccasionally, values can contradict each other. It’s useful to keep in mind this hierarchy to resolve confusion about what to do in a specific circumstance, while remaining consistent with our core values.\n\nThink of the hierarchy as a weighting system. Values higher in the hierarchy do not automatically override values lower in the hierarchy. Here are some examples:\n\nIf a change impacts Transparency positively but impacts Efficiency negatively in roughly the same amount, we would move ahead since Transparency is higher in the hierarchy than Efficiency.\n\nIf a change has a massive positive impact on Diversity but negatively impacts Iteration, we would move ahead even though Diversity is lower in the hierarchy than Iteration because the overall impact is more positive than negative.\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nIt’s an attempt to relieve at least some of the tension. It’s not absolute. If you think of values as binary, that’s not going to work. There will always be interpretation, and there’s always magnitude to consider.\n\nWe made a hierarchy so that it’s clear, in the end, the result matters most. For instance, we’re not going to be transparent for the sake of being transparent. We’re not radical in our transparency. We do it because we think it will lead to better outcomes.\n\nThose hierarchies are really important. They won’t preempt every debate, but it helps.\n\nUpdating our values\n\nOur values are updated frequently and as needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. If you’re a team member or in the core team please post a link to the MR in the #values Slack channel. If you’re not part of those groups, please send a direct Twitter message to @sytses.\n\nHow do we reinforce our values\n\nWhatever behavior you reward will become your values. We reinforce our values by:\n\nCriteria we use for promotions and communicate to the whole company on announcement.\n\nWhat we select for during hiring.\n\nWhat we emphasize during on-boarding.\n\nCriteria we use for our annual compensation review.\n\nWhat we refer to when making decisions.\n\nThe example the E-group sets for the company since a fish rots from the head down.\n\nWhat we expect from all team members, as ambassadors for our values.\n\nKeeping them up to date with a stream of commits that add details.\n\nBehavior we give each other 360 feedback on.\n\nBehavior we compliment.\n\nCriteria we use for discretionary bonuses.\n\nWhat we include in our offer letters\n\nCriteria we use to manage underperformance.\n\nWhat we do when we let people go.\n\nGiving value awards during Contribute.\n\nProviding GitLab team members and qualified individuals transparency into all aspects of the company through the CEO Shadow Program to enable them to better engage and collaborate cross-functionally.\n\nLinking the takeaways of courses to our values, like we did for the Crucial Conversations training.\n\nThe default settings of the software we use (for example: Speedy meetings, document sharing, agendas, etc.)\n\nReinforcing our values with features in GitLab, for example the Iterations feature.\n\nApplying one of our values virtual backgrounds in video calls.\n\nOur GitLab Song Book, the song lyrics often mention GitLab values.\n\nRegularly conduct a values exercise at the e-group offsite.\n\nThe most important moments to reinforce our values are decisions which affect individual team members most: hiring, promotions, and bonuses, which is why every promotion document at GitLab is shared with the entire company and uses the values as its core structure.\n\nIn negative feedback, we should be specific about what the problem is. For example, saying someone is “not living the values” isn’t helpful.\n\nYour values are what you hire for, what you praise people for, and what you promote them for. By definition, what you do in those instances are your values. It’s not what you say they are. Values should be explicitly part of our hiring process, our job profiles, and our review process.\n\nWhen we give bonuses and promotions, they are always linked to values. That’s the crucial thing. If you reinforce them there, that’s the most powerful thing you can do. — Sid Sijbrandij, GitLab co-founder and CEO\n\nWhat to do if values aren’t being lived out\n\nValue erosion can occur when indifference and apathy are tolerated. It can also occur when individuals justify undesired behaviors by interpreting values as “me values” rather than “company values.” For example, a team member may speak to the importance of personal efficiency in order to justify not collaborating professionally with peers. This is not what we expect from team members in terms of efficiency and collaboration.\n\nIf you feel that values are not being lived out in a given scenario, speak up and ask for context in a respectful manner. Navigating value conflicts starts with assuming positive intent from other team members. Offer links to relevant values and/or operating principles when discussing the issue. If there is confusion or disagreement about the interpretation of a value, please surface the discussion in GitLab’s #values Slack channel (for GitLab team members) or @-mentioning @gitlab on Twitter (for those who do not work at GitLab).\n\nIn a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context.\n\nAlmost every time we face a hard decision at GitLab, it’s because values are in conflict. It’s not binary logic. It requires conversation, and sometimes there is no obvious answer. We can only achieve resolution by respectfully talking with each other and trusting the DRI to make the ultimate decision.\n\nPermission to play\n\nFrom our values we excluded some behaviors that are obvious; we call them our permission to play behavior:\n\nBe truthful and honest.\n\nBe dependable and reliable.\n\nTry to keep promises. If you might not keep a promise, proactively communicate as soon as you suspect it.\n\nBe deserving of the trust of our team members, users and customers.\n\nBe committed to the success of the whole organization.\n\nAct in the best interest of the company, our team members, our customers, users, and investors.\n\nMake the best decisions for GitLab.\n\nAct in accordance with the law.\n\nDon’t show favoritism as it breeds resentment, destroys employee morale, and creates disincentives for good performance. Seek out ways to be fair to everyone.\n\nPlaying politics is counter to GitLab values\n\nWe don’t want people to play politics at GitLab.\n\nAn example of politics is people discussing a proposal and being overly focused on whose proposal it is. This is a manifestation of the Belief Bias, where we judge an argument’s strength not by how strongly it supports the conclusion but by how strongly we support the conclusion. Proposals should be weighed on their merits and not on who proposed them. Another example is people being promoted based on others liking them or having a lot of alliances. We want people to be promoted based on their results. We value collaboration, but that’s different from being promoted just because people like you.\n\nBelow are some attributes of political and non-political work environments. GitLab plans to maintain a non-political one.\n\nPolitical environment Non-political environment Values are weaponized and used out of their intended context Team members utilize values with a positive intent Team members are driven by self-interest Team members are driven by company interest Team members work in silos Team members optimize globally People have territorial behaviors and are quick to perceive suggestions as attacks People have short toes People have unhealthy alliances with backroom conversations People have good intent and actively collaborate with folks Information is intentionally withheld Information is shared early (often WIP) and at the same time with all interested parties People try to undermine each other’s credibility by arguing with the weakest part of their argument People take a “steel man” position and argue against the strongest version of your opponent’s position Folks do not provide direct feedback. Instead, they withhold their thoughts or speak behind each other’s backs Feedback is given directly. This includes feedback about a manager’s team Communicating your own suggestions through a report instead of directly Feedback is given directly from the person who has it Evaluating proposals or work by who said or did it instead of by what is in it Proposals\xa0and work is evaluated without regard to who worked on them Lack of transparency in escalations. Team members go to a manager without first attempting to align with peers on an issue or letting peers know Team members speak directly to each other about feedback and requests in order to resolve their own conflicts. When they escalate, they do it in an effective way\n\nValues make choices\n\nValues make and clarify choices. A well-chosen value has a defensible opposite. Apple, for example, values secrecy over transparency and product perfection over iteration. They are successful building around our counter values — although the result is a very different company.\n\nWhat is not a value\n\nAll-remote isn’t a value. It is something we do because it helps to practice our values of transparency, efficiency, results, and diversity, inclusion & belonging.\n\nQuestions from new team members\n\nDuring every GitLab 101 session with new hires we discuss our values. We document the questions and answers to Frequently Asked Questions about the GitLab Culture.\n\nNew team members should read GitLab’s guide to starting a new remote role, and reference interviews centered on values within the GitLab Unfiltered YouTube channel.\n\nMission\n\nOur mission is that everyone can contribute. This mission guides our path, and we live our values along that path.\n\nMitigating Concerns\n\nWe have a page which documents our Mitigating Concerns. Many of our values help to mitigate some of these concerns.\n\nGitLab Values Quiz\n\nAnyone with a GitLab account can access the GitLab Values Quiz. To participate in the quiz, you will need to complete this learning course in Level Up. If you have questions, please reach out to our L&D team at learning@gitlab.com.\n\nLast modified December 3, 2024: Release process is not iteration (8b0cde4d)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:58:10,353 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:58:10,353 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/company/
2024-12-07 17:58:16,091 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/company/'}, page_content="About GitLab\n\nAMAs\n\nWhat you need to know about Ask Me Anything (AMA)\n\nApproach to OKRs at GitLab\n\nAn overview of how OKRs are done at GitLab.\n\nBeing a public company\n\nGitLab as a Public Company\n\nIn 2017, GitLab established aspirational milestones for a public offering, achieving $1B of annualized recurring revenue, and positive operating cash flow in order to align our efforts and investments to common goals. GitLab began trading on the Nasdaq Global Select Market on October 14, 2021 under the ticker symbol “GTLB.”\n\nWe continue to believe that being a public company is an integral part of realizing our mission. As a public company, GitLab may benefit from enhanced brand awareness, access to capital, shareholder liquidity, autonomy, and transparency.\n\nCadence\n\nEverything in a company happens in a certain cadence. The period of each cadence differs. Learn about the cadences we have at GitLab.\n\nE-Group offsite\n\nThe E-Group offsite happens every quarter for four days after the Board of Directors meeting\n\nE-Group Weekly\n\nFor executives to connect on a weekly basis in order to get timely input from E-Group, align on key initiatives, inform about key business happenings and celebrate company successes.\n\nFamily and Friends Day\n\nAt GitLab, we are family and friends first, work second. A quarterly Family and Friends Day during COVID-19 helps our Team Members prioritize their well-being.\n\nGitLab All-Company Meetings\n\nAn overview of GitLab Assembly and Quarterly Kickoff Meetings\n\nGitLab Culture\n\nHere's a look at what you can expect from our culture and all-remote environment.\n\nGitLab Environmental, Social, and Governance\n\nAn overview of corporate sustainability at GitLab.\n\nGitLab licensing technology to independent Chinese company FAQ\n\nOn this page you can view frequently asked questions about GitLab licensing its technology to a new, independent Chinese company.\n\nGitLab Mission\n\nWe at GitLab believe that all digital products should be open to contributions; from legal documents to movie scripts, and from websites to chip designs.\n\nGitLab Purpose\n\nGitLab empowers everyone through knowledge sharing, job access, and our software platform.\n\nGitLab Strategy\n\nGitLab has a 3 year strategy to be the leading complete DevSecOps platform delivered as a single application.\n\nGitLab Vision\n\nBehind the scenes of The DevSecOps Platform\n\nGroup Conversations\n\nEverything you need to know about GitLab's daily, recurring Group Conversations\n\nHistory of GitLab\n\nReview a summarised history of GitLab and the adventure so far from 2011 up until the present day. Learn more here!\n\nInfrastructure Standards\n\nThis handbook section defines the latest iteration of infrastructure standards for AWS and GCP across all departments and groups at GitLab.\n\nInspired by GitLab\n\nWhich companies can be listed here?\n\nAny company that has been inspired by GitLab’s culture and/or by any part of our handbook can be listed here.\n\nTransparency is one of GitLab’s values, and so we encourage you and your company to read our handbook and use the parts that make sense to your business, or even adapt it to your context.\n\nWith that, we want to know what on GitLab’s culture or on GitLab’s handbook inspired you, and how are you and your company using it to the benefit your business?\n\nKey Reviews\n\nPurpose\n\nAt most companies, this would be a quarterly meeting for senior function leaders to present priorities, progress, and risk mitigations to the CEO. We allow some additional stakeholders to attend to invite a broader range of perspectives, give visibility to peers across functions, and create broader accountability.\n\nMembers of E-Group and department leaders nominated by their E-Group leader can be required or optional. Their E-Group member will determine desired participation from within their function.\n\nKPIs\n\nWhat are KPIs\n\nEvery part of GitLab has Key Performance Indicators (KPIs) linked to the company OKRs. Avoid the term metric where we can be more explicit. Use KPI instead. A function’s KPIs are owned by the respective member of e-group. A function may have many performance indicators (PIs) they track and not all of them will be KPIs. KPIs should be a subset of PIs and used to indicate the most important PIs to be surfaced to leadership.\n\nMeet Our Team\n\nMore than 3,000 people have contributed to GitLab. The GitLab Inc. team consists of the following 2,349 team members and their 363+ pets. We believe we’re the world’s largest all-remote organization and we currently have team members in more than 65 countries and regions. This page lists who people report to, and on a separate page we detail the organizational structure. You can get a sense of the team culture and our inclusion by visiting our culture page and our Identity Data page.\n\nOnly Healthy Constraints\n\nCompanies often slow down as they mature. GitLab strives for healthy constraints.\n\nOrganizational Structure\n\nGitLab has at most eight layers in the company structure (Associate/Intermediate/Senior, Manager/Staff, Senior Manager/Principal, Director/Distinguished, Senior Director, VP/Fellow, Executives, Board). View more here!\n\nOur stewardship of GitLab\n\nGitLab have an open core business model and generate almost all our revenue with subscriptions to paid tiers. Learn more!\n\nPricing model\n\nMost GitLab functionality is and will be available for free in our Free tier. Paid tiers include features targeted for managers, directors, and executives.\n\nQuote to Cash\n\nGitLab's Quote to Cash systems and processes\n\nStill a Startup\n\nGitLab elevates others through knowledge sharing, job access, and our software platform..\n\nWorking Groups\n\nLike all groups at GitLab, a working group is an arrangement of people from different functions. Learn more!\n\nYearlies\n\nYearlies are the annual goals for the company. Yearlies should have measurable deliverables.\n\nLast modified September 1, 2023: Add comment to vision doc to signpost to buyer exp. (25772a09)\n\nView page source - Edit this page - please contribute.")]
2024-12-07 17:58:16,701 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:58:16,701 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/about/
2024-12-07 17:58:22,697 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/about/'}, page_content='About the Handbook\n\nHistory of the handbook\n\nThe handbook started when GitLab was a company of just ten people to make sharing information efficient and easy. We knew that future GitLab team-members wouldn’t be able to see emails about process changes that were being sent before they joined and that most of the people who would eventually join GitLab likely hadn’t even heard of us yet. The handbook was our way of ensuring that all of our company information was accessible to everyone regardless of when they became part of the team.\n\nAdvantages\n\nAt GitLab our handbook is extensive and keeping it relevant is an important part of everyone’s job. It is a vital part of who we are and how we communicate. We established these processes because we saw these benefits:\n\nReading is much faster than listening.\n\nReading is async, you don’t have to interrupt someone or wait for them to become available.\n\nTalent Acquisition is easier if people can see what we stand for and how we operate.\n\nRetention is better if people know what they are getting into before they join.\n\nOn-boarding is easier if you can find all relevant information spelled out.\n\nTeamwork is easier if you can read how other parts of the company work.\n\nDiscussing changes is easier if you can read what the current process is.\n\nCommunicating change is easier if you can just point to the diff.\n\nEveryone can contribute to it by proposing a change via a merge request.\n\nOne common concern newcomers to the handbook express is that the strict documentation makes the company more rigid. In fact, writing down our current process in the handbook has the effect of empowering contributors to propose change. As a result, this handbook is far from rigid. You only need to look at the handbook changelog to see the evidence. Every attempt is made to document guidelines and processes in the handbook. However, it is not possible to document every possible situation or scenario that could potentially occur. Just because something is not yet in the handbook does not mean that it is allowed. GitLab will review each team member’s concern or situation based on local laws to determine the best outcome and then update the handbook accordingly. If you have questions, please discuss with your manager or contact the People Success team.\n\nHandbook Interpretation\n\nThe handbook is subject to interpretation. We do our best to be as clear as possible to minimize confusion and/or misinterpretation. We also recognize that we have a global audience and that may bring different interpretations. If you have any questions or need further clarification please check with the content owner of the page. When in doubt please reach out and ask.\n\nRemember that everything is in draft at GitLab and subject to change, this includes our handbook.\n\nCount handbook pages\n\nIt’s easy to see that the handbook is large, but have you ever wondered just how large? The handbook is over two thousand pages long. That’s a lot of good info!\n\nHistorical Word and Page Counts\n\nabout.gitlab.com/handbook\n\nDate Word Count Page Count Notes 2018-01-01 298,806 228 2018-10-01 427,929 335 2019-01-01 520,519 439 2019-04-01 656,668 586 2019-07-01 818,064 766 2019-10-01 987,397 884 2020-01-01 1,204,642 1,035 2020-04-01 1,491,017 1,222 2020-07-01 1,851,350 1,488 2020-10-01 2,166,627 1,759 2021-01-01 2,410,554 1,914 2021-04-01 2,615,372 2,056 2021-07-01 2,956,781 2,271 2021-10-01 3,138,952 2,355 2022-01-01 3,280,108 2,395 2022-04-01 3,474,993 2,553 2022-07-01 3,628,280 2,641 2022-10-01 3,732,384 2,724 2023-01-01 3,732,186 2,722 ⬅️ Last entry before migration 2023-07-01 3,905,979 2,743 2023-10-01 3,478,407 2,306 2023-12-22 0 0 ⬅️ Handbook Migration Complete\n\nhandbook.gitlab.com/handbook\n\nDate Word Count Page Count Notes 2023-07-01 150,732 133 2023-10-01 1,909,139 1,403 2024-01-01 3,631,360 3,003 ⬅️  Migration Completed 2024-12-07 3,910,897 3,141 ⬅️ Hugo generated Live Count\n\nMethodology\n\nWord and page counts are determined through a simple two-step process:\n\nCount the number of words in the handbook. This can be done by running find sites/handbook/source/handbook -type f -name "*.md" -o -name "*.md.erb" | xargs wc -w from the root of the repository.\n\nCount the number of pages in the handbook. This can be done by running grep -l -r "\\" * | wc -l from the root of the repository.\n\nNote: If you need to go back to an earlier version of the handbook, use git checkout `git rev-list -n 1 --first-parent --before="2021-07-02 00:00" master` specifying the next day after the day you want.\n\nView Statistics\n\nOn this page you can see handbook trends and discover popular pages that you may not know about.\n\nGitLab uses Snowplow to track handbook usage; the information can be viewed on Tableau.\n\nMore about the handbook\n\nWe’ve gathered some information about the handbook here, but there’s still more elsewhere.\n\nHandbook usage\n\nEvolution of the handbook on the CEO page\n\nChangelog\n\nHandbook editing examples\n\nContent Websites\n\nOverview\n\nThis area has traditionally been referred to as “the handbook”, but over time has grown in scope to include multiple sites, projects, repos, and types of content.\n\nTherefore, we are using the term “content websites” here to avoid ambiguity and properly frame discussions around this scope of responsibility.\n\nSee our direction page for more.\n\nIf you need help, please see the editing handbook section, or escalation information if it’s urgent.\n\nEditing the Handbook\n\nInformation on how to edit the handbook including tips and troubleshooting.\n\nGitLab Handbook Usage\n\nAbout how GitLab uses the handbook.\n\nHandbook Changelog\n\nThe last 100 Merge Requests to the Handbook\n\nHandbook Direction\n\nOverview\n\nThe GitLab Handbook is the single source of truth for how we operate at GitLab, including processes, policies, and product direction. In keeping with our value of transparency, the GitLab Handbook is entirely open to the world. We welcome feedback from the community and hope that it serves as inspiration for other current or future companies. The GitLab Handbook is also an incredible talent acquisition tool, providing candidates with valuable insight into how GitLab runs as a company.\n\nHandbook Escalation\n\nFor information on team members’ roles and responsibilities, see Content Websites page.\n\nIntroduction\n\nThe Handbook is a critical part of empowering team members to do their jobs effectively. As such, we have a group of team members who assist in resolving issues affecting all team members.\n\nReporting an issue\n\nIf you’re looking for general help, please see the editing handbook page.\n\nAny issues should be reported in the #handbook-escalation channel in Slack.\n\nHandbook Style Guide\n\nGitLab’s general communications practices are detailed at GitLab Communication, but beyond those we do have some channel-specific guidance available. See the list of resources below for links to other guides.\n\nHandbook style guidance is covered primarily by the handbook markdown guide, and the editing handbook page.\n\nIn the absence of handbook-specific guidance, follow:\n\nGitLab’s Writing Style Guidelines, or\n\nthe Documentation Style Guide.\n\nRelated Resources\n\nGitLab Communication\n\nMarkdown guide\n\nGitLab Documentation guidelines\n\nDocumentation style Guide\n\nGitLab style guides\n\nPajamas Design System\n\nMarketing site content style guide\n\nBlog style guide\n\nLast modified October 29, 2024: Fix broken links (455376ee)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:58:23,254 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:58:23,255 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/company/okrs/okrs-basics/
2024-12-07 17:58:29,423 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/company/okrs/okrs-basics/'}, page_content='Overview of Objectives and Key Results (OKRs)\n\nGeneral information on OKRs, criteria, and guidance on how to write them.\n\nWhat are OKRs?\n\nOKRs stand for Objectives and Key Results and are our quarterly objectives. OKRs are how to achieve the goal of the Key Performance Indicators KPIs. They lay out our plan to execute our Yearlies, which in turn support our strategy, and help make sure our top goals and how to achieve them are clearly defined and aligned throughout the organization.\n\nObjectives are an aspirational goal to be achieved. They define what we’re aiming to do, and they show how individual, team, or department work impacts the overall direction of GitLab by connecting work to overall company strategy.\n\nKey Results are measures of progress against aligned objectives. They capture how we measure success in obtaining the objective. By achieving a Key Result (outcome), we create progress for the linked objective.\n\nYou can use the phrase “We will achieve a certain OBJECTIVE as measured by the following KEY RESULTS…” to know if your OKR makes sense. The OKR methodology was pioneered by Andy Grove at Intel and has since helped align and transform companies around the world.\n\nOKRs have four superpowers:\n\nFocus\n\nAlignment\n\nTracking\n\nStretch\n\nFundamentals of Impactful OKRs\n\nWhen writing objectives and key results focus on what you want to accomplish (the objective) and how you will measure the success (the key result).\n\nTo learn about the industry best practices for OKRs, how setting the right goals can mean the difference between success and failure, and how we can use OKRs to hold our leaders and ourselves accountable, watch John Doerr’s Ted Talk.\n\nWhen planning OKRs, be sure to consider OKRs at GitLab.\n\nCriteria for Objectives\n\nObjectives should be:\n\nAmbitious - More than just “business as usual” or incremental change, an objective describes an aspirational yet attainable transformation, growth, improvement that significantly improves the current situation. A few examples:\n\nIntroduce disruptive innovations\n\nEstablish differences between GitLab Inc. and competitors\n\nBe recognized as an industry leader in a category\n\nMeaningful - A top priority that advances GitLab’s strategy and greater mission; provides direction to departments, teams, and individuals about where we are going and how we are getting there.\n\nInspirational - By providing an aspirational yet meaningful target, empower teams to reprioritize work to focus on what makes the most progress against an objective; to accomplish this, objective should also be easy to remember.\n\nAlign Teams & Individuals - Need to be broad enough to be relevant to at least more than one department, team, or individual one level down, but also specific enough that the objective can be measurable by up to three key results; if associated Key Results are satisfied, Objective should be achieved.\n\nFor example, a product-related OKR at CEO level such as increase users by 100% would have the Product leader as the DRI but every other function would also need to contribute to achieve that KR.\n\nClear, Responsible Party - While aspirational objectives will often require collaboration and teamwork, they should have one DRI responsible for ensuring the completion the objective. This prevents diffusion of responsibility.\n\nFocused - A person or team should have no more than 3 Objectives in order to focus on only the highest priority items; this also provides clarity on what we will not do in order to remain focused.\n\nTransparent - Allow individuals, teams, and departments to see how their work contributes to the overall goals of GitLab. By sharing OKRs, individual, team, and departments are able to spell out their priorities and avoid having others disrupt focus with non-priority items.\n\nCriteria for Key Results\n\nKey Results should be:\n\nIterative - Aligned with our core value of iteration, a Key Result should focus on number of iterations or steps on the way to an outcome instead of just the outcome. Deliver x iterations instead of deliver y functionality.\n\nFor example, if we need to create a certain number of experimental and beta features to ultimately get to 1 GA feature, break the KR down into iterative pieces such as deliver 16 experimental features, 2 beta features, and 1 GA feature to highlight the iterations required to get to the end result, instead of only focusing on the end result.\n\nAspirational - Ambitious but realistic stretch goals; if it feels uncomfortable, it’s a good KR.\n\nIf you achieve less than 70% of your KRs, you may be stretching beyond what is achievable. If you are regularly achieving 100% of your KRs, your goals may not be ambitious enough.\n\nLinked - Be aligned to an Objective and be relevant to teams one level down; this alignment also allows KRs to easily roll down to become objectives one level down.\n\nKRs should not be too specific that the KR needs to be rolled more than one level down.\n\nClear, Responsible Party - one single person or team responsible for Key Result.\n\nInfluenceable - the Key Result owner (department, team, or individual) should be able to impact Key Result through the owner’s actions.\n\nExample: an individual KR to change company-wide net retention is too broad; there are too many other conflating factors for an individual to determine impact. However, net retention could be appropriate KR for an entire department.\n\nTime Bound - has a due date. At GitLab, unless otherwise stated, this is within the quarter.\n\nMeasurable - As Key Results provide the milestones for how we’ll complete objective, KR should be either a qualitative (i.e. completed Y/N or number of steps of project completed) or quantitative (increased a metric by x) measure that can prove we accomplished the Key Result. Quantifying Key Results strongly preferred.\n\nMutually Exclusive - Measure one component of progress for an objective without overlapping with progress represented by other Key Results. Progress for one Key Result shouldn’t count towards another Key Result.\n\nExample: A Key Result for number of transactions and a Key Result for average dollar amount of transactions are an example of mutually exclusive Key Results: one KR measures volume while the other Key Result measures quality of volume. On the other hand, a Key Result for total number of transactions and a Key Result for number of transactions from North America is an example of an overlap: progress gets ‘double-counted’ for both Key Result.\n\nCollectively Exhaustive - Key Results should fully account for what’s required to achieve an objective. If all Key Results are achieved, then, by default, the Objective must also be achieved.\n\nFew Words and Ubiquitous Language - As defined in Handbook.\n\nYou can score your OKRs against these criteria to determine whether your OKRs are effective.\n\nHow to Write OKRs\n\nThe following formula can be used to write objectives: Verb + What you want to do + In order to/for/so that (what you hope to achieve or rationale for objective). Objective Example: Increase awareness of company in the market in order to increase sales.\n\nClear goal including rationale for pursuing that goal\n\nThe following formula can be used to write Key Results: Verb + what you’re going to measure + from “x to y”. Key Result Example: 100% of employees certified on OKR expectations and process.\n\nFor information on getting started with OKRs and writing basic OKRs, consider reviewing the OKRs 101 lessons on What Matters. The “6 Principles of setting OKRs” may also be helpful.\n\nTeams should limit the number of OKRs they commit to so they have reasonable bandwidth to deliver. When planning OKRs:\n\nConsider non-OKR commitments. While OKRs are the big commitments that the team is making, they do not supersede core team members responsibilities. This means retaining team capacity beyond OKRs for work that falls higher in a prioritization framework (example from product), such as forced prioritization items with an SLA/SLO. Meeting SLOs is not an OKR, as OKRs focus on what’s different.\n\nOther than core team member responsibilities such as those outlined above, all other major commitments should be prioritized through OKRs and consider team bandwidth.\n\nIf a team gets a request for a major effort within the quarter, they can change the OKR by following the guidelines how to change an OKR within the quarter\n\nPlan for OKRs to be ambitious, but achievable within the team capacity that you have for OKRs. While OKRs are meant to be ambitious, you should aim to complete them and strive to hit the ambitious plan. We recognize that with ambitious planning some OKRs will not be completed, but it is striving and reporting on OKRs with the goal of hitting 100% that helps us accomplish strong results. We score individual OKRs as “on track” when they are at least 80% complete. In aggregate, we expect that the average completion score across OKRs is 70%.\n\nReview cascading OKRs first and allocate time for those. Cascading OKRs are those at the Company level that need your group’s contributions to be achieved. You should prioritize these first.\n\nIt is OK to push back on OKRs. If you can’t prioritize a cascading or shared OKR due to more important work, contact the owner of the OKR and make adjustments so that it is achievable without your team’s contribution, or remove it. It is OK to do this, with clear communication and collaboration. It is not acceptable to simply ignore the cascading OKR or shared OKR without clear upfront communication and prioritize other work instead.\n\nWhen writing OKRs, focus on outcomes, not tasks, and make key results measurable.\n\nFor any OKR with a dependency, make sure to get commitment on the dependency with shared objectives. If you don’t get commitment in the shared objective, make changes as needed to keep to feasible OKRs.\n\nTips for OKRs that are scoreable\n\nYour KRs should be statements that clearly indicate how you will score. For example, in FY21-Q4, the marketing team set a target of completing 5 experiments. It completed 4 out of the 5, but only one of these appeared to be successful. The marketing team initially saw this as a failure. Instead, it showed notable progress. 80% of experiments were completed. This was the stated KR goal.\n\nWe should aspire to set quantitative goals in which scoring is straightforward as a % of attainment (for example, X% of target ARR or logos). In rare instances, quantitative KRs are not possible or appropriate. For example, launching a new compensation program is hard to score without scoring guidelines. Does not launching = 0% attainment and launching = 100% attainment? What about hitting milestones in between? In these cases, note in the issue or epic how you plan to grade the KR at the end of quarter. In our compensation example, this could mean putting together a scoring guide such as this:\n\nMilestone Score Complete compensation analysis 20% Present plan to E-Group for feedback 40% Get sign-off from Finance 60% Complete comp refresh for all team members 100%\n\nPlease update scores in addition to status in Key Result Meetings.\n\nWatch this video for a demo on how to updated progress in OKR management:\n\nExample OKRs\n\nObjective: Establish GitLab leadership in X area.\n\nAvoid ❌ KR1: GitLab X becomes available in beta, including Y functionality in beta, with a path to general availability next quarter.\n\nInstead ✅ KR1: GitLab X reaches 100k paid MAU by end of quarter.\n\nAvoid ❌ KR2: Ship 10 components to support the use of X.\n\nInstead ✅ KR2: 30% of GitLab users are able to use X with the components built.\n\nThis aligns with a focus on outcomes and business results instead of KRs tracking tasks or launches.\n\nExternal examples\n\nExamples from whatmatters.\n\nOKR resources\n\nWith Goals, FAST beats SMART\n\nMeasure What Matters by John Doerr\n\nA Modern Guide to Lean OKRs\n\nLast modified October 28, 2024: Split OKR page (ca1fbdd1)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:58:29,978 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:58:29,979 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/company/okrs/okrs-in-gitlab/
2024-12-07 17:58:36,178 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/company/okrs/okrs-in-gitlab/'}, page_content='OKRs in GitLab\n\nHow to enter and organize OKRs in the GitLab platform.\n\nWatch this video for a demo on how to use GitLab for OKR management:\n\nCreating Objectives\n\nThe objectives for the quarter are defined on this page. To add new objectives in GitLab, follow the steps below:\n\nIn the GitLab OKRs project, navigate to OKRs by selecting Issues on the left sidebar.\n\nIn the top right corner of the Issues screen, select the down arrow next to New issue in the top right corner and then select New objective from the menu. Next, select the New objective button to create an Objective.\n\nEnter a short but descriptive title for the objective then click Create objective.\n\nWhen referring to a division, use the division name, not the e-group leader’s position. For example, use “Marketing OKRs” (not “CMO OKRs”).\n\nSelect the objective from the list to open in an editable view and add more details:\n\nIdentify the owner for the objective and assign them.\n\nEnsure that only one DRI is assigned to the objective. If there is a case of multi-ownership, it’s likely that the OKR/KR can be simplified or broken down further.\n\nIdentify the quarter for the objective and set the corresponding milestone.\n\nAdd labels so objective is searchable/filterable:\n\nAdd OKR label.\n\nAdd division label to assign to the relevant division (i.e. Sales, Product, etc).\n\nCompany OKRs are designated with a division::CEO scoped label.\n\nOnly Product & Engineering cascade OKRs below division level, so for Product & Engineering OKRs, in addition to division labels, follow stage labels to add the Section/Stage/Group scoped labels to assign the OKR to the relevant parts of Product Hierarchy.\n\nEach part of hierarchy should have a label. For example, an OKR for a group would have a division label, a section label, a stage label, and a group label.\n\nReview the objective against the SAFE Framework to ensure it is information that can be shared. Review to ensure that the objective should not be limited access. If the information is limited access, use code name if relevant or link to a supporting issue that is limited access.\n\nCreating Key Results\n\nEach Objective will contain one or more sub-objectives or key results. Sub-objectives are only used to cascade OKR down a level in organizational structure while Key Results are the measure which helps us understand if we’ve met our objective and can be cascaded down a level of organization structure to become an objective one level down. Key Results must be created as part of an Objective and cannot be created independent of an Objective since Key Results should be linked to an Objective.\n\nSince Key Results are the measure that helps us understand if we’ve met our Objective, Key Results are aligned to the same, single layer of the organizational structure as their parent Objective and not a Key Result for multiple layers of organizational structure. However, Key Results can be cascaded down from this single organizational structure layer by becoming Objectives in the next organizational level down - see Cascading OKRs.\n\nTo add new key results in GitLab, follow the steps below:\n\nNavigate to the objective that you want to add a child key result to by opening the GitLab OKRs project, selecting Issues on the left sidebar, then clicking on the target objective.\n\nAdd new key result by clicking Add in the Child objectives and key results section of an objective and then select New key result. Use the SAFE framework to determine whether it needs to have limited access.\n\nEnter a short but descriptive title for the key result then click Create key result.\n\nWhen referring to a division, use the division name, not the e-group leader’s position. For example, use “Marketing KR” (not “CMO KR”).\n\nSelect the key result from the list in the Child objectives and key results section to open in an editable view and add more details:\n\nIdentify the owner for the key result and assign them.\n\nEnsure that only one DRI is assigned to the KR. If there is a case of multi-ownership, it’s likely that the OKR/KR can be simplified or broken down further.\n\nIdentify the quarter for the key result and set the start date as the first date of that quarter and set the due date to the last day of that quarter.\n\nAdd labels so that KR is searchable/filterable:\n\nAdd OKR label.\n\nAdd division label to assign to the relevant division (i.e. Sales, Product, etc). Company OKRs are designated with a division::CEO scoped label.\n\nOnly Product & Engineering cascade OKRs below division level. For Product & Engineering OKRs, in addition to division labels, follow stage labels to add the Section/Stage/Group scoped labels to assign the OKR to the relevant parts of Product Hierarchy.\n\nEach part of hierarchy should have a label. For example, an OKR for a group would have a division label, a section label, a stage label, and a group label.\n\nReview the key result against the SAFE Framework to ensure it is information that can be shared. Review to ensure that information should not be limited access. If the information is limited access, use code name if relevant or link to a supporting issue that is limited access.\n\nOptionally, turn on check-in reminders.\n\nThe key result now appears in the Child objectives and key results section of the corresponding parent objective.\n\nWatch this video for a demo on how to create objectives and key results:\n\nCascading OKRs and how to Align Division OKRs to the company OKRs\n\nCascading is the process by which top-level company OKRs cascade down from company-level to division, department, team, and sometimes individual level. The OKRs that are directly aligned with Company KRs should be tied to the Company KRs in such a way as to allow scoring.\n\nAt GitLab, we typically create OKRs at each level where some OKRs align with the levels above, but not all.\n\nBased on the current methodology and feature set in the product, there are two ways to align OKRs to company OKRs:\n\nAdd relevant OKRs as related items. Most of the time, this is what teams use.\n\nHave all relevant OKRs as children of a Company KR.\n\nThe second method should be used only if all relevant OKRs can be added as children, because Progress is automatically scored based on the children if any exist.\n\nIn the future, when manual scoring is available, a mix of the two methods can be used for a single KR.\n\nIf an OKR is related, but does not score towards the Company KR, edit the description to add a note.\n\nCreating company OKRs\n\nTo allow for division, department, or team objectives to be added as child objectives or KRs, the Company key results should be created as an objective, not as a key result, as GitLab functionality doesn’t allow for a KR to have child OKRs.\n\nThe Office of the CEO does the following:\n\nCreate the Company objective.\n\nCreate the Company key results as child objectives of the Company objective.\n\nOnce company OKRs are created, other divisions and departments following one of the two methods for team OKRs that score towards company OKRs.\n\nMethod 1: Add relevant OKRs as related items\n\nTypically at GitLab, divisions create OKRs to automatically have progress score towards division objectives. To indicate that a division KR should also show progress of a Company KR, add the division KR as a related item of the Company KR following these instructions:\n\nClick on the relevant Company KR to add related items.\n\nClick Add in the Linked items section.\n\nClick inside of the following item(s) text field.\n\nFind (enter text to filter) and select 1 or more objective(s) or KR(s) that should score to the Company KR.\n\nClick Add to add the selected OKR(s).\n\nDo this for all OKRs that contribute to company OKRs. However, be careful not to link an OKR to multiple Company KRs.\n\nWhen this method is used, the Office of the CEO will update the score manually based on the scoring of all related items.\n\nA hypothetical example where division KRs score directly to division objectives, and should also progress a Company KR:\n\nCompany Objective: Retain and grow top talent – automatically scores from KRs including KR1\n\nKR 1: Have 10% of managers enrolled in leadership program – manually scored based on related items\n\nRelated: Sales OKR: Have 10% of managers enrolled in leadership program – child of and automatically scores to CRO Objective\n\nRelated: Marketing OKR: Have 10% of managers enrolled in leadership program – child of and automatically scores to CMO Objective\n\nMethod 2: Add all OKRs as children of Company KR\n\nThis method should only be used if all OKRs that will score towards the Company KR can be children of the KR, because the Company KR progress is automatically scored based on its children. The hierarchy looks similar to this:\n\nCompany objective\n\nCompany KR (a GitLab objective)\n\nDivision objective\n\nDivision KR\n\nDivision KR\n\nTo add the division OKRs as children of the relevant Company KR:\n\nClick on the Company KR you want to be the new parent for an objective/key result.\n\nClick Add in the Child objectives and key results section of the Company KR.\n\nCreate team objective or KR as a child objective of the relevant Company KR (Company KR will be a GitLab objective).\n\nIf the team objectives or KRs already exist, find the objective or key result for alignment by typing the name of the OKR in the search bar that appears in the Child objectives and key results section. See documentation to add a child objective.\n\nIf applicable, add the team key results as children inside of the team objective.\n\nEnsure they have an assignee, labels, etc. following guidelines on Creating Key Results.\n\nA hypothetical example where division OKRs score directly to a company OKR:\n\nCompany Objective: Retain and grow top talent – automatically scores from KRs including KR1\n\nKR 1: Have 10% of managers enrolled in leadership program – automatically scores from child OKRs\n\nCRO OKR: Have 10% of managers enrolled in leadership program\n\nCMO OKR: Have 10% of managers enrolled in leadership program\n\netc. (all divisions participating should be added)\n\nNote: Using this method, if you need to track the team objective or KRs separately, you can take a look at Engineering’s guidance on tracking department OKRs. If you need the team objective or KRs to score to another parent objective, duplicating the OKR is currently the only way to do so.\n\nSearch and Filter OKRs\n\nYou can use the List view to filter by the assignee or by your team using labels. For example:\n\nThis view shows all engineering division OKRs. Division::engineering label can be swapped out for any other division/stage/section/group scoped label.\n\nThis view shows all OKRs assigned to @sytses\n\nYou can bookmark or share the URL for future reference.\n\nWatch this video for a demo on how to find the OKRs you’re looking for:\n\nLast modified October 28, 2024: Split OKR page (ca1fbdd1)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:58:37,004 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:58:37,004 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/security-operations/sirt/sec-incident-response/
2024-12-07 17:58:43,245 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/security-operations/sirt/sec-incident-response/'}, page_content='Security Incident Response Guide\n\nThis is a Controlled Document\n\nIn line with GitLab’s regulatory obligations, changes to controlled documents must be approved or merged by a code owner. All contributions are welcome and encouraged.\n\nPurpose\n\nThe Security Incident Response Team (SIRT) is on-call 24/7/365 to assist with any security incidents. If an urgent security incident has been identified or you suspect an incident may have occurred, please refer to Engaging the Security Engineer On-Call and use the Slack /security command by going to a new message thread anywhere in Slack, typing the following command and pressing enter: /security\n\nInformation about SIRT responsibilities and incident ownership is available in the SIRT On-Call Guide.\n\nScope\n\nIncident Identification\n\nSecurity incident investigations are initiated when any security event is detected on GitLab.com, on another GitLab service, or as part of the GitLab company. These investigations are triaged by qualified Security team members and dispositioned as false positives when the triage evidence is obvious and risk-free. If there is any question about the event being potentially harmful or negatively impactful to GitLab customers, services, products, team members, 3rd party services, or alike, the Security team investigates the incident.\n\nIncident indicators can be reported to SIRT either internally, by a GitLab team member, or externally. It is the Security team’s responsibility to determine when to investigate dependent on the identification and verification of a security incident.\n\nThe GitLab Security team identifies security incidents as any violation, or threat of violation, of GitLab security, acceptable use or other relevant policies.\n\nSIRT will follow processes in the Material Breach Determination internal handbook page for any security incidents that individually, or in aggregate may be a material breach, including 3rd party breaches that may have a material impact to GitLab. Incidents that have the potential to be material will be treated as MNPI.\n\nRoles & Responsibilities\n\nRole Responsibilities GitLab Team Members Responsible for following the requirements in this procedure SIRT Responsible for implementing and executing this procedure SIRT Management (Code Owners) Responsible for approving significant changes and exceptions to this procedure\n\nProcedure\n\nIncident Response Process: this guide covers the following activities for all security incidents\n\nDetection\n\nThe SIRT, other internal, or external entity identifies a Security or Privacy event or risk that may be the result of a potential exploitation of a Security Vulnerability or Weakness, or that may be the result of a misconfiguration, or an innocent error\n\nOne of our Security detection controls identifies event(s) outside of the established security baseline\n\nA security issue is escalated into an incident out of an abudance of caution and to validate any assumptions\n\nAnalysis\n\nSIRT determines whether the reported security or privacy event is in actuality security or a privacy event\n\nSIRT determines the incident severity and priority based on the following incident classification methodology\n\nContainment\n\nPrevent the spread of unauthorized or malicious use of the affected system or data\n\nMitigates and eventualy fully remediates the root cause of the incident to prevent further damage or exposure\n\nSIRT may implement additional controls to minimize the damage as a result of the incident\n\nDetermine if it is safe to continue operations with the affected system\n\nPermit or deny the operations of the affected system\n\nEradication\n\nComponents that have caused the security incident are eliminated\n\nRemoval of the attackers’ access to the environment or the targeted system\n\nStrengthen the controls surrounding the affected system\n\nRecovery\n\nRepresents the effort to restore the affected system’s operations after the problem that gave rise to the incident has been corrected\n\nImplementation of additional monitoring controls\n\nUpdate the incident record with any relevant details\n\nPost-Incident analysis and activities\n\nRetrospective and lessons learned activity\n\nLeaked Secrets Incident Response Process\n\nWhen secrets are confirmed to be leaked, it is important to minimize the exposure time by immediately revoking the secrets. This can be done by automation or manual revocation by the Security team. Security will immediately revoke the secrets to prevent further abuse even if the potential impact of that action isn’t clearly understood at that time. In some cases this may cause disruption, when the secrets are being used for legitimate processes. Because of this potential for impact to services dependent on the revoked secrets, Security posts a notification to the #security-revocation-self-service Slack channel, where secrets owners can use the channel for manual or automated self-service. Since secret has already been exposed and revoked, and to make it easier for secrets’ owners to find their secrets in the channel, the clear text version of the revoked secret is published as a part of the notification.\n\nConfidentiality\n\nSecurity incidents may (and usually do) involve sensitive information related to GitLab, GitLab’s customers or employees, or users who (in one way or another) have engaged with GitLab. GitLab, while codifying the Transparency value, also strongly believes in and strives to maintain the privacy and confidentiality of the data its employees, customers, and users have entrusted us with.\n\nA confidential issue means any data within the issue and any discussions about the issue or investigation are to be kept to a need to know basis. This will involve specific GitLab employees only unless permission is explicitly granted by GitLab Legal, a GitLab Security Director, the VP of Security, or the GitLab Executive Team.\n\nWhich team members have access to a specific incident is defined on a case to case basis by SIRT according to our limited access policy. Whenever a team member needs access to the incident, this should be requested in the corresponding incident channel or in #security-operations. Bypassing security controls to access the incident issue will result in Security Operations being notified.\n\nIncident Tracking\n\nSecurity incident investigations are opened in the SIRT group. The project will be created using the Incident Response project template. To create the incident, the /security command in Slack has to be used over manual creation. Please refer to the Engaging the Security Engineer On-Call page for further detail.\n\nAll artifacts from an investigation must be handled per the Artifact Handling and Sharing internal handbook page.\n\nNOTE: The tracking issue, any collected data, and all other engagements involved in a Security Incident must be kept strictly confidential.\n\nIncident Severity\n\nAssigning severity to an incident isn’t an exact science and it takes some rational concepts mixed with past experiences and gut feelings to decide how bad a situation may be. When considering severity, look at:\n\nThe type of data involved and how it’s classified using the Data Classification Policy\n\nWas this data leaked or disclosed to parties who should not have visibility to it?\n\nHas the data been modified in our records? (either confirmed or believed to be)\n\nWas a user or service account taken over?\n\nWhat level of access did this account have and to what services or hosts?\n\nWhat actions were taken by the compromised account?\n\nIf a vulnerability is present on a host or service, consider the impact it might have on GitLab and the likelihood of it being exploited by using the Risk Factors and Risk Scoring documentation.\n\nWas the vulnerability exploited? If so, how was it used and how frequently?\n\nWhat is the scope of the incident?\n\nHow many GitLab.com users were/may have been impacted?\n\nHow many hosts or services?\n\nHas this incident resulted in any hosts or services being unavailable?\n\nTo help place the correct severity rating on the incident you are about to submit, please refer to the Incident Classification page.\n\nInternal Engagement & Escalation for High-Severity Incidents\n\nCoordinate with internal teams and prepare for the incident investigation:\n\nOpen an incident-focused Slack channel to centralize non-verbal discussion, particularly if the incident is of a sensitive nature. This is done by using /sirt-escalate in slack.\n\nFor artifact handling, a Google Drive folder and shared Google Doc should have been created automatically and linked to the issue.\n\nIn the event that an incident needs to be escalated within GitLab, the Security Engineer On Call (SEOC) will page the Security Incident Manager On Call (SIMOC). It is the responsibility of the SIMOC to direct response activities, gather technical resources from required teams, coordinate communication efforts with the Communications Manager On Call, and further escalate the incident as necessary.\n\nCharacteristics of an incident requiring escalation include but are not limited to the following:\n\nIncidents involving or likely to involve data with an Orange or Red classification\n\nIncidents that are likely to impact, or are actively impacting the availability or functionality of essential services\n\nIncidents affecting legal or financial resources\n\nIncidents that are likely to require a breach notification or public notification\n\nIncidents involving criminal activity or that may require the involvement of law enforcement\n\nIncidents involving key personnel such as executive leadership\n\nIf applicable, coordinate the incident response with business contingency activities.\n\nContainment\n\nOnce an incident has been identified and the severity has been set, the incident responder must attempt to limit the damage that has already occurred and prevent any further damage from occurring.\n\nThe first step in this process is to identify impacted resources and determine a course of action to contain the incident while potentially also preserving evidence. Containment strategies will vary based on the type of incident but can be as simple as marking an issue confidential to prevent information disclosure or to block access to a network segment.\n\nIt’s important to remember the containment phase is typically a stop-gap measure to limit damage and not to produce a long term fix for the underlying problem. Additionally the impact of the mitigation on the service must be weighed against the severity of the incident.\n\nWhen triaging priority::1/severity::1 incidents there may be times that SIRT or Infrastructure are unable to mitigate an issue, or identify the full impact of a potential mitigation. In these cases the Development Escalation Process can be used to engage with the development team on-call. It is important that this process is followed as documented and only for priority::1/severity::1 issues.\n\nRemediation and Recovery\n\nDuring the remediation and recovery phase the incident responder will work to ensure impacted resources are secured and prepared to return the service to the production environment. This process may involve removing malicious or illicit content, updating access controls, deploying patches and hardening systems, redeploying systems completely, or a variety of other tasks depending on the type of incident.\n\nAn Incident Review will be completed for all incidents. To prevent future occurrences and better our security posture, incident retrospectives will be conducted for all severity::1 incidents and others where there is indication for added value.\n\nThis phase should prioritize short term changes that improve the overall security of impacted systems while the full recovery process may take several months as longer term improvements are developed.\n\nResolution\n\nUpon completing the containment, remediation, communication and verification of impacted services, the incident will be considered resolved and the incident issues may be closed after a review.\n\nThe incident response process will move on to a retrospective and lessons learned phase through which the process improvements and overall security of the organization can be analyzed and strengthened.\n\nInternal & External Communication\n\nOur security incident communication plan defines the who, what, when, and how of GitLab in notifying internal stakeholders and external customers of security incidents.\n\nEngaging Law Enforcement\n\nIf during the course of investigating a security event the incident itself, materials involved in the incident (stored data, traffic/connections, etc), or actions surrounding the incident are deemed illegal in the United States, it may be necessary (and advisable) to engage U.S. law enforcement.\n\nThe Security Engineer On-Call will immediately escalate to the Director of Security Operations to raise awareness of the legal concern.\n\nFollowing review, the Engineer and Director will engage the VP of Security and VP of Legal for validation of next steps.\n\nThe Director of Security Operations will then contact the appropriate local law enforcement agencies, state agencies or US (federal) government agencies.\n\nWhen You Join an Incident Channel or Call\n\nIn the event of a perceived major security incident (which may prove to not be one at a later point), adhoc communication is sometimes required for coordination. This is outlined in the sections above. If you are identified as someone who could assist during the perceived security incident with either the identification, confirmation, or mitigation of the incident, you will be added to a dedicated Zoom call or Slack channel. Upon joining that call/channel, please take note of the following:\n\nThis is crisis management communication channel, that means that it’s private by default. It may contain business critical or PII information that cannot be shared with the larger company at this time, or ever. Should GitLab Security determine that the content of this particular communication channel can be made internally available or public at a later point, the required changes will be made.\n\nRead the channel history before asking questions. Get some context, read through past conversations and related documents. The relevant person will reach out to you with specific asks at the right time.\n\nDo your best to stay professional. However, be aware that security incidents are often stressful and we’re all humans. People may raise their voice, or use wording that seems unnecessary, harsh or inappropriate. It’s important to cut people some slack (no pun intended) during this stressful time, and raise/address any potentially erratic behavior with the relevant manager once the incident is over.\n\nHumor is your ally. No, it really is.\n\nIncident Labels\n\nUse proper labels. The correct use of dedicated scoped incident labels is critical to the accuracy of the data in the incident tracker and the subsequent metrics calculated from it. A list of all labels can be found in the GitLab SIRT group internal handbook page.\n\nExceptions\n\nExceptions to this procedure will be tracked as per the Information Security Policy Exception Management Process.\n\nReferences\n\nParent Policy: Information Security Policy\n\nSecurity Communications Runbooks (internal)\n\nIncident Communications Plan\n\nMarketing Emergency Response process\n\nTime-sensitive blog post process\n\nMarketing rapid response process\n\nLast modified November 4, 2024: Fix broken links (2eb0e162)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:58:43,906 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:58:43,906 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/security-operations/sirt/severity-matrix/
2024-12-07 17:58:50,130 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/security-operations/sirt/severity-matrix/'}, page_content='Security Incident Severity and Priority Matrix\n\nIncidents will be classified using Priority and Severity labels. SIRT will use the criteria defined below when assigning labels and the SIRT Escalation Guide for escalations.\n\nPriority\n\nThe priority label is used to indicate the importance and guide the response timing of the incident. Priority labels are expected to be set based on the circumstances of the incident, number of impacted users, and affected systems. Priority should be adjusted as the incident is worked and the conditions change.\n\nUrgency Example Expected Response GitLab Label Immediate A service which is critical for day-to-day operations is unavailable. The incident’s sphere of impact is expanding rapidly, or quick action may make it possible to limit its scope. Time-sensitive work or customer actions are affected. The incident affects high-status individuals or organizations (i.e., upper management or major clients). Unauthenticated RCE vulnerability on production instances. Immediate response from SEOC is needed. Work should continue in every region (follow-the-sun), with updates per shift in relevant channels. ~priority::1 High The fact that an indicent is still ongoing influences the urgency score. Furthermore, if credentials were leaked in the process, we need to act sooner than possible. A patched RCE vulnerability on production instances. The issue can wait until next business day. Work should continue in every assigned region, with daily updates in relevant channels. ~priority::2 Moderate Affected services are optional and used infrequently. The effects of the incident appear to be stable. Important or time-sensitive work is not  affected. A patched RCE vulnerability on production instances that is being rolled out to the wider public. No urgent action required, but actively monitored by SIRT. Work should continue in every assigned region. Updates are posted in the incident issue when needed. ~priority::3 Low Limited to no affected services. Actions being taken are cleanup or preventative. A previously revoked and investigated access token has been discovered. No action required, monitored in case the situation changes. Updates are posted in the incident issue when needed. ~priority::4 Eventually False positives kept open for review, informational notices. No action required, handled when/if SIRT has spare cycles. Updates are posted in the incident issue when needed. ~priority::5\n\nSeverity\n\nThe severity label is used to indicate the actual or potential impact and helps determine the priority of the incident. Severity should remain the highest level assessed once triage has been done. If it is determined the severity was inaccurately assessed, it should be updated with why the adjustment was made and how we arrived at that conclusion clearly documented in the issue comments.\n\nImpact Example GitLab Label Critical Severe impact to production data confidentiality, integrity or availability is likely if immediate action is not taken. Current controls do not satisfactorily mitigate the risk. Possibility of mass customer impact. Or, reputational risk is severe. ~severity::1 High Impact to production data confidentiality, integrity or availability is likely if one or more security controls are circumvented.  Current controls mitigate the initial risk. Customer impact or high likelihood of customer impact. Or, reputational risk is high. ~severity::2 Moderate Unlikely to impact production data confidentiality, integrity or availability unless multiple security controls fail or are bypassed. Current controls mitigate the initial risk. No customer impact. Or, reputational risk is moderate. ~severity::3 Low No risk to impact production data confidentiality, integrity or availability unless multiple security controls fail or are bypassed. Current controls are adequate. No risk of customer impact. Reputational risk is low or highly unlikely. ~severity::4\n\nConsiderations for determining severity\n\nThere are a few factors we take into account when determining impact. Every time we are faced with a security incident, we evaluate the scope and exposure of the risk, the confidentiality level, and more. By doing so, we split the issue into multiple, easier to assess, sub-issues. Here are a few examples:\n\nHow many of the following areas of the CIA Triad apply?\n\nConfidentiality\n\nIntegrity\n\nAvailability\n\nAffected Surface - What is the affected surface?\n\nGitLab infrastructure\n\nCustomer data\n\nCloud accounts\n\nOne particular application\n\nA customer’s instance\n\nYour own machine\n\nExploitability - How easy is it to exploit the issue?\n\nVery easily - Attacker simply needs to run a command or script to trigger the issue.\n\nRequires some effort - Attacker requires specific conditions such as someone else to be logged in to exploit the issue.\n\nDifficult - Attacker requires specific conditions that are difficult to achieve.\n\nVisibility - Who can see this issue?\n\nEveryone\n\nSomeone with specific access\n\nOnly me\n\nThe more areas of the CIA Triade that apply combined with the significance of the Affected Surface, Exploitability, and Visibility should be used to determine an estimated Severity\n\nLast modified June 27, 2024: Fix various vale errors (46417d02)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:58:50,657 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:58:50,658 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/security-operations/secops-oncall/
2024-12-07 17:58:56,813 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/security-operations/secops-oncall/'}, page_content='Security Operations On-Call Guide\n\nThe Security Operations sub-department is collectively responsible for responding to reports of actual or potential security incidents on a 24/7/365 basis.\n\nThe SIRT (Security Incident Response Team) generally responds to reports of suspicious activities (e.g. Phishing, hacking, social engineering) and security alerts.\n\nThe Trust & Safety team generally responds to reports of cryptomining, platform SPAM, abuse, bullying and violations of terms of service.\n\nPrior to scheduling planned time off, Security Operations team members should consult with the team to ensure proper coverage will be available.\n\nSecurity Operations Managers also share in On-Call responsibilities and need to ensure proper coverage for escalations and emergencies. The Security department maintains a series of On-Call escalations to ensure that every reported incident is responded to in a reasonable timeframe.\n\nOn-Call scheduling for SIRT is organized in Pager Duty within the Security Responder policy.\n\nOn-Call scheduling for Trust & Safety is organized in Pager Duty within the Trust & Safety Responder policy.\n\nOn-Call Security Handoffs\n\nTimes\n\nStandard handoff times are as scheduled. However, team members are empowered to agree on a temporary modified handoff schedule as long as all those involved agree and the team is notified about changes.\n\nSIRT (November - April)\n\n23:00 to 07:00 UTC –> APAC - 8 hours\n\n07:00 to 15:00 UTC –> EMEA - 8 hours\n\n15:00 to 23:00 UTC –> AMER - 8 hours\n\nSIRT (April - November)\n\n22:00 to 06:00 UTC –> APAC - 8 hours\n\n06:00 to 14:00 UTC –> EMEA - 8 hours\n\n14:00 to 22:00 UTC –> AMER - 8 hours\n\nSIRT times are reflected in the SIRT Handoffs calendar. In case both parties agree to change the time, this should be reflected in the calendar at least 24 hours prior to the handoff. This allows other team members the ability to adequately plan their schedules the night before. Changing the meeting time counts as a notification.\n\nTrust and Safety\n\n23:00 to 07:00 UTC –> APAC - 8 hours\n\n07:00 to 15:00 UTC –> EMEA - 8 hours\n\n15:00 to 23:00 UTC –> AMER - 8 hours\n\nSIRT Written Handoff\n\nIncident issues are the SSoT for any incident. Be sure to include any significant incident updates within the incident summaries.\n\nSIRT is using the self-developed tool Handogotchi (check promotion of Handogotchi on Tine) for written handover summaries. Handogotchi reminds the SIRT engineer on call to update incidents and add additional information one hour before handoff time. It will automatically send links to open incidents half an hour before handoff times.\n\nWritten handoffs are required to be completed at least half an hour before the end of every shift and are the basis for warm handoffs.\n\nFor all incidents, we highly encourage pausing after no longer than one hour to document and make it a general habit to keep documentation up to date after every work step. For all questions on documentation, please consult the Incident Report Writing Guide\n\nSIRT Warm Handoff\n\nSIRT uses warm handoffs to clarify written handoffs and avoid misunderstandings in complex situations. They should take no more than 15 minutes. One person per region is required (outgoing and incomming).\n\nThe outgoing region prepares the handoff as described in the section above. The incoming region should familiarize themselves with the written handoff before attending the meeting. Team members should be prepared for warm handoff meetings, so that the meetings will be efficient, with a focus on open questions and clarifications.\n\nBecause the incidents are well documented, there is no written agenda for warm handoffs. All significant discussion points that come up must be immediately documented and corrected in the incident issue.\n\nWarm handoffs are only required during the week. This is because warm handoffs would otherwise have to be performed at around midnight on weekends for EMEA.\n\nSIRT On-Call\n\nDuring all On-Call shifts, the On-Call Engineer is filling the role of the "Triage Engineer".\n\nWeekday\n\nWeekday On-Call Engineer Responsibilities\n\nSecurity Operations provides weekday On-Call coverage using a follow-the-sun model. Weekday On-Call Security Engineers are the team members that cover the On-Call responsibilities during their region’s sunny time.\n\nA Weekday On-Call shift typically covers one work week, from Monday to Friday.\n\nThe Weekday On-Call Security Engineer is expected to cover the "Triage Engineer" role, and should be the first responder to alerts and incidents as they are presented via PagerDuty and via the various Slack and alerting channels.\n\nWeekend\n\nWeekend On-Call Security Responsibilities\n\nThe Weekend On-Call Security team member will be responsible for covering On-Call responsibilities from AMER Friday evening until APAC Monday morning according to the established On-Call Security Handoff times.\n\nThe Weekend On-Call Security team member is responsible for timely responding to PagerDuty and the incident response process in accordance with the "Triage Engineer" role.\n\nDuring the weekend hours, the Weekend On-Call Security team member is not expected to be at their computer working unless they are responding to an incident, triaging alers, or working on a leadership request for critical deliverables. However, they will be asked to acknowledge any Pager Duty incidents via their mobile phone within 15 minutes, and begin triaging the incident within one hour. Priority 3 Severity 3 and below incidents can be handled by the team as weekday tasks.\n\nThe Weekend On-Call is responsible to acknowledge, and triage all alerts once a day. Resulting incidents should be either worked or delegated according to the triage guidelines. See "Alert Triage" for details.\n\nWhen there is a signficant business need, the Weekend On-Call Security team member may be responsible for ensuring continuity of critical deliverables as determined by leadership. Critical deliverables will generally consist of, but are not limited to: threat hunting and mitigation, bug fixes, cryptomining, customer impacting SPAM, or detection and response engineering to protect against credible threats.\n\nWeekend On-Call Security Scheduling\n\nWeekend On-Call slots will be filled on a volunteer basis, meaning team members can sign up for the slots that would fit their schedules. The SIRT and Trust and Safety teams will have individual Weekend On-Call schedules so that one person from each team will cover the Weekend On-Call shift. General guidance is that team members should volunteer for the appropriate ratio of qualified team members to weekends requiring coverage. For example, in a team of 12 qualified team members, volunteering for 4 to 5 weekends per year, per person would allow for full coverage. Please note, ratios may change from time to time depending on the size of the team.\n\nIf there are open remaining slots, the Security Operations managers will assign slots to team members who have not hit their target amount of slots. For example, if there’s an open slot and a team member that should volunteer for 4 to 5 slots but has signed up for 2, the Manager can allocate the slot to that team member. If the team member is unavailable, they would be responsible for finding a replacement.\n\nIn case of emergencies, managers may seek other volunteers and in rare cases may need to assign coverage.\n\nWeekend On-Call Security Relief\n\nCurrent On-Call metrics show an average of less than one weekend page per month.\n\nBecause busy On-Call weekends sometimes happen, and because the weekend on-call team member needs to triage alerts, in recognition of weekend coverage, GitLab is proactively asking team members to take the next two business days off following their Weekend On-Call shift as time off in lieu, regardless of whether the team member had to respond to an incident.\n\nWhen scheduled for the Weekend On-Call Security shift, team members should:\n\nSubmit time off in lieu for the next two business days immediately following their Weekend On-Call shift. Because this time off is intended to provide team members with immediate relief, these days cannot be moved to days later in the week or month, regardless of other planned or unplanned time off.\n\nIf a holiday or Friends and Family day falls on the next business day, time off in lieu can be taken for the subsequent two days.\n\nCommit to covering the Weekend On-Call shift. Avoid signing up for weekends you are unable to cover, or otherwise have a conflict.\n\nFind replacement coverage if you cannot commit to covering the entire weekend.\n\nSIRT On-Call Paging\n\nOn-Call Paging Workflow\n\nThe SIRT On-Call paging workflow is currently designed to follow this escalation path:\n\nThe first page goes to our incident slack channel.\n\nAll Security Engineers in the sunny region are paged after 5 minutes of no response, with one designated On-Call Security Engineer per region during the week. During the weekend, one person will have volunteered for sole responsibility of weekend coverage. The on-call page will occur either all at once, or in a round-robin fashion. Team members not designated as the On-Call Security Engineer can and should provide assistance if the On-Call Security Engineer misses the page. When weekend assistance is provided, team members should request taking time off in lieu with their manager, and target 1:1 (hour for hour) time off, immediately following the weekend as long as proper coverage is available.\n\nThe Security Operations manager in the sunny region is paged as a backup if the team members don’t acknowledge the pages.\n\nSecurity Managers who volunteer as backups are paged if SIRT does not acknowledge the previous pages.\n\nThe Security Operations Director is paged if Security Managers don’t acknowledge the pages.\n\nSIRT On-Call Paging Duties\n\nThe On-Call Engineer’s primary concern is to provide timely and adequate responses to incoming pages. When receiving a page:\n\nAcknowledge the alarm in the corresponding alert Slack channel or through PagerDuty directly.\n\nReview incident’s GitLab issue and follow the checklists posted there for triaging.\n\nIf the alarm is not acknowledged, the Security Incident Manager On-Call will be alerted.\n\nEngineers should acknowledge pages within the first 15 minutes, and start performing initial triage of potential incidents within the first hour of the initial page.\n\nSecurity Managers On-Call\n\nIn addition to the Security Engineers being On-Call, the Security Managers across the GitLab Security Department act as backups in the event the Security Engineers are unable to acknowledge security pages. PagerDuty will automatically engage the Security Manager On-Call if SIRT doesn’t acknowledge the paging attempts.\n\nIt’s the responsibility of the Security Manager On-Call to:\n\nBe available via mobile phone during their On-Call shift if the Security Engineer On-Call does not acknowledge a page.\n\nAttempt to contact the Security Engineer On-Call to acknowledge the page. Note: If Slack is not available or an alternative means of communication is required, PagerDuty has cell phone numbers of GitLab team members involved in the on-call process. GitLab also sets up a Zoom channel (#Slack Down!) as backup communication channel.\n\nIf the Security Engineer On-Call is unresponsive, attempt to contact other Engineers to take on the page. Prioritize based on timezone and region.\n\nIn the event of a high-impact security incident to GitLab, the Security Manager On-Call will be engaged to assist with cross-team/department coordination.\n\nTriage Engineer\n\nDuring On-Call shifts the Security Engineer On-Call is the Triage DRI and has these core responsibilities:\n\nAcknowledge and triage pages; delegate\n\nMonitor and triage incidents; delegate\n\nMonitor and triage alerts; delegate alerts that are for their own activity; delegate resulting incidents\n\nContinue critical assignments as determined by management\n\nWeekday only:\n\nMonitor and respond to security related slack channels; delegate\n\nImprove on-call and incident handling processes - document on-call related problems and improvement opportunities by opening issues and any necessary support tickets (e.g. Devo support).\n\nContinue ongoing work where possible\n\nTriage Engineer Responsibility to delegate\n\nDelegation allows the team to spread the workload across the global team while maintaining adequate coverage and response times. It also minimizes the risk of one single person having to handle spikes in incident volume.\n\nOn-Call Engineers must delegate incidents to other Engineers after performing initial triage.\n\nDelegation guidelines:\n\nIncidents classified with either S1, P1, S2, or P2 should only be delegated to team members available in the current sunny region.\n\nAll other incidents can be assigned to any team member not out of office in any region.\n\nSometimes, team members are working on a high-priority, time sensitive assignment and are temporarily unavailable for delegation. These situations should be communicated to the team transparently. If those team members inadvertently receive delegated incidents, they should work with their manager for assistance in incident reassignment.\n\nThe On-Call Engineer is the last resort if no other team member is available to work on high-urgency incidents.\n\nTriage Process\n\nIncident Triage\n\nIncidents are triaged by following the checklist posted by the TriageBot.\n\nAlert Triage\n\nAlert triage is a continuous task on weekdays and a task that should be done at least once a day on weekends.\n\nAny alert can be converted to an incident and assigned to another team member following the triage delegation guidelines above.\n\nIncident Ownership\n\nWhoever is assigned to the incident after the initial triage is the person responsible for incident resolution. Use the assignee field in the GitLab incident to identify the responsible person. In case of a priority 1 incident, it should have one assignee per region. In these cases, the work should continue around the globe until the incident is contained and the priority lowered. In that case, the incident should go back to only having one assignee and DRI. When multiple people work on one incident, work is divided into tasks with their corresponding assignees.\n\nOwnership of an incident means being the person responsible for:\n\nEnsuring continued progression to a contained and resolved state\n\nMaintaining ongoing 24/7 coverage of high-severity incidents\n\nAccurate and timely issue tracking and communication with stakeholders\n\nAdequate documentation and communications\n\nBeing the responsible person does not imply being the sole person to perform incident tasks. Team members from all departments can be called upon to assist in incident resolution, and these requests should be documented as a task or related issue.\n\nExceptions\n\nExceptions to this procedure will be tracked as per the Information Security Policy Exception Management Process.\n\nReferences\n\nParent Policy: Information Security Policy\n\nLast modified November 14, 2024: Fix broken external links (ac0e3d5e)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:58:57,387 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:58:57,388 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/security-operations/sirt/security-incident-communication-plan/
2024-12-07 17:59:03,435 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/security-operations/sirt/security-incident-communication-plan/'}, page_content='Security Incident Communications Plan\n\nThis is a Controlled Document\n\nIn line with GitLab’s regulatory obligations, changes to controlled documents must be approved or merged by a code owner. All contributions are welcome and encouraged.\n\nPurpose\n\nGitLab takes the security of our clients’ information extremely seriously, regardless of whether it’s on GitLab.com or in a self-managed instance. In keeping with GitLab’s value of transparency we believe in communicating about security incidents clearly and promptly.\n\nScope\n\nThis communication response plan maps out the who, what, when, and how of GitLab in notifying and engaging with internal stakeholders and external customers on security incidents. This plan of action covers the strategy and approach for security events which have a ‘high’ or greater impact as outlined in GitLab’s risk scoring matrix.\n\nRoles & Responsibilities\n\nRole Responsibilities GitLab Team Members Responsible for following the requirements in this procedure SIRT Responsible for implementing and executing this procedure SIRT Management (Code Owners) Responsible for approving significant changes and exceptions to this procedure\n\nProcedure\n\nWhat is an incident?\n\nThe GitLab Security team identifies security incidents as any violation, or threat of violation, of GitLab security, acceptable use or other relevant policies. You can learn more about how we identify incidents in the GitLab security incident response guide.\n\n💁 Corporate incident response\n\nFor Support or Infrastructure managed incidents where external communication guidance is needed, please see the corporate communications incident response plan and engage that team via #corp-comms in slack.\n\n👷 Infrastructure incident response\n\nFor Infrastructure incidents, please follow the infrastructure incident management and communication process.\n\nDefining the scope/severity of an incident\n\nThe Security Engineer On-Call will determine the scope and severity and potential impact of the security incident. Once the potential impact has been determined, implementation of the appropriate internal and external communications strategy should begin.\n\nRoles and responsibilities in a Security incident\n\nSecurity team roles and responsibilities\n\nRole Responsibilities Security Engineer on Call (SEOC): This is the on-call Security Operations Engineer. The individual is the first to act, validate, and begin the process of determining severity and scope. Security Incident Manager on Call (SIMOC): This is a Security Engineering Manager who is engaged when incident resolution requires coordination across multiple parties. The SIMOC is the tactical leader of the incident response team, typically not engaged to perform technical work. The SIMOC assembles the incident team by engaging individuals with the skills, access, and information required to resolve the incident. The focus of the SIMOC is to keep the incident moving towards resolution, keeping stakeholders informed and performing SecCMOC duties. Security Communications Manager on Call (SecCMOC): This is the Security Incident Manager On-Call (SIMOC), Security Incident Commander or Security Assurance Engineer who will coordinate external communications efforts according to this security incident response plan and liaise across the extended GitLab teams to ensure all parties are activated, updated and aligned. Security External Communications: This function partners with and advises incident response teams in reviewing and improving messaging for external audiences (including customers, media, broader industry). This role laises with marketing teams for any necessary reviews or messaging deployment. This function should be engaged once first draft content has been developed using the Security incident external response issue template .\n\nMore about the CMOC responsibilities\n\nAs security practitioners and incident response engineers, our security assurance and security operations teams and engineers are best positioned to develop initial messaging and serve in the CMOC/Communications manager on call role.\n\nEach team-appointed CMOC is the DRI for:\n\nOpening the Security incident external response issue template and tagging in potential stakeholders and contributors\n\nDrafting the initial message(s)\n\nTracking development and deployment of the various content and\n\nIdentifying key stakeholders for contribution, review and approval (support, security/SIRT leadership, legal, etc)\n\nRouting and securing approvals from various parties (support, security/SIRT leadership, legal, etc)\n\nKeeping stakeholders updated and informed on the progress of communications development in the related incident response slack channel and issue(s)\n\nMore about the Security External Communications function responsibilities\n\nThe Security External Communications function is the DRI for:\n\nEditing and improving first drafts provided by CMOC\n\nAdvising on appropriate channels and forms of communication needed\n\nActing as an approval point on final messaging to ensure it’s ready for external use\n\nLiaising with PR and corporate communications for additional reviews and/or messaging needs (public/media statements)\n\nDeploying the messaging via collaboration with our PR (media statement), Content Marketing (blog post) and Marketing Operations teams (email response)\n\nPosting final communications materials to slack channels (#developer-relations, #social_media_action, #sales, #security-department and #customer-success) for awareness and use.\n\nSupport manager on call will manage support team awareness\n\nExtended team roles, responsibilities and points of contact\n\nMarketing Operations: Responsible for sending incident-related email to impacted parties in a security incident. This group has established a Marketing emergency response process and is engaged by creating an incident communication request using the incident_communications template, tagging in the assigned timezone’s coverage owner and posting the issue in the #mktgops channel in Slack.\n\nMarketing Ops can send emails through MailGun or Marketo. This group will determine based on the information provided what the best platform is for distribution. If a custom distribution list needs to be created, the data team may need to be involved.\n\nSupport Team: Using background information and prepared responses provided by the Security Engineer On Call and Communications Manager On Call, our Support Team will triage and respond to customer communications stemming from the security incident. Contact the on-call manager via #spt_leadership in Slack. If it’s urgent page the Support Manager On-call using /pd-support-manager command in Slack. To ensure this group has early awareness on security incidents and events they are autotagged as an FYI in the security-external-incident-or-event-response template.\n\nDeveloper Relations: May need to respond to customers and the general public via social channels, as such should be engaged before public-facing materials are released. Any prepared responses or FAQs should be provided to assist with their interactions. Contact this group in #developer-relations or any Slack channel by pinging @devrel-team. To ensure this group has early awareness on security incidents and events they are autotagged as an FYI in the security-external-incident-or-event-response template.\n\nDesignated Approvers: This is the group of individuals who act as reviewers and approvers across each piece of communications developed for a security incident. It includes representatives from Security, Support, Customer Success, Legal, Corporate Communications and Investor Relations.\n\nCommunicating internally\n\nSecurity incidents can be high-pressure, high-stress situations. Everyone is anxious to understand the details around the investigation, scope, mitigation and more. Ensuring that stakeholders across security, infrastructure, engineering and operations teams are informed and engaged is one of the chief responsibilities of the Security Incident Manager On Call. The Security Incident Manager On Call should focus on providing high-level status updates without delving too deeply into the technical details of the incident, including:\n\nCurrent Risk\n\nUsers Impacted (some, many, all?)\n\nServices Impacted (production, enterprise apps, other)\n\nTimeline of events\n\nMitigation steps that have been taken\n\nCurrent status of the incident\n\nNext steps\n\nCommunicating with GitLab team members\n\nAny time there is a service disruption for team members, the CMOC should post details regarding the disruption and related issue(s) in #whats-happening-at-gitlab, and cross-post in any related channels. It is important to identify if this is a production incident affecting gitlab.com or a service used by the organization.\n\nIncident response channel on Slack\n\nIn the cases of incidents that are on-going and require constant communication the Security Engineer on Call will set up an incident response Slack channel. All security incident team members and extended POCs should be invited. If the nature of the incident allows, the Slack channel will be public to GitLab and a link to this channel will also be shared in #security-department Slack channel to increase visibility.\n\nEngaging key internal stakeholders (when/how)\n\nGroup & Contacts When to Engage DRI to Engage At what Cadence In what Channel Director of Security Operations For S1 incidents immediately upon determination of the S1 severity rating SIMOC/CMOC 30 minute intervals (unless otherwise requested) In incident response Slack channel VP of Security For S1 incidents immediately upon determination of the S1 severity rating Director of Security Operations 30 minute intervals (unless otherwise requested) Slack direct message Broader e-group Immediately in cases of a data breach or an RCE with evidence of exploitation VP of Security 30 minute intervals (unless otherwise requested) #e-group Slack channel Sr. Director of Corporate Marketing and Director of Corporate Communications Immediately, if the incident has been publicly reported or if there is a regulatory requirement to make an announcement. In other cases, once the full impact and associated risk has been determined. SIMOC/CMOC Continuous In incident response Slack channel Legal If GitLab EE customers are impacted, or if the security incident includes a data breach including but not limited to: Exposure of PII / Personal Data Private Projects Financial Information VP of Security Continuous Incident response Slack channel Designated key approvers As soon as we know we’ll need to communicate with customers CMOC Continuous Incident response Slack channel\n\nCommunicating externally\n\nExternal communications should happen as soon as possible after the scope and impact of the security incident is determined, using concise and clear language. The first external communications are directed to affected parties. Examples include: Affected customers and third parties (including JiHu), providers of products, services or organizations involved in the supply chain for system components as related to the incident. Regulatory authorities are contacted based on incident scope, regulatory and legal requirements.\n\nTurnaround on customer messaging\n\nOnce it has been determined that external response is needed, the SIRT team should aim to develop, gain approval on a final customer communication and distribute and/or publish within 6 hours for an S1 severity vulnerability.\n\nProcess for security incident external communications\n\nOnce we’ve determined that we need to make an external statement or communicate with customers in some way, open a new issue using the Security incident external response issue template. This issue will be used by the SIMOC/SecCMOC to track content development, reviews and approvals.\n\nThe new security incident external response issue should be assigned to the SecCMOC.\n\nOnce all the actions under the “CMOC actions to take upon opening this issue” section are completed and a first draft(s) is/are in place, tag @heather into the issue for first review and consult on communications forms/channels (more details below).\n\nCommunications review, approval and deployment process\n\nOnce all of the various suggested communications is ready, the SecCMOC should tag @heather in the related security incident external response issue and security incident slack channel for first round review and edits.\n\nIn parallel, our Security External Communications team will engage the appropriate marketing teams for support (PR, Marketing Ops, Content teams) and begin creating the related issues for parallel marketing support and message deployment efforts.\n\nWhen Security External Communications has completed their review, the SecCMOC should route the communication doc to the designated key approvers as outlined below for their collaboration and review; being sure to note the time at which all approvals must be achieved (targeted deployment time is 6 hours, and includes 1-2 hours for information gather and communications drafting, and 1 hour of deployment time for blogs to be published and emails to be deployed). At this time, the designated key approvers have 30 minutes to review and make any necessary edits to the doc. Reviews must be provided or a stand-in appointed within this 30 minute time limit.\n\nOnce all feedback and edits have been synthesized by the SecCMOC, the designated key approvers should be tagged in slack for their final review and approval. This review and approval process should take no more than 30 minutes and approvers should mark their approval in the approval matrix at the top of the working incident response comms google doc.\n\nWhen the communication(s) is/are final, our Security External Communications will work with the appropriate marketing and communications teams to deploy the communications to the appropriate external and internal audiences.\n\nOur Security External Communications will ensure all final materials and associated deployment details are noted in the related communications issue and close the issue.\n\nDesignated key approvers\n\nOur intent is to provide clear and accurate information to GitLab users as quickly as possible. In the case of an S1 (critical) vulnerability, the targeted turnaround time on approved and deployed communications is 6 hours. Because of this accelerated response window, our security team (SecCMOC or Incident Commander) will announce the targeted cut-off time for approvals at the beginning of the review and approvals process (6 hours from the start of communications drafts) and will move forward, if needed at that time, when at least 2 of the 4 required groups (Security, Legal, Customer Success and Investor Relations) have approved. See below for more information.\n\nGroup Blog Customer Email FAQs for Support Teams Media Response Social/Forum Response VP of Security Approver Approver Approver Approver if quote attributed to Security, FYI otherwise FYI Only Senior Director of Legal, Privacy and Product Approver Approver Approver Approver Approver VP Customer Success Approver Approver FYI Only Approver FYI Only Support Manager on Call FYI Only FYI Only FYI Only FYI Only FYI Only Director of Corp Comms FYI Only FYI Only FYI Only DRI/Contributor FYI Only VP of Investor Relations Approver Approver FYI Only Approver FYI Only\n\n**Note**\n\nSee this confidential issue for contact details\n\nDesignated back-up approvers (engaged if primary reviewer is unavailable or unresponsive)\n\nFor the “required” approvers, we need at least 2 designated back-up approvers.\n\nSecurity: If VP Security is not available, one of the Security directors may approve, if not available move to VP of Engineering.\n\nLegal: Senior Director of Legal, Privacy and Product can approve. If not available, then move to Legal Counsel, and then move to CLO.\n\nCustomer Success: VP Customer Success can approve. If not available, Snr Director, Customer Success Managers, then Director of Customer Success, Public Sector.\n\nSupport Team: Support Manager on call can approve. If not available, move to a member of Support Senior Leadership, then to Support Managers if needed.\n\nCorporate Comms: Director of Corp Comms can approve. If not available, move to Manager, Public Relations and then move to Manager, Corp Comms if needed.\n\nInvestor Relations: VP of Investor Relations can approve. If not available, move to Chief Financial Officer, and then move to VP Finance and Business Technology for back-up approval.\n\n**Note**\n\nSee this confidential issue for contact details.\n\nAgreed upon response time for designated key approvers\n\nDesignated key approver response time: 30 minutes\n\nPer our crisis comms firm and GitLab’s Corporate Incident Response plans, each approver has 30 minutes to respond and review communications (providing feedback or edits) before we engage back-ups. Once feedback from the approvers has been received, reviewed and consolidated, a final review from approvers will be requested and each approver has 30 minutes response time to provide their approval. If we are nearing the established deploy time for communications and a given teams’ review and approval is not achieved within 30 minutes, we will move forward to finalization and deployment once we have approval from at least 2 of the 4 required groups (Security, Legal, Customer Success and Investor Relations). See below for more information.\n\nContacting designated key approvers on an urgent basis\n\nSee this confidential issue for more information on how to contact designated key approvers.\n\nEngaging designated backUp approvers\n\nIf 30 minutes has passed and the SecCMOC has not heard from a specific designated key approver, we move to engage all of that individual’s designated back-up approvers in the incident-related slack channel and issue. If we are nearing the established deploy time for communications and a given teams’ review and approval is not achieved within 30 minutes, we will move forward to finalization and deployment once we have approval from at least 2 of the 4 required groups (Security, Legal, Customer Success and Investor Relations).\n\nCommunications channels and forms\n\nThe communications channels and forms that should be used in an incident or event can vary but should align with our need to be responsive to our customers and our transparency value, and be balanced with the potential risk and exposure to customers.\n\nCommonly used forms and channels of communication:\n\nOur most common form of customer response is via direct email communications to affected customers.\n\nWhen a deeper dive response is needed, or to ensure broader coverage on a security incident or event, a blog post may be developed on an urgent basis.\n\nSee deeper dive explanations on forms and channels for consideration\n\nCommunication to JiHu should happen via the #security-vulnerability channel within the JiHu Slack workspace. GitLab team members Dominic Couture, James Ritchey, Jerome Ng, Mek Stittri and Kevin Chu have access to this channel.\n\nHelpful templates and runbooks\n\n👉 Our Security external incident or event response template (this is an internal template) has links to templates that can be used (make a copy)to start various communications.\n\n📝 Security incident communications runbooks are located here (internal only).\n\nPreparing and enabling external facing teams\n\nIt is important to keep in mind, any time we are communicating externally, we need to advise our support, customer, social and developer relations teams that we’ll be making external communication about an issue that affects customers and/or the community.\n\nFor this reason, each incident response (direct email, media statement, blog post, etc) should have accompanying:\n\nSocial media statement\n\nFAQs for our Support and customer-facing teams\n\nOn-going, live incidents on GitLab.com\n\nFor on-going, live site incidents on GitLab.com, updates are provided by the SIMOC/CMOC through status.io to https://status.gitlab.com/ and the @GitLabStatus twitter handle.\n\nExternal statements and other public, official communications\n\nDepending on scope, impact or risk associated with the incident, our Corporate Communications and Marketing team may determine that additional outreach is necessary. Any official statements about the security incident would be made by GitLab’s Director of Corporate Communications, VP of Corporate Marketing, CMO or VP of Security.\n\nOther helpful information\n\nPotential channels for use in a security incident\n\nCommunications Channels Purpose/Message Additional Details Incident Response Customer Email Provides incident background, response, potential, impact, follow-up actions, and who to contact with questions. Drafted by SIMOC/CMOC and reviewed by DRIs from Support, Legal, External Comms and Security. Sent from incident-response@gitlab.com . Should be in plain text with no link tracking . If an accompanying blog post is published, blog should be linked. Mitigation and response blog post Details the background, GitLab response and any action required by our customers. Developed when it is determined that a longer, more-in-depth response is needed, Content for the blog post is provided by the SIMOC/CMOC , and reviewed and approved by designated key approvers . The content team performs copyedits and merges. Note: collaboration and work on the response blog post should happen in the related incident response channel on slack. GitLab Security Release Alert/Email Indicates required action for customers and links to related mitigation and response blog. Email sent to opt-in security notices distribution list. If a related blog post has been published, this email should include a link. Prepared and sent by Security External Communications or Marketing Ops , Sent to Security Notices distro through Marketo. Users can sign up for this distribution list through our Communication Preference Center . Customer Frequently Asked Questions (FAQs) List of early customer questions and responses, or probable questions and responses. Created by SIMOC/CMOC and Support DRI. Provided to appropriate Support group . Social media post For distribution of related blog post, details our response to X issue. Security External Communications engages @devrel-team in the incident response Slack channel. Provides Community Expert(s) with tweet text and blog link. GitLab social media team should also be alerted for ongoing awareness and monitoring, using @social in slack.\n\nSync meetings to develop and review customer communications\n\nWhen appropriate, key stakeholders for contribution, review and approval should meet synchronously in a Zoom session to create and fine-tune customer communications (emails, FAQs, blog post, etc). Meeting synchronously in this case allows us to expedite the development of communications with key inputs from stakeholders in security, customer support and beyond and quickly move into the review stage. These zoom sessions are recorded and will be linked into the related security incident external response issue.\n\nExceptions\n\nExceptions to this procedure will be tracked as per the Information Security Policy Exception Management Process.\n\nReferences\n\nParent Policy: Information Security Policy\n\nSecurity Incident Response Guide\n\nSecurity Communications Runbooks (internal)\n\nIncident Communications Plan\n\nMarketing Emergency Response process\n\nTime-sensitive blog post process\n\nMarketing rapid response process\n\nSample issue template for security incident communications review and approvals (publicly-accessible)\n\nThis sample issue template can used be to route, review and track approvals on the communications surrounding critical security incidents. As this is a sample, you would need to adjust/modify/tailor as necessary to suit your own organization’s structure, processes and needs. Given that each organization is different and critical security incidents may vary, GitLab cannot guarantee any results with respect to your use of the template.\n\nLast modified September 18, 2024: fix-headings length per https://gitlab.com/gitlab-com/content-sites/handbook/-/issues/340#top (16808ce7)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:59:04,106 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:59:04,106 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/security-operations/sirt/security-shadow-security-operations/
2024-12-07 17:59:10,334 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/security-operations/sirt/security-shadow-security-operations/'}, page_content='Security Shadow: Security Operations\n\nCompletion of each course you will receive a certificate. At the completion of all 3 courses your name will be recognized on this page.\n\nSecurity Incident Response Team (SIRT)\n\nGitLab’s Security Incident Response Team is the first line of defense for the GitLab SaaS and GitLab as an organization. The primary goal of SIRT is to minimize and control damage from security incidents. This is accomplished through the development and deployment of detection tools to identify when a security incident has occurred, taking action to identify and contain the event to limit its scope and impact, remediating the underlying issue that led to the security event, and recovering from the security event so that operations can return to normal. In addition to responding to incidents, the SIRT works to proactively prevent security incidents through the management and deployment of cyber defense tools, ensuring compliance with security best practices for our infrastructure and team members, and maintenance and training around the incident response process.\n\nSchedule / Topics Covered:\n\nSIRT101.1: Intro to Incident Response\n\nSIRT101.2: Log investigation\n\nSIRT101.3: Detection, triage, remediation\n\nSIRT101.4: Hands-on SIRT Team Exercise\n\nCourse Length: 4 days, 8 hours\n\nTeam Manager: Valentine Mairet @vmairet, Matt Coons @mcoons\n\nTrust and Safety\n\nHave you ever debated why something is right or wrong, questioned a rule and wondered how to get around it? Do you prefer the uneasiness of ambiguity over the monotony of always knowing what to do? If you answered yes to the above, Trust and Safety might be the place you discover what happens behind the curtains… or not, who knows?\n\nThe Trust and Safety teams’ purpose is to try and ensure that users of GitLab.com operate within the scope of the GitLab Website Terms of Use, more specifically, our Acceptable Use Policy (AUP). As the name implies, the AUP is a policy that governs what the business has deemed to be the acceptable use of GitLab.com. The AUP mainly consists of 3 parts:\n\nCompliance: Ensuring that we are enforcing the relevant laws and regulations that are applicable to GitLab.com.\n\nThese are non-negotiable and include things like complying with the DMCA and removing illegal content.\n\nPrinciples: Ensuring that GitLab.com is not used in a way that negatively impacts others.\n\nThis is primarily based on our Values and include things like removing content that is concidered harmful and protecting others privacy.\n\nGoal: Ensuring that GitLab.com is not used in a way that would negatively impact our Vision.\n\nThis is primarily used to ensure that GitLab.com is used for it’s intented purpose, and to reduce any negatvie impact caused by an unintended and/or unforseen use of it.\n\nIf you think this is something you would be interested in learning about, maybe even do one day, come join us for a crash course in understanding the world of the Trust and Safety team!\n\nSchedule / Topics Covered:\n\nTS101.1: What we do and why - Introduction\n\nTS101.2: How we do it - Tooling and Workflows\n\nTS101.3: Hands-on Experience\n\nCourse Length: 3 days, 6 hours\n\nTeam Manager: Charl de Wit @cjdewit\n\nEnrollment\n\nReady to enroll? Click here for more information.\n\nLast modified July 9, 2024: Fix links and spelling (e30f31b6)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:59:10,881 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:59:10,881 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/support/readiness/operations/docs/policies/project_setup/gitlab_folder_setup/
2024-12-07 17:59:16,736 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/support/readiness/operations/docs/policies/project_setup/gitlab_folder_setup/'}, page_content='.gitlab folder setup\n\nSupport Operations policies page for setting up the .gitlab folder\n\nThe exact setup will depend on who is managing the project.\n\nEveryone in Support Readiness\n\nCreate a folder named .gitlab\n\nCreate a file in that folder named CODEOWNERS\n\nMake the contents the following:\n\n[Support Operations]\n* @jcolyer @nabeel.bilgrami @avilla4 @dtragjasi @secole @rverschoor\n\nUS Citizens only\n\nCreate a folder named .gitlab\n\nCreate a file in that folder named CODEOWNERS\n\nMake the contents the following:\n\n[Support Operations]\n* @jcolyer @secole\n\nZendesk Global Support Contributions Project\n\nCreate a folder named .gitlab\n\nCreate a file in that folder named CODEOWNERS\n\nMake the contents the following:\n\n[Support Managers]\n* @gitlab-com/support/managers\n\nZendesk US Government Support Contributions Project\n\nCreate a folder named .gitlab\n\nCreate a file in that folder named CODEOWNERS\n\nMake the contents the following:\n\n[Support Managers]\n* @JamesRLopes @lbot\n\nLast modified January 18, 2024: Support Readiness Handbook Revamp Part 1 (dc7e3936)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:59:17,322 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:59:17,323 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/campaigns/template/
2024-12-07 17:59:23,354 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/campaigns/template/'}, page_content='[NAME] Campaign\n\nEverything you need to know about the [NAME] campaign.\n\nCampaign Overview\n\nBusiness Objectives\n\nCampaign Visual\n\nMURAL goes here\n\nCampaign Pages & Activities\n\nSee the FY22 Marketing Calendar for upcoming virtual events\n\nAlways On Lead Generation:\n\n📚 Content |\n\n📹 On-Demand Webinar |\n\nResearch & Prep\n\nPersona & Positioning\n\nLevel:\n\nFunction:\n\nKeyword Research\n\nPolished Messaging\n\nBuyer Journeys, Content & Emails\n\nPrescriptive Buyer Journeys\n\nIndividual Contributor\n\nAwareness Content:\n\nConsideration Content:\n\nDecision/Purchase Content:\n\nManager\n\nAwareness Content:\n\nConsideration Content:\n\nDecision/Purchase Content:\n\nMarketo Nurture Emails\n\nOutreach Emails\n\nBehind the Scenes\n\nCampaign Execution Documentation & Resources\n\n[Campaign Epic]()\n- [Project timeline plan (GANTT)]()\n- [Copy Doc]()\n\nLast modified July 29, 2024: Fixing more formatting issues caused by the handbook migration (9b5eccc2)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:59:23,810 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:59:23,810 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/engineering/development/incubation/cloud-seed/
2024-12-07 17:59:29,644 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/engineering/development/incubation/cloud-seed/'}, page_content='⛅🌱 Cloud Seed\n\n⛅🌱 Cloud Seed\n\nGitLab is the one DevOps platform. Teams use GitLab (SaaS or self-managed) for development, planning, collaboration and automation. However, digital transformation is incomplete without cloud adoption.\n\nThus, Cloud Seed — a collaboration with Google Cloud — makes it trivial to consume cloud services from GitLab.\n\nCapabilities\n\nGenerate Google Cloud Service Accounts\n\nService accounts are authentication credentials that can be generated from the GitLab web interface\n\nUsed for a wide range of integrations and automation with Google Cloud services\n\nDeploy to Google Cloud Run\n\nCloud Run is a fully managed deployment platform for containerized applications\n\nSetup automated deployments to Cloud Run via the GitLab web interface including support for Preview Environments\n\nEvery Git commit, branch and tag is automatically deployed to the appropriate Cloud Run service environment\n\nProvision Google Cloud SQL databases\n\nProvision popular database instances easily from the GitLab web interface\n\nSupport all major versions of PostgreSQL, MySQL and SQL Service\n\nGenerate instances, databases and users to be used with deployment and test automations\n\nEnvironment (i.e. Git ref) aware database provisioning\n\nUsecases\n\nCloud native development with automated deployments to Cloud Run\n\nCloud migration and app modernization with Cloud SQL relational databases\n\nPositive business outcomes (grouped by persona)\n\nList of user personas with specific benefits they actualize:\n\nCompliance Manager, Security Analyst, Security Operations Engineer\n\nSecure, standardized deployment pipelines across the organization\n\nGitLab-Google Cloud driven authorization and permission model\n\nProduct Manager, Product Designer\n\nPreview environments to validate feature branches\n\nDevelopment Team Lead, Software Developer, Platform Engineer, Software Engineer in Test\n\nContinuous deployment for all Git commits, branches and environments\n\nEasy deployment automation and database provisioning\n\nPreview environments to validate feature branches\n\nSystems Administrator, Infrastructure Operator\n\nSecure, standardized deployment pipelines across the organization\n\nPrincipled GitOps with application source and infrastructure state\n\nApplication Ops, Release Manager\n\nStandardized pipelines for release automation\n\nSupport for feature, test and production release environments\n\nApplication Development Director\n\nIncrease Operational Efficiencies\n\nDeliver Better Products Faster\n\nReduce Security and Compliance Risk\n\nJobs to be Done\n\nDeploy web applications\n\n☑️ Authentication and authorization\n\n☑️ Deployment credential generation\n\n☑️ Provisioning and enablement of cloud services\n\n☑️ Deployment pipelines\n\n☑️ Preview environments\n\nProvision cloud data stores\n\n☑️ Authentication and authorization\n\n☑️ Database instance generation\n\n☑️ Database and user setup\n\n⏳ Networking configuration\n\nOpen source\n\nCloud Seed is an open-source program led by GitLab Incubation Engineering.\n\nSign up for the invite-only Trusted Testers platform and try out Cloud Seed before anyone else.\n\nEveryone can contribute\n\nThere are several ways one may contribute to Cloud Seed. These are listed below:\n\nBecome a Cloud Seed Trusted Tester in GitLab and share feedback\n\nIf you are familiar with Ruby on Rails and/or Vue.js, consider contributing to GitLab as a developer. Much of Cloud Seed is an internal module within the GitLab code base\n\nIf your familiarity lies with GitLab pipelines, consider contributing to the Cloud Seed Library project\n\nIf your expertize is in Google Cloud APIs and Google Cloud technologies, reach out to us, we need you!\n\nLinks\n\nCloud Seed\n\n@OpenCloudSeed on Twitter\n\nCloud Seed documentation\n\nSign up for the invite-only Trusted Testers platform\n\nSubmit feedback\n\nDemos\n\nRidiculously simple deployments\n\nPreview Environments\n\nDatabases Proof-of-Concept\n\nLast modified November 26, 2024: Fix broken external links (bc83f2be)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:59:30,331 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:59:30,332 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/leadership/1-1/
2024-12-07 17:59:36,499 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/leadership/1-1/'}, page_content='1-1\n\nMaintaining an effective and efficient agenda is important to get the best out of the 1-1 (read as: one to one) meetings you have with your team members. Furthermore this page will take you through other tips and tricks to conduct an effective 1-1 meeting.\n\nThe 1-1 Agenda\n\nMake sure you use a consistent agenda format for each 1-1.\n\nBoth parties add items to the agenda. Preferably, the majority added by the team member. If the manager puts more than half of the items on the agenda this is an indication that something is wrong.\n\nReference the suggested format for leadership as necessary.\n\nConducting a 1-1\n\nWe recorded a training about 1-1s which you can find here:\n\nIt’s advisable to schedule 1-1’s at least once a week. The choice of synchronous or asynchronous meetings can be made by the manager and their direct report, depending on their preferences and needs. To avoid prolonged periods without face-to-face communication, it is preferable for the manager and their direct report to have a minimum of two regularly scheduled synchronous 1-1s every month, barring any PTO or leave from work.\n\nFor example, some managers schedule 1-1s on alternating weeks, with one week for synchronous meetings and the next week for asynchronous meetings. This approach allows for more dedicated focus time and aligns with our priority of emphasizing asynchronous communication.\n\nCreate a Google doc as the agenda and set the sharing settings exclusively between you and the team member. This should not be a public document because performance feedback should be as private as possible.\n\nFrom High Output Management (edited sightly for language):\n\n“A key point about a one-on-one: it should be regarded as the reports’s meeting, with its agenda and tone set by them … issues that preoccupy and nag the individual contributor.”\n\nHow often you should have 1-1 meetings: “The answer is the job- or task-relevant maturity of each of your individual contributors. In other words, how much experience does a given report have with the specific task at hand?…the most effective management style instance varies from very close to very loose supervision as a report’s task maturity increases.”\n\nBill Campbell, executive coach to top executives at Google, had a suggested approach to the 1-1. Instead of leaving the conversation open, he required both the manager and the team member to bring a list of 5 things to discuss. At the start of the meeting, they would match lists and talk about whatever is on both lists first. After that, they would spend time on 4 topics – performance on job requirements, relationships with peer teams, leadership and innovation.\n\nIf you have negative or positive feedback give it right away rather than waiting for the 1-1. However, make sure bi-directional feedback is given at least as often as the 1-1 meeting. The face to face 1-1 is also useful for feedback that the person may be especially sensitive too, or is being given for the second time and needs to be taken more seriously.\n\nIt’s important not to push times of the 1-1’s for “more important” tasks. Book them and ensure you always are on time. Similarly, canceling a 1-1 should be a last resort. The exception to this is talent acquisition interviews. If participating in an interview schedule, reschedule the 1:1 with as much advance notice as possible, but prioritize the interview.\n\nOne communication style does not fit all. Some need very direct feedback. Others work better with FYI style information to then come to the conclusion you want them to come to on their own. Others work well with clear goals, but without a clear prescription as to how to reach the goal. Great managers can adapt their style to the report.\n\nIt is common to start with a bit of small talk. You can also consider starting with asking how are you as a person?\n\nThe end of the meeting is a good time to ask questions people might be hesitant to answer. People will often reveal their important information at the end of a conversation. Use this to get information about things that are bothering them about other people in the company, including you as a manager. Ask a question like ‘How can I make your life better?’ or ‘How’s the team and the work with other people?’. Don’t put this question on the agenda in advance. Since it is the end of the meeting it might be needed to add it to the agenda to discuss in the next meeting.\n\nSetting and managing expectations is maybe your most important task. Both the managers expectations of the work done by the report and the reports expectations about the work and company.\n\nReports tend to assume that they must do everything added by the manager, make it clear that they can push back (not a good idea, not worth the time), and redirect (please handle it directly with this person, can you arrange for this). You want to prevent the agenda piling up. The manager will put items on the agenda because it is in the functional area of the report and the manager doesn’t want to bypass them. But in case the manager cares about something and the report doesn’t it might be preferable for the manager (or an executive assistant) to do the work.\n\nActively listen to identify what the direct report is saying. The manager should strive to do 20% of the talking while the direct report does 80%.\n\nIf you have few items on the agenda from the report try the following questions:\n\nIs there anything that needs clarity?\n\nWhat are you most proud of/excited about?\n\nWhat can I (your manager) improve on?\n\nAnything you think important that happened since the last 1-1\n\nWhat are potential troubles you see for the team\n\nWhat are potential troubles you see for the company\n\nWhat went well since last week?\n\nWhat went not so well since last week?\n\nIs there anything I can do to help?\n\nAnything non-work related worth mentioning?\n\nWhen x happened, what will you do differently next time?\n\nHave you identified any career development opportunities that I can help you with? For example: Internship for Learning\n\nOther great questions to consider can be found in the Culture Amp Blog: 24 great one-on-one meeting questions or in 15Five’s The Great eBook of Employee Questions.\n\nConsider encouraging direct reports to keep their 1:1 document open in their browser throughout the week. As items come up, they can add them in real time instead of waiting until 30 minutes before the meeting to scramble to fill in the agenda.\n\nAsking open ended questions is important. “You doing alright?” is a yes/no question. There is no room for an answer unless you dig and prod to get more. Instead asking things like “Tell me how you’ve been doing since we last talked” leave more room for discussion and result in something both more actionable and results driven. Your goal is not just to know how they are doing, but why they feel that way.\n\nConsider populating the agenda to the 1-1 meeting at least 24 hours in advance of the meeting. This will enable the direct report and manager mental space to think more critically about each topic.\n\nLearning From the CEO on Conducting a 1-1\n\nThe Learning & Development team and the CEO, discuss conducting a 1-to-1 in more detail during a handbook learning session.\n\nCareer Development Discussion at the 1-1\n\nWe recorded a training about career mapping which you can find here:\n\nThese discussions should take place once a month and after the 360 Feedback meeting has taken place. As a manager of people you play a crucial part in developing careers for your reports. This is for them but you should be able to support this process and help them achieve their goals. This is a join collaboration so prior to the meeting think about what questions to ask, specifically identifying competencies(c), skill gaps(sg) and career objectives (co). Adrienne Smith who wrote increase employee retention with career pathing suggests the following:\n\nWhich projects are you most proud of that you’ve finished here? (c)\n\nWhat is your favorite part of your job? (c)\n\nWhich projects have you struggled with most in this role? (sg)\n\nWhat’s your least favorite part of your day-to-day? (sg)\n\nWhen do you ask for help most often? (sg)\n\nWhat parts of your role do you want to do more of? Less of? (co)\n\nWhat don’t you do in your current role that you’d like to? (co)\n\nWhat would you like to learn next? (co)\n\nOnce you have established the goals you can then create a career development plan\n\nWhy career development for team members is key to being a great leader\n\nProviding team members with a clear path of advancement within the group, department or division that includes career development opportunities is a win-win-win for team members, managers and GitLab. Team members who are challenged, engaged and who are actively contributing relevant solutions stay with organizations. An engaged workforce allows the department and divisions to meet their current and future needs for talent and skills and increases performance and decreases regrettable attrition.\n\nPlease make sure as a manager you have reviewed the Career Development Section in the handbook\n\nThere are many reasons that career development conversations are important. Below are a few examples though there are many more reasons.\n\nIncrease team productivity and performance\n\nFor managers, having career development conversations offers them a chance to help develop team members which then has an impact on the overall organization. It’s a critical skill for those serious about increasing their teams’ productivity and performance. Development conversations will help the group, department, division and GitLab retain great team members, which at the end of the day also contributes to the manager’s own success.\n\nBuild a bench of high contributors\n\nOn top of increasing performance, these career development conversations allow managers to build a bench of top talent contributor and create a succession pipeline. This will help reduce worries about losing top talent and who the team can turn to for critical tasks. Good managers know that if you have a strong bench, you have a lot less to worry about.\n\nBe a great leader\n\nWhen it comes down to, it the best managers or leaders — the ones that team members want to have and are happy continue being part of the team. These are the managers that take an interest in their team members lives and career. By learning about what your team members wants, what they strive for and by being able to help them drive to their goals, you will build credibility, trust and respect. This in turns also contributes to your overall success as a manager.\n\nAttract, engage and retain top talent\n\nA managers’s job is not to just drive to OKRs and performance. It is also to attract, engage and retain top talent team members and maximize their contribution to the group, department or division. If you are interested in your team members aspirations, success and what motivates them, you will attract top talent because people will want to work for you. Once you get great team members on board, you will need a plan to get them and keep them engaged. Career development can be and should be one of the ways you as a manager invest your time and energy to help drive engagement, performance and results.\n\nPreparing for a team member’s performance and development conversation\n\nCareer conversations do not have to be intimidating\n\nCareer development conversations are vital for the team members, managers and GitLab’s success. However, not all managers are prepared to address career development due to either lack of experience in having these conversations or a fear that the conversation will be difficult or unpleasant. Here are a few other reasons that managers may avoid having these conversations:\n\nCareer development conversations will take up time they do not have and create more work\n\nTeam members will want different roles or opportunities on an unrealistic timeframe\n\nTeam members will have aspirations that do not match their current skill level\n\nTeam members will take conversations about their career as a promise of a promotion\n\nTeam members will leave after they have developed new skills\n\nNot discounting these concerns, but as a manager it is your job to engage team members in meaningful career development conversations.\n\nIf a team members expectations or timeframe is unrealistic, you can explore having them use their time to find opportunities that will engage and prepare them for when their opportunities arise. If they are ready for promotion but the opportunity is not in scope or plan for the business it is best to be transparent with the team member. Discuss any timeline of if/when a position may be available or if there is no plan currently to add that role. You can also work with the team member to look for internal opportunities like internship or cross collaborative projects to help keep the team member engaged while continuing in their role.\n\nIf a team members expresses career ambitions that are beyond their current skill set, then that is an opportunity to talk about the next level skills and experience that might help prepare them to get them where they want to go. If your department or division has job matrices or competencies this is a good time to review those with the team member. Technical skills are only one part of the team members ability to continue to grow and succeed. If there are issues with attitude and behaviors this is a good time to also share what the team member needs to work on in regards soft skills as part of their career growth and development.\n\nIf you are concerned that your career development conversation could be construed as a promise of a promotion, focus the conversation around skills gap development and opportunities. Try to focus on the things needed now rather than focusing on a specific time frame.\n\nIt is possible that some team members may leave for other opportunities after they acquire a new skill set. However, it is even more possible that they will leave if they believe you or GitLab is not interested in their career aspirations or development. Engaging in meaningful career development conversations show that you as a manager care about them personally and their future development.\n\nPreparing for the discussion\n\nStrengths and wins\n\nAs a manager part of your job is to learn more about the team members you manage. What are their skills, interests and career goals? The tone of the career development conversation should be transparent, encouraging, curious and show that you are interested and invested in the team member. Spend some time before you have a conversation to think about the following:\n\nThe team members key strengths, skills and wins\n\nThe team members engagement level\n\nWhat are opportunities for their development\n\nCurrent level of skills in technical or functional areas\n\nWhat are their strong leadership competencies or behaviors\n\nCareer development conversations shouldn’t be done on a whim or just “winging it,” but instead these should be thought out and conversations that you prepare for ahead of time. You should come prepared to offer team members feedback, offer suggestions and to ask pertinent questions.\n\nWhat questions might team members ask?\n\nTeam members want feedback on their strengths, performance and their potential within GitLab. Be prepared to answer the following questions:\n\nWhat you say are my top strengths or top skill?\n\nWhat skills should I build on?\n\nAre you aware of any development opportunities that would be helpful for me?\n\nI see this as my career path, what career path do you see based on my skills?\n\nShould I be gathering career development feedback from others?\n\nSince you are already having regular 1:1s with your team member you may have ideas regarding your team members development aspirations. Plan ahead and take the time to think about what questions they may ask and come prepared to the conversation.\n\nHaving the discussion\n\nMaintain the right frame of mind\n\nComing to the meeting with an open mind and the willingness to learn more about the team members career development aspirations will set the right tone for the conversation.\n\nA best practice could be having the team member start the meeting by expressing their goals for the conversation. Your job as a manager is to listen and understand their desires and help them explore options that may be available for reaching those goals. Try and refrain from interjecting, let the team member finish before you start talking. Try not to be judgemental on what they say, different people will have different career goals and it is important to respect their ideas. However, this can also be a time for you to provide them with feedback, suggestions, recommendations and guidance. It can also be an opportunity for you to connect them with different people within GitLab and additional resource that support their identified career path.\n\nAs a manager you should follow up on the goals and activities you both identify. This will show the team member that you do listen and have a vested interest in their future success. Also, career conversations should not be a one-time annual conversation. A best practice is to meet at least quarterly for a check-in. Keep in mind some team members may want to meet more often and some less frequently.\n\nBe open about your own career goals and development\n\nIf asked, share your career goals with your team members. This transparency shows that you are not only willing to hear their career goals, but you are also willing to share your own career path. That could also include discussing with your team members the areas that you have identified to focus on in the future. Be open about questions regarding your own career path and experiences to date. Your team member may be able to take away some valuable lessons that you have learned in your own journey.\n\nAdditional resources\n\nBelow are several recommended articles regarding career development conversations.\n\n5 business reasons to put employee career development at the top of your agenda\n\nCareer Development Mentoring Benefits\n\nWhy Employee Development is Important, Neglected and can Cost You Talent\n\nIf You’re Not Helping People Develop, You’re Not Management Material\n\nBolt’s Developing Your Team section from their Managing our team playbook.\n\nKey Points\n\nActively Listen. Self-assessment is difficult and people often overestimate or underestimate their skillset. Don’t be quick to discount their assessment. Look for common ground and focus on understanding their overall goals.\n\nControl. Maintain control of the conversation to ensure it stays on track. The focus should be on their current skillset and abilities and how to cultivate those for a career path within the company.\n\nAdaptation. Adapting your approach to different personality types is key. People that overestimate their skillsets should be given specifics on where they do, and don’t, meet expectations. They may need areas of failing to be pointed out more plainly (but always caringly). Those that underestimate their skillset may need more emphasis on what they are doing right as they tend to focus on the negative. Also, not everyone wants to advance. Some are very happy in the role they are in and want to stay there. That should also be supported. Learn more in our Learning & Development Handbook.\n\nTransitioning 1-1s\n\nWhen taking over management of an existing team member, consider the following guidelines to ensure the team member experiences a psychologically safe transition.\n\nManager Transition Meeting\n\nIn an effort to be transparent, managers should consider ensuring that all of the information provided to the future manager by the current manager is done in full view of the team member. This might not work for all team members. You should ask whether the team member will feel comfortable having this conversation openly, and respect their boundaries. When choosing to remain transparent, schedule a transition meeting and follow the Manager Transition Meeting Agenda.\n\n1-1-1 Transition Schedule\n\nThe following schedule can ensure a smooth transition:\n\nCurrent Manager: Create a 1-1-1 and invite the team member and the future manager\n\nPrior to the meeting get approval from the team member to share the existing 1-1 doc (and other feedback documents) with the future manager. Or, if they request start a new 1-1 document and share it with the team member and the future manager. This will give the future manager an opportunity to review in advance of the meeting.\n\nTeam Member: If a new 1-1 document was started, transfer any relevant content\n\nGroup: Continue 1-1-1s for up to a month (if needed)\n\nNew Manager: Remove the former manager from calendar invites and the 1-1 document\n\nAbrupt 1-1 transitions can threaten a team member’s sense of psychological safety and career stability. If this is a concern, consider scheduling follow-on 1-1-1 transition meetings.\n\nManager Transition Meeting Agenda (example)\n\nAttendees\n\nTeam Member:\n\nCurrent Manager:\n\nFuture Manager:\n\nIntroduction\n\nTEAM MEMBER, in the coming weeks I will transition management support to FUTURE MANAGER. This is an opportunity for you to comment, agree, and disagree with how your performance, feedback, professional goals, growth areas, and 1:1 document content is shared with FUTURE MANAGER. We want to ensure you have a complete picture of the information we share. The goal is to make sure we’re transparent in the transition of your career, how you want to grow, and how I can support you.\n\nWe understand that this meeting format may feel a bit awkward as we will openly discuss your work performance. This is all in the service of the goal to fully support you.\n\nAgenda\n\nIntroductions and reason why this manager transition is happening.\n\nReview most recent performance evaluations, OKRs, and goals.\n\nShare any additional feedback since recent reviews.\n\nAre there any follow-on 1-1-1 transition meetings needed?\n\nShadowed 1-1\n\nShadowing a 1-1 is a scenario in which a GitLab team member attends the 1-1 of their manager and their manager’s manager. The intent of this model to provide trust through transparency, build connections between team members and leaders who they may not otherwise interact with regularly, and open opportunities for collaboration be providing a broader knowledge to team members. The shadowed 1-1 is exemplified by Sid by having the CEO Shadows attend 1-1s with his direct reports.\n\nAgenda\n\nPortions of the agenda will be suitable for sharing and others will not. Care should be taken to separate items that could breach our communication guidelines or potentially reveal confidential information. A suggestion on how to handle this would either be to not share the agenda with the shadow(s) or have a separate agenda for private items, these are just suggestions.\n\nAttendees\n\nAttendance could be limited to direct reports but could also include other people. A suggestion might be to have a sign up for attendance and, in order to maintain the relationship and support expected to arise from 1-1 meetings, alternate shadow weeks with non-shadowed weeks. Suggest having a separate zoom link for shadowed 1-1s.\n\nExample\n\nAn engineering manager decides to open up their 1-1 meetings to their team. The engineering manager checks with their manager that this is acceptable and determines a plan for review. When a shadow will be present, this should be indicated clearly on the agenda. Utilising a separate zoom link, all 3 people join and walk through the agenda. Participation level of the team member is up to the regular participants of the 1-1 but, consider encouraging engagement. At a point where sensitive topics need to be discussed, the team member will be asked to leave.\n\nLeadership Engagement Check-Ins\n\nLeadership Engagement Check-Ins, (also known as Stay Interviews) are conducted to help leadership improve retention in their teams. It helps them understand why team members stay and what might cause them to leave. In a Leadership Engagement Check-In, people managers ask standard, structured questions in a casual and conversational manner.\n\nProcess\n\nCadence: Schedule your Engagement Check-In at least every 6 months with each of you direct reports. People leaders can repurpose a scheduled 1-1 meeting;\n\nFormat: Use sync communication via Zoom;\n\nPreparation: Preparation should be done before the meeting by the manager and the team member. The manager should set expectations with their team members prior to the meeting to ensure that the team member feels as comfortable as possible heading into the conversation. Managers can include a copy of this Handbook page so their direct report is fully aware of the specific questions that will be asked during the call. Ask the team member to review the questions and think about them prior to the call. Allow them the opportunity to type responses before the meeting if they wish to do so.\n\nQuestions: Have a look at the below questions and take notes during the meeting.\n\nFollow up: At the end of the conversation summarize and follow up on any actions.\n\nStructure\n\nOpening\n\nStart the conversation by explaining the purpose of the meeting and why it’s important to you as a manager. An example is below.\n\n“Thanks for taking the time to have this check-in conversation. Team member engagement is very important to me, and this talk is a way to better understand how things are going for you and how I can help to improve your experience at GitLab. I would like to talk with you about the reasons you stay with GitLab so I understand what I can do to make this a great place to work for you.”\n\nQuestions\n\nIt’s important to listen and gather feedback from the team member about how they feel about GitLab in an objective manner:\n\nWhat do you like most about your job?\n\nWhat do you like least about your job?\n\nHow would you describe a great day at work?\n\nWhat motivates you to stay at GitLab?\n\nWhat would make you consider leaving GitLab?\n\nIf you could change one thing about your job, team or company, what would it be?\n\nWhat can I do to support you?\n\nScenarios (situations and reactions)\n\nTeam member has expressed the desire to stay at GitLab and is engaged\n\nI am so pleased to hear GitLab is a great place for you and really value your input going forward.\n\nIn case there’s a change in your feelings I want to make sure you can always speak up, even outside of these engagement check-ins.\n\nTeam member expressed both reasons to stay but also reasons for leaving\n\nI really want to thank you for your valuable input and feedback.\n\nSummarizing what we have discussed I would love to work on an engagement plan so that we can make sure GitLab is a great place to work for you.\n\nLet’s follow up in one week and prepare items we can work on to improve your experience at GitLab.\n\nTeam member expressed mostly reasons why they consider leaving and isn’t engaged\n\nI really want to thank you for your valuable input and feedback.\n\nLooking at your concerns I would love to work on an engagement plan so that we can make sure GitLab becomes a great place to work for you.\n\nLet’s follow up in one week and prepare items we can work on to improve your experience at GitLab.\n\nOther scenarios\n\nIf you have a scenario different from the above, and/or you need help with messaging, please work with your manager or People Business Partner.\n\nClosing\n\nTo close the Engagement Check-In, summarize the key points discussed, and work with the team member to develop an engagement plan (if applicable). Be sure to end on a positive note. An example is below.\n\n“Let me summarize what I heard you say about the reasons you stay at GitLab, as well as reasons you might leave. Then, let’s develop a plan to make this a great place for you to work. I appreciate you sharing your thoughts with me today. I am committed to doing what I can to make this a great place for you to work.”\n\nIf, during the Engagement Check-In, issues arise around health, performance, compensation, etc. and you need assistance, please work directly with your manager or your People Business Partner.\n\nFollow Up\n\nAfter the call has closed, capture some notes about what was discussed and share with the team member to ensure you heard their feedback correctly. It is important to do this for all team members - even if they had positive feedback about their engagement level.\n\nFor team members who had positive feedback, you will want to continue to find opportunities that align to things that make for a positive experience for them. For team members that had constructive feedback, you will want to use your notes as a start of an engagement plan.\n\nSuggested 1:1 Agenda and Daily Standup Format\n\nThis page describes the recommended 1:1 agenda format, and is based on how Sid formats his 1:1 agendas. It also captures how this format is modified for daily standup agendas. If you are new to 1:1s or not sure how to make your previous experience with 1:1s work in GitLab’s culture, this can be a great starting place for you to learn.\n\nRemember that 1:1s are private meetings between a manager and their report, so consistency is secondary to effectiveness - please make sure to find a format that works for you and your team.\n\nLast modified November 26, 2024: Fix broken external links (bc83f2be)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:59:37,290 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:59:37,290 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/support/readiness/operations/docs/gitlab/1-1_issue_generator/
2024-12-07 17:59:43,701 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/support/readiness/operations/docs/gitlab/1-1_issue_generator/'}, page_content='1-1 issue generator\n\nSupport Operations documentation page for the 1-1 issue generator\n\nWhat is the 1-1 issue generator\n\nThe 1-1 issue generator is a project created in house to assist in the creation of GitLab issues for use in 1 on 1 meetings. This uses a customizable formatting and various APIs to gather details and present it in a way that is useful to both manager and report.\n\nThe source code for it is located here.\n\nHow does the 1-1 issue generator work\n\nThis all works utilizing ruby scripting and GitLab CI/CD. The CI/CD component of this is straight forward, in that it has 4 stages and they run the ruby scripts within the project.\n\nTest stage\n\nThis stage runs the ./bin/test file within the repo. That file tests for the following:\n\nIs the YAML file able to be parsed?\n\nDo comment YAML files contain the ticket_review boolean?\n\nDo comment YAML files contain the comments array?\n\nAre the template files readable by an ERB renderer?\n\nIf any of the above answers are no, then the test stage will fail, preventing the CI/CD from running further. This is used to prevent merging bad files into the repo.\n\nGather stage\n\nThis stage runs the ./bin/gather file within the repo. That file runs the gather function within the Generator::Client class.\n\nThe Generator::Client.gather function obtains various data points spanning from:\n\nZendesk Global\n\nZendesk US Federal\n\nPagerduty\n\nGitLab.com\n\nIt combines all this data into an artifact file.\n\nReport stage\n\nThis stage runs the ./bin/daily_report file within the repo. That file takes the artifact made in the Gather stage and commits it to the Daily reports repo.\n\nCreate stage\n\nNote: While previous stages ran for multiple people, some jobs in this stage will only run for a single person at a time.\n\nThis stage will run one of three different jobs:\n\nweekly_report: This creates 1-1 issues for weekly use\n\nmonthly_report: This creates an issue covering a month’s worth of data\n\nquarterly_report: This creates an issue covering the current quarter’s worth of data\n\nAll of the jobs that run will call to a file in the repo that will link to various functions relating to the job itself. While there is some variance in how the three run, overall they all gather data from the Daily reports repo and then pass it into an ERB template file. This is then compiled into a gitlab.com issue via the GitLab API.\n\nWhen does 1-1 issue generator run\n\nBy using GitLab CI/CD schedules, we have the following set to run at various intervals:\n\nName What it does When it runs Gather metrics Runs the Gather stage Daily at 0100 UTC Create 1-1 Issues Runs the Create stage Daily at 0300 UTC\n\nChange management\n\nAs these are maintained via sync repositories, our standard change management process applies to all 1-1 issue generator changes. See standard change management for more information.\n\nLabels to use\n\nFor all issues and MRs involving 1-1 issue generator, the label Support-Ops-Category::GitLab Projects should be used.\n\nChange criticality\n\nAs this is an internal tool with no direct impact, all issues/MRs related to 1-1 issue generator will be classified as criticality 4\n\nLast modified June 27, 2024: Remove heading levels exception and fix errors (4e6ac4e3)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:59:44,253 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:59:44,253 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/create-cluster-101/
2024-12-07 17:59:50,142 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/create-cluster-101/'}, page_content='101 - Creating Kubernetes cluster\n\nObjective: Manually creating a Kubernetes cluster to use with Auto DevOps in GitLab\n\nYou will need Kubernetes cluster up and running in order to use GitLab Auto DevOps feature. This is a step by step guide to help you to manually create a Kubernetes cluster in Google Cloud Platform.\n\nMore details Auto DevOps\n\nPreparation\n\nYou need a Google Cloud Platform account, GitLab employees will have this. Ensure you are logged in with your GitLab account.\n\nSteps to create Kubernetes cluster\n\n| Step | What it looks like | | 1. Open a browser and login to Google Kubernetes Engine | | 2. GitLab employees - Sign-in using your GitLab email. | | | 3. GitLab employees should use the gitlab-demos project. Others should select or create a project to work in.| | | 4. Under COMPUTE on the side bar select Kubernetes Engine -> Clusters.| | | 5. Click CREATE CLUSTER. | | | 6. Set name for your cluster. GitLab Product and Solution Marketing employees, the naming convention is sm_<yourname>, or, if you are in the Product Marketing sub-group use pmm_<yourname>, or for the Technical Marketing group use tmm_<yourname>. Keep the overall name short (up to 16 chars). Set the number of nodes to 3, and expand the page for additional settings.| | | 7. GitLab employees should select the ‘demonet’ network in Networking. Others should select or create network. | | | 8. Enable legacy authorization. | | | 9. You are ready to create the cluster, click Create. | | | 10. It will take a few minutes to create the cluster, once it is created, you will see your just created cluster on the list.| | | 11. Now you are ready to integrate your GitLab project with Kubernetes, and use the Auto DevOps feature. | 12. Cleanup steps PLACEHOLDER ||\n\nLast modified June 27, 2024: Fix various vale errors (46417d02)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:59:50,757 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:59:50,757 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/101/
2024-12-07 17:59:56,569 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/101/'}, page_content='101 - No Tissues with Issues\n\nObjective\n\nA quick overview of how to plan and manage regular work using GitLab. The focus of this page is to help you learn how to work with Groups, Projects, Issues and Boards to plan and manage the your work and your team’s work.\n\nNote: If you are only looking for instructions on how to submit an Issue, feel free to skip forward to Issues in Action.\n\nThe Big Picture\n\nOrganizing\n\nGitLab provides Groups, Sub-Groups and Projects to structure your organization’s work and grant access to several members at once. For example,\n\nGroup - Account Management\n\nSub-group - Regions - AMS, EMEA, APAC\n\nProject - Countries - North America (within AMS), France (within EMEA), Singapore (within APAC)\n\nDefining\n\nGitLab allows you to group related work in the form of epics, sub-epics and issues - which are the smallest unit of work. For example,\n\nEpic - Annual Business planning\n\nSub-epic - Quarterly Business planning (e.g., Q1, Q2, Q3, Q4)\n\nIssues - Plan for Individual Customers\n\nPlanning\n\nGitLab facilitates planning your work with roadmaps with a start and end date, milestones and labels. For example,\n\nGroup Roadmap - Timeline for your annual business planning\n\nGroup Milestone - Key milestones during your planning - e.g., Start and end dates for Q1, Q2, Q3, Q4 planning\n\nProject Milestone - Deployment milestones for a specific customer\n\nDoing the work\n\nProjects can be used strictly for Issue Tracking, or for development of technology projects including source code, build, test, deploying applications.\n\nBringing it all together\n\nThe Details\n\nGitLab Groups\n\nIn order to manage multiple projects (portfolios of projects), the GitLab Group is the entity that enables strategic planning and tracking of business initiatives through delivery. At the Group Level, you can manage sub-groups, projects, epics, milestones, roadmaps and group level boards. Groups With GitLab Groups you can assemble related projects together and grant members access to several projects at once. Groups can also be nested in subgroups.\n\nGitLab “Project”\n\nThe project in GitLab is the core building block, where work is organized, managed, tracked and delivered. A project in GitLab enables the team to collaborate and plan their work in the form of Issues (use cases/requirements), Issue boards (Kanban), and Milestones (Sprints). With Projects in GitLab, you can create projects for hosting your codebase, use it as an issue tracker, collaborate on code, and continuously build, test, and deploy your app with built-in GitLab CI/CD. Your projects can be available publicly, internally, or privately, at your choice. GitLab does not limit the number of private projects you create.\n\nThe GitLab Project is much, much, much more than simply project management. The GitLab project unlocks the power of an industry leading source code management repository and a CI/CD pipeline. The Merge Request is the linkage between the issue and the actual code changes. The merge request captures the design, implementation details (code changes), discussions (code reviews), approvals, testing (CI Pipeline), and security scans.\n\nGroup vs Project\n\nGroup\n\nGroups are like ‘folders’\n\nProject\n\nProjects have many ’things’ like issues, repositories, merge requests, etc.\n\nHands on: Explore Groups and Projects\n\nLink to the GitLab Marketing Group\n\nLink to www-gitlab-com Project\n\nGitLab 101 Exercise Group and Projects This group (subgroups and projects is for GitLab 101 exercises)\n\nLabels\n\nThe label in GitLab is a flexible and powerful mechanism to tag and track work. Labels are used to define columns in the issue boards and make it easy to search and find issues or merge requests related to a common theme. Labels can be defined at EITHER Group or Project level\n\nLabels allow you to categorize issues or merge requests using descriptive titles like bug, feature request, or docs. Each label also has a customizable color. Labels allow you to quickly and dynamically filter and manage issues or merge requests you care about, and are visible throughout GitLab in most places where issues and merge requests are located.\n\nHands on: Explore Group and Project Labels\n\nExplore these two examples of Labels:\n\nLink to Group Label List in the GitLab 101 Group\n\nLink to GitLab 101 ABM Sample Project Label List\n\nCreate a Label in this project GitLab 101 ABM Sample Project\n\nIssue\n\nThe issue in GitLab is the fundamental planning object. It is where the team documents the use case in the description, discusses the approach, estimates the size/effort (issue weight), tracks actual time/effort, assigns work, and tracks progress. Labels enable the team to tag issues, track status, and associate issues with different initiatives. Issues are part of a Project\n\nIssues Issues can have endless applications. For example, Issues can be used to; Discuss the implementation of a new idea, Submit feature proposals, Ask questions, Report bugs and so on.\n\nIssues in Action: Common Use Cases\n\nIssues are appropriate for almost any type of interaction or request—feature suggestions, bug reports, general discussions, and more. Whatever an Issue’s purpose, to use it effectively, the author must communicate two things:\n\nThe intended audience\n\nThe information necessary to allow the audience to respond asynchronously\n\nThe exercises below provide best practices for communicating both.\n\nHands on: Create an Ad Hoc Issue\n\nSince Issues live in Projects, the first step to creating an issue is locating the appropriate Project for your topic and audience. In this example, we’ll be creating an ad hoc, free-text issue, asking a question of the Account Based Marketing Team in the GitLab101: Account Based Marketing Sample Project. To create the Issue:\n\nVisit the main Project page.\n\nClick the Issues link in the left-hand nav to view the Issues List.\n\nClick the green New Issue button in the top-right corner of the screen.\n\nAdd a Title that summarizes your question or comment\n\nType your comment or question in the Description field, as you would an email. The field supports Markdown, which you can preview as you type.\n\nYou can @mention stakeholders or other interested parties to send them notifications and To-Do list items from this Issue. For this exercise, @mention yourself, to avoid spamming your coworkers with a test message.\n\nAssign the issue to yourself. This issue will now be linked to your current Issue list, accessible by clicking the Issues icon at the right corner of the purple toolbar at the top of the page.\n\nIMPORTANT: Due to our Transparency value, the default View setting for Issues is public. If your issue contains customer information or other sensitive data, check the checkbox next to “This issue is confidential and should only be visible to team members with at least Reporter access.”\n\nClick the green “Submit Issue” link.\n\nCongratulations! You’ve just created an issue. You should receive an email summarizing your Issue, and you can add to the Issue’s conversation simply by replying to that email.\n\nCommonly-used group Issue Boards include:\n\nCorporate Marketing\n\nProduct and Solution Marketing / Product Marketing\n\nHands on: Create a Templated Issue\n\nTo minimize the amount of back-and-forth required to provide all necessary information for complex requests, Project owners have created Issue templates for the most common use cases. These templates provide a description of all necessary information and formatting to complete a request. In many cases, they also provide a checklist for the author to review before submitting.\n\nWhen submitting a templated issue, please take the time to read the entire description and respond to any checkboxes ([ ]) before submitting.\n\nFor this exercise, we will create a Sales Enablement request using the Enablement template.\n\nTo request an Enablement session:\n\nVisit the Product Marketing Group page.\n\nClick the Issues link in the left-hand nav to view the Issues List.\n\nClick the green New Issue button in the top-right corner of the screen.\n\nSelect Enablement from the Template drop-down menu and click the orange Apply Template button.\n\nFill out details in each section (for example, “Learning Objectives / Key points”) as completely as you can, adding additional items or removing unused bullets as necessary.\n\nIdentify stakeholders and other interested parties using @mentions as in the previous exercise.\n\nAdd a Due Date if you have one. This does not guarantee that work will be delivered by this date, but it adds context for the Project owner who receives and triages this request.\n\nDo not remove or modify the /label code at the bottom of the issue. This will assign appropriate Labels to ensure proper routing.\n\nDo not assign the issue. This will delay the processing of your request. Each Group within Product and Solution Marketing has a process to triage and assign issues.\n\nSince this is an active project, DO NOT click the green Submit Issue button unless you are actually requesting an Enablement session.\n\nOther common templated use cases include:\n\nRequesting Assets\n\nCase Studies: Create a new issue in the Corporate Marketing Group and apply the Customer_Story_Kickoff template.\n\nNew Content / Collateral (e.g., white papers): Create a new issue in the Corporate Marketing Group and apply the content-resource-request template.\n\nSwag: Create a new issue in the Corporate Marketing Group and apply the BulkSwagRequest template.\n\nRequesting People\n\nTechnical Evangelist support: Create a new issue in the Corporate Marketing Group and apply the technical-evangelist-request template.\n\nRequesting Event Sponsorship / Support\n\nEvent sponsorship: Create a new issue in the Corporate Marketing Group and apply the Corporate-Event-Request template.\n\nVirtual event sponsorship: Create a new issue in the Corporate Marketing Group and apply the Virtual_Sponsored_Event template.\n\nAccount Support and Access\n\nFor common licensing, customer access, and technical support issues, please visit the handbook’s Internal Support page for access to the appropriate issue templates.\n\nBoards\n\nBoards provide a flexible and dynamic approach to visually manage a project. Boards make it easy for a team to create lists and move issues from one list to another. List on the board can be defined by a label, assignment, or milestone. Here, teams can manage their backlog of work, prioritize the items, and then move the issues to the team or specific stage in the project. Each list in the board calculates the total size (weights) of the associated issues, enabling the team to understand how much work is assigned at any given time. Boards are available for EITHER Group or Project\n\nProject Issue Boards The GitLab Issue Board is a software project management tool used to plan, organize, and visualize a workflow for a feature or product release. It can be used as a Kanban or a Scrum board. It provides perfect pairing between issue tracking and project management, keeping everything in the same place, so that you don’t need to jump between different platforms to organize your workflow. With GitLab Issue Boards, you organize your issues in lists that correspond to their assigned labels, visualizing issues designed as cards throughout that lists.\n\nThe group level issue board makes it possible for oversight and governance of the projects and sub groups. This view, makes it easy to see how specific issues are flowing through the lifecycle and to understand the overall capacity of the teams.\n\nHands on: Play with boards\n\nTodd’s CMO board is a group level board, where labels define the lists: https://gitlab.com/groups/gitlab-com/marketing/-/boards/906226\n\nThe Product and Solution Marketing Sales Enablement board: https://gitlab.com/gitlab-com/marketing/product-marketing/boards/918030\n\nThe Plan/ Milestone board, where the lists are defined by Milestones: https://gitlab.com/groups/gitlab-org/-/boards/706864\n\nThe Plan Backend assignment board, where the lists are defined by who will be doing the work on a specific release: https://gitlab.com/groups/gitlab-org/-/boards/631316\n\nCreate an BOARD in this Project : Account Based Marketing\n\nMilestones\n\nMilestones establish a target date for a sprint or specific bundle of issues and code changes to be delivered. The milestone enables the team to either set a specific Start and Stop for the work, as in a Sprint, or the milestone could be a fixed point in time. Milestones are EITHER Group or Project\n\n| Milestones in GitLab are a way to track issues and merge requests created to achieve a broader goal in a certain period of time. Milestones allow you to organize issues and merge requests into a cohesive group, with an optional start date and an optional due date. | ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ |\n\nGroup Level Planning\n\nEpics\n\nIn order to track groups of related issues, the GitLab epic gives product owners and leaders the ability to link and manage work over an extended time frame. Planning work use Epics allows you to create parent and child epics. An epic can span multiple milestones and makes it easier to manage the overall flow and priority of work. Epics are GROUP ONLY\n\n| Epics let you manage your portfolio of projects more efficiently and with less effort by tracking groups of issues that share a theme, across projects and milestones | |\n\nRoadmaps\n\n| The roadmap is a visual representation of the various epics for the group. The roadmap view can be filtered by label and organized by start / stop date of the epics in order to visualize the sequence of work. At this point, GitLab doesn’t create dependencies between issues or epics. | ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ |\n\nLast modified July 29, 2024: Fixing more formatting issues caused by the handbook migration (9b5eccc2)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 17:59:57,261 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 17:59:57,261 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/103/
2024-12-07 18:00:03,377 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/103/'}, page_content='103 - Maintaining common slides across decks\n\nObjective\n\nMarketing creates and maintains quite a few presentations for various stakeholders - like analysts, sales, customers. Some of the commonly maintained presentations are available in the sales resources handbook page. There is common content across the slides. The focus of this page is to explain how we manage common slides across various presentations that strategic marketing creates for various stakeholders.\n\nSingle directory with commonly used slides\n\nAll common slides will be maintained as individual slides in this strategic marketing master slides folder. The most recent and up to date version of the common slides will be maintained in this folder.\n\nHow to link common slides to your presentation\n\nDescription Image Open and copy the common slide you need from the master slides folder Paste and link common slide in destination presentation (Optional) Make changes in source common slide Any changes to the source slide shows up as an Update in the destination presentation. If you would like to update your presentation, click on Update Tada! View the updates in the destination presentation\n\nLast modified June 27, 2024: Fix various vale errors (46417d02)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:00:03,869 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:00:03,869 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/104/
2024-12-07 18:00:10,148 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/104/'}, page_content='104 - Epic Templates - Repeatable sets of issues\n\nObjective\n\nOften you need to manage a set of consistently repeating events, where multiple issues are used to track the combined activity of a team. This page describes how to utilize GitLab Issue Import and a few spreadsheet tricks to make it possible to create a repeatable set of issues for future projects.\n\nThe Issue Import CSV button is at the top of the GitLab project issue list. This feature can be very useful for repeating projects with similar groups of issues / work.\n\nPlease read the “Tips and Tricks” section before you import issues into your projects\n\nAssumptions\n\nYou’re familiar with the GitLab structure of how projects, groups, epics, milestones, issues, and labels work. If not, please review GitLab 101- No Tissues with Issues\n\nYou’re comfortable working in a spreadsheet and using formulas to concatenate text into a cell. note: In my examples, I use the & operator, which is the same as the concat function.\n\nYou have Developer permission level or higher in your project. (required to do issue import)\n\nYour issues will be created in the same project. You can still do this for cross-project templates, but you will either need to MOVE issues to the destination project (can be automated) or more manually you would need to upload a separate CSV for each individual project. Check out this automation tutorial for how to automate moving an issue from one project to another.\n\nBackground\n\nIssue Import CSV is really simple. It requires only two columns,\n\ntitle\n\ndescription\n\nWhere the issues are in a coma delimited file. The first row is the header and the subsequent rows include the data.\n\nIssue Import CSV is really powerful. It allows you to use the /Quick Actions to do cool things to your new issues like:\n\nadd labels\n\nset due dates\n\nadd to milestones\n\nadd to epics\n\nset weights\n\nset effort estimates\n\nassign issues to individuals\n\nnote: See the GitLab documentation for Importing issues from CSV\n\nSteps\n\n1. Build Issue spreadsheet\n\nDecide what project structure will be for your set of issues. Specifically,\n\nwhat labels will be used for the project,\n\nwhat epics and sub-epics will be used to track the work, and\n\nwhat milestones will you use for this work effort.\n\nIf these structures do not already exist in GitLab, configure them now.\n\n1.1 Spreadsheet setup\n\nWhile you only really need two columns, (Title, and Description), I’ve found it’s easier to have several columns so you can keep details separate and manage issues. Configure a spreadsheet with the following columns\n\nFirst: - Two columns where the BASIC text of the issue title and description go.\n\nraw title,\n\nraw description, These two columns is where you will enter the text for the titles and descriptions of your issues.\n\nSecond: Two columns where the actual text for the issue title and description are ‘assembled’\n\ntitle,\n\ndescription These two columns are actually just formulas that combine different cells to make up the Title and Description for your issues.\n\nThird: One or more additional columns to hold issue specific QUICK ACTIONS. In these columns, you can add content such as; epics, estimates, labels, and more can be stored. In the example spreadsheet these columns each contain specific data for each issue: Team Label, Type, Effort, Size, Epic, Milestone, Iteration\n\nWhen you’re done it will look like this:\n\nFourth: If you want to have the same Label or the same Quick Action for ALL the issues. A cell at the top of the spreadsheet is a place for common Quick Actions\n\n1.2 Draft your first Issue\n\nIn the row below the headings 1.1 - Raw Title - Write the text for the issue title 1.2 - Raw Description - Using markdown, write the issue description.\n\nNote: it’s often much easier to work in the Formula bar in google sheets, which makes it easier to enter multi line text in the cell.\n\nIn the Quick Action columns, add the appropriate quick actions to add labels, set efforts, add to milestones or epics. This is where you can customize each issue to be tracked in GitLab.\n\nNote: If you are using automation, you could use a label to promote the issue to be an epic or a label to automate moving the issue to another project, to make it confidential, or whatever you want to do with quick actions. Read this automation tutorial to learn more about how automation can update issues for you.\n\nSee this publicly available example import spreadsheet.\n\n2. Import Your Issues\n\nSelect the title and description cells (including the column headers) and copy the contents.\n\nGo to a new empty spreadsheet and paste as values. This will eliminate the formulas, but will keep the actual values.\n\nSave the new spreadsheet as a CSV file. The file should only be the two columns title and description\n\nGo to your project issue list and click on the Import CSV button:\n\nIn the dialogue box, click on the file name button and select the CSV file.\n\nClick the Import Issues button and wait for the magic to happen.\n\nIMPORTANT - Tips, Tricks, and Hints - READ THIS FIRST\n\nCreate a separate project to TEST your import file. There is NO WAY TO DELETE ISSUES in GitLab. You can CLOSE issues, but you cannot delete them. So, if you are importing 20 issues and you make a mistake, depending on where your test project is in your GitLab hierarchy, you will need to:\n\nRemove all the labels, milestones, epics, etc (labels and epics roll up to higher level groups)\n\nUn-assign any issues that were assigned to individuals\n\nClose the issues\n\nUse a real issue in your GitLab project to write your Quick Action codes. Then, copy and paste the quick actions to your spreadsheet. That way your quick actions will not have typos or errors.\n\nThe Issue ORDER will be sequential starting at the first row then working to the last. That means your first row in the your spreadsheet will show up LAST in GitLab (when sorted by the default issue created date). However, if you list your spreadsheet in the reverse order, then your last issues will be loaded first. That means they will be OLDER, and therefore listed last in GitLab issue lists.\n\nLast modified June 6, 2024: Remove ul-indent exception and fix errors (5c73f128)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:00:10,654 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:00:10,655 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/105/
2024-12-07 18:00:16,799 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/getting-started/105/'}, page_content="105 - Issue Automation - Keeping your issues squeaky clean\n\nObjective\n\nWhen you use issues and labels to manage day to day work and define a specific process, often there are situations and times where it’s hard to keep labels in the right status. For example:\n\nLabel Hygene: Consider a situation where there is a process defined by an overall label (ABC) and the specific steps in the process are defined by the scoped labels (ABC::1, ABC::2, and ABC::3)\n\nThe process assumes that everyone in the team will assign “ABC” and one of the scoped labels “ABC::x”\n\nHowever it’s likely that people will forget to assign both labels, and over time there will be a mixture of issues missing one of the two labels.\n\nLabel Hygiene Consider a process, where you want to summarize issues based on a set of detailed labels that might be assigned to them. Such as, a process where there are 10 scoped labels “ZYX::1, ZYX::2, ZYX::3, … ZYX::10”, and you want to summarize them in to “ODD” and “EVEN”. So ZYX::2,4,6,8,10 all would be labeled “EVEN” and ZYX::1,3,5,7,9 would be labeled “ODD”.\n\nYou could request your team to update their issues with the right “ODD”/“EVEN” labels based on the ZYX::nnn label\n\nYou could bulk update labels (find all the ZYX::1 issues and then add the “ODD” label, and repeat 9 more times) In either case, the ODD/EVEN summary labels would be most likely incorrect, as people would forget to update them, or if something changed, they would be wrong\n\nThere are other key situations where automation can help. (see below for these practical examples)\n\nMoving issues to a certain project - consider a situation where you have an issue or group of issues that you want to periodically move to a specific project.\n\nPromoting issues to be epics - consider a situation where you have a set of related epics you want to re-create. You have the epics defined as issue templates and want them to automatically be promoted to be epics.\n\nDeprecating/deleting an issue - Consider where you have an issue that you want to effectivley delete and therefore remove all the lables, epics, estimates, milestones etc.\n\nAutomation can address all of these situations and streamline work.\n\nSolution - Label Hygiene / Triage Bot\n\nDefine a set of rules that will automatically\n\nAdd a label when it is missing\n\nChange or remove a label when it’s wrong\n\nAdd a comment, mention a user, and more thorough comments and /quick actions.\n\nThe Triage Bot is an Open GitLab project that makes it possible to automate many issue and merge request hygiene tasks to ensure that your projects are more consistently following a given process.\n\nExample Triage Policies/rules\n\nHere are two examples of how Triage Polices/Rules can automate updates and issue hygiene:\n\nThis example finds issues that are more than 5 days old, but have no label associated with them, then it adds a comment to ask the Author to do something. The policy also notifies a team member to make them aware of the issue.\n\n    - name: My policy\n     conditions:\n       date:\n         attribute: updated_at\n         condition: older_than\n         interval_type: days\n         interval: 5\n       state: opened\n       labels:\n         - No Label\n     limits:\n       most_recent: 50\n     actions:\n       labels:\n         - needs attention\n       mention:\n         - markglenfletcher\n       comment: |\n         {{author}} This issue is unlabeled after 5 days. It needs attention. Please take care of this before the end of #{2.days.from_now.strftime('%Y-%m-%d')}         \n\nIn Strategic marketing, here is a rule that finds any Strategic marketing Requests that are missing a Scoped Workflow label.\n\n      - name: sm_request (MISSING a scoped label and assign it as a New Reqeust)\n        conditions:\n          labels:\n            - sm_request\n          state: opened\n          forbidden_labels:\n            - sm_req::triage\n            - sm_req::transfered\n            - sm_req::new_request\n            - sm_req::declined\n            - sm_req::completed\n            - sm_req::backlog\n            - sm_req::assigned\n        actions:\n          labels:\n            - sm_req::new_request\n          comment: |\n           SM TriageBot helping out here: This SM Request issue was not in the workflow, automatically adding it as a new request.           \n\nSetting Up the Triage Bot\n\nThere are only two simple steps to set up the TriageBot.\n\nConfiguring your CI/CD pipeline\n\nDrafting your first Triage Policy\n\nSetting up a CI/CD Schedule to run your Triage Policies periodically.\n\nStep 1: Configuring your CI/CD Pipeline for the first time\n\nThe triage bot runs as a scheduled CI pipeline job, so your project will need to define a gitlab-ci.yml file. The gitlab-ci.yml file is stored in the root directory of your project.\n\nHere is an example of the Product and Solution Marketing pipeline, where there are three Jobs defined. There are two Manual jobs, and one Scheduled Job. The two Manual jobs either test(dry-run) the rules/policies, or actually apply the rules/policies (policy:run). The one Scheduled job (schedule:policyrun), when runs will actually apply the rules/policies.\n\n>image: ruby:2.7\nstages:\n- triage\n- run\n\ndry-run:triage:\nstage: triage\nscript:\n   - gem install gitlab-triage\n   - gitlab-triage --help\n   - gitlab-triage --dry-run --token $API_TOKEN --source projects --source-id $CI_PROJECT_PATH\nwhen: manual\nexcept:\n   - schedules\n\npolicy:run:\nstage: run\nscript:\n   - gem install gitlab-triage\n   - gitlab-triage --token $API_TOKEN --source projects --source-id $CI_PROJECT_PATH\nwhen: manual\nexcept:\n   - schedules\n\nschedule:policyrun:\nstage: run\nscript:\n   - gem install gitlab-triage\n   - gitlab-triage --token $API_TOKEN --source projects --source-id $CI_PROJECT_PATH\nonly:\n   - schedules\n\nThe TriageBot needs to have access and permission to your GitLab project to read and update issues. This is called a “token”, and is stored in GitLab using a “CI/CD Variable” - in this case it is the $API_TOKEN that you see in the above example pipeline.\n\nYou will need to configure a GitLab CI/CD Environment Variable$API_TOKEN for these jobs to run.\n\nHere’s how:\n\n2. Setting Up CI-CD API Token Variable Image 1. In your project select the left menu option Settings-->CI/CD 2. Then expand the Variables section 3. Add a new line where - Type= “Variable” - Key = “API_TOKEN” - Value = Your API Key.  - You have an API Key don’t you? (See short instructions below) - Set Masked to True. 4. Save Variables\n\n3. Getting your API Key Image 1. The API Key is linked to your account and basically gives the Bot permission to act on your behalf.   First click on the dropdown on your personal settings in GitLab. 2. Select Access Tokens and - Give the access token a Name - Leave the Expiration Date blank (unless you want it to expire) - Select “API” for the Scopes - Click Create personal access token 3. The Personal Access Token will appear at the top of the page. 4. Copy the Token and then Add it to the API_TOKEN Value in the CI/CD Variables settings.\n\nStep 2: Setting up your FIRST Triage policy\n\nThe Triage Policies/Rules are defined in a YML file called .triage-policies.yml which is stored in the root directory of your project. For DETAILED instructions about rules and policy options read the Defining a Policy section in the README.md file in the Triage Bot project.\n\nCreate a new file in the root directory called .triage-policies.yml\n\nPaste in the following first simple rule:\n\n  resource_rules:\n    issues:\n      rules:\n        - name: find all open issues - any label (simple - should be lots)\n          conditions:\n          state: opened\n\nCommit and merge your changes.\n\nThis will trigger a pipeline, where the Jobs should all be skipped. You should see this at the bottom of your screen.\n\n4. Dry-Run TriageBot Image 1. Click on the Pipeline link and go to the pipeline screen 2. Run the “Dry Run” pipeline job. 3. Click on the job and watch it run. 4. Fist it starts by creating a container and getting a runner growing (That means your CI job is defined OK so far) 5. Then it prompts the Triage bot to show it’s help output (that means it’s working, and your API key is good) 6. Then the job runs the “Dry-Run” and you see the output from the bot as it runs.  Just one job - find all the open issues, so it runs fast, finds over 1,000 issues.  Since the policy/rule had no filters or actions, the job finishes.\n\nNow, you need to define any specific policies/rules that you need for your project.\n\nStep 3: Scheduling Jobs\n\nScheduling Jobs Image 1. Go to CI/CD–>Pipelines on the left menu 2. Click on Create New Schedule 3. Create the schedule - Write a Name/description - Select an Interval pattern (how frequently do you want it to run.  Probably daily.) - Leave the Target Branch , and Variables options with the default - Click on Save Pipeline Schedule.\n\nOther specific scenarios\n\nMoving issues to a certain project\n\nCreate a label in your project that is the flag that tells the automation bot to move the issue.\n\nThe label must be unique for the destination project. For example move--> project2Test\n\nUpdate .triage-policies.yml\n\nPaste in the following rule:\n\n  resource_rules:\n    issues:\n      rules:\n        - name: 1. Mooving an issue to another project based on the label - move to Test Project 2\n          conditions:\n            labels:\n              - move--> project2Test\n            state: opened\n          actions:\n            comment: |\n             /move gitlab-com/marketing/strategic-marketing/testgroup-pmm-isights/testproject2             \n\nThis rule will look for the label move--> project2Test in all open issues and then apply the quick action\n\n/move .... where it specifies the destination for the issue.\n\nIn the future if you want to move a bunch of issues to that project, all you have to do is add the move--> project2Test label.\n\nPromoting issues to be epics\n\nCreate a label in your project that is the flag that tells the automation bot to promote the issue to be an epic.\n\nFor example promote-me\n\nUpdate your .triage-policies.yml\n\nPaste in the following rule:\n\n  resource_rules:\n    issues:\n      rules:\n      - name: 1.2 Promote Issues to epics\n        conditions:\n          labels:\n            - promote-me\n          state: opened\n        actions:\n          comment: |\n           /promote           \n\nThis rule will look for the label promote-me in all open issues and then apply the quick action\n\n/promte which promotes the issue into an epic.\n\nIn the future if you want to promote a bunch of issues, all you have to do is add the promote-me label.\n\nDeprecating/deleting an issue\n\nIf you want to effectively delete an issue (strip it of labels, remove it from epics and milestones,and remove estimates, and close it)\n\nCreate a label in your project that is the flag that tells the automation bot to promote the issue to be an epic.\n\nFor example deprecate-me\n\nUpdate your .triage-policies.yml\n\nPaste in the following rule:\n\n  resource_rules:\n    issues:\n      rules:\n      - name: 1.1 - Deprecate Issues Close and strip labels of deprecated issues\n        conditions:\n          labels:\n            - deprecate-me\n          state: opened\n        actions:\n          comment: |\n           /remove_milestone\n           /remove_epic\n           /remove_estimate\n           /unlabel\n           /title Deprecated Issue\n           /close           \n\nThis rule will look for the label deprecate-me in all open issues and then apply a bunch of quick actions that update and close the issue.\n\nIn the future if you want to delete and deprecate a bunch of issues, all you have to do is add the deprecate-me label.\n\nSuccess and Next Steps\n\nFrom here, you can build/draft your specific policies/rules for your project.\n\nLast modified July 29, 2024: Fixing more formatting issues caused by the handbook migration (9b5eccc2)\n\nView page source - Edit this page - please contribute.")]
2024-12-07 18:00:17,433 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:00:17,433 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/customer-success/professional-services-engineering/workflows/internal/15minute-standup/
2024-12-07 18:00:23,453 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/customer-success/professional-services-engineering/workflows/internal/15minute-standup/'}, page_content='15-minute Standup\n\nSee Standing Calls\n\nLast modified October 29, 2024: Fix broken links (455376ee)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:00:23,986 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:00:23,986 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/corporate/systems/1password/
2024-12-07 18:00:29,810 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/corporate/systems/1password/'}, page_content='1Password\n\nThis is a placeholder page. Please see the links below for any child pages that exist.\n\n1Password Groups\n\nThis is a placeholder page. Please see the links below for any child pages that exist.\n\n1Password Passkey Guide\n\nThis is a placeholder page. Please see the links below for any child pages that exist.\n\n1Password Setup Guide\n\nYou will receive an invitation to get started in your email on your first day. You will get access to service or team-specific vaults in your onboarding or through access requests.\n\nAs an added benefit, we give all team members a free family account for securing your personal passwords as well in two separate accounts with respective vaults.\n\nVendor Docs - Getting Started\n\nVendor Docs - Install Password on Mac\n\n1Password Chrome Extension\n\nVendor Docs - Getting Started on Mac\n\nVendor Docs - Save and Fill Passwords\n\nVendor Docs - Sharing a Password Securely\n\nTroubleshooting Tips\n\nAdmin Account 1Password Extension Integration\n\nFor users with access to secondary 1Password accounts, please make sure that the 1Password Chrome extension in your Black Chrome profile is NOT set to automatically integrate with the desktop app. This setting may re-enable itself after a major 1Password or Chrome update.\n\n1Password Vaults\n\nThis is a placeholder page. Please see the links below for any child pages that exist.\n\nLast modified July 1, 2024: Add Corporate Security handbook pages (b684cdaf)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:00:30,888 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:00:30,888 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/tools-and-tips/onepassword-cli/
2024-12-07 18:00:37,233 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/tools-and-tips/onepassword-cli/'}, page_content='1Password and Environment Variables\n\nSecure secrets handling for local development\n\nSecrets used on laptops need to be stored and used securely. The reasons for this and basic concepts are discussed on the 1Password page. It’s recommended to read that first if you haven’t done so yet. This page covers user-friendly ways to integrate these basic principles into your workflow.\n\nStandard command settings with aliases\n\nUsing an alias works well where a single, specific command should always use a single, specific set of secrets.\n\nFor example, you can define an alias in your shell profile to invoke glab with your PAT:\n\nalias glab="op run --env-file=$HOME/.gitlab-pat.env -- glab"\n\nTo verify the configuration, run glab api version. This should print the version of gitlab.com if the configuration succeeded.\n\nglab api version\n{"version":"15.4.0-pre","revision":"3e84f577d51"}\n\nMulti-environment usage with .bashrc\n\nIf you have a number of environments that you use frequently you can create functions to easily load secrets for the correct environment.\n\nOne example of this is below. It adds a ’loadenv’ command to bash which automatically starts a subshell containing all the relevant environment variables, assuming the current directory is a git repository and an environment variable with a matching name is available in $HOME/devenv/envfiles. The modified $PS1 checks for the presence of the ‘ENVFILE’ variable, and if it exists displays it in the shell prompt to show what environment file is loaded in this shell.\n\n# Base PS1 + add ($ENVFILE) in red if set\nexport PS1=\'\\[\\e]0;\\u@\\h: \\w\\a\\]${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]$([ -n "$ENVFILE" ] && echo -n " \\e[91m($ENVFILE)\\e[0m")\\$ \'\n\nalias project="git remote get-url origin | sed -e \'s/^.*\\///g\' | sed -e \'s/\\.git$//g\'"\n# Environment file load\nloadenv() {\n  ENVFILE=$(project) op run --env-file="$HOME/devenv/envfiles/$(project).env" --no-masking -- /bin/bash\n}\n\nWhen added to .bashrc and sourced, it can then be used to run commands like this:\n\nusername@my-laptop:~/code$ cd example-project\nusername@my-laptop:~/code/example-project$ loadenv\nusername@my-laptop:~/code/example-project (example-project)$ curl -X POST --form token=$PIPELINE_TOKEN --form ref=main https://gitlab.com/api/v4/projects/example-project/trigger/pipeline\n{"id":1252595607,"iid":12960,...long output removed...\n\nThen, once the secrets are no longer needed, you can exit the subshell and this will be visible in the prompt.\n\nusername@my-laptop:~/code/example-project (example-project)$ exit\nexit\nusername@my-laptop:~/code/example-project$\n\nThis allows maintaining a set of standard variables for a given git repository, regardless of the exact command(s) being run.\n\nLast modified May 14, 2024: Update markdownlint and fix biztech folder (190e30aa)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:00:37,708 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:00:37,709 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/corporate/systems/1password/group/
2024-12-07 18:00:43,962 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/corporate/systems/1password/group/'}, page_content='1Password Groups\n\nThis is a placeholder page. Please see the links below for any child pages that exist.\n\nLast modified July 1, 2024: Add Corporate Security handbook pages (b684cdaf)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:00:44,465 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:00:44,466 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/corporate/systems/1password/passkey/
2024-12-07 18:00:50,440 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/corporate/systems/1password/passkey/'}, page_content='1Password Passkey Guide\n\nThis is a placeholder page. Please see the links below for any child pages that exist.\n\nLast modified July 1, 2024: Add Corporate Security handbook pages (b684cdaf)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:00:50,913 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:00:50,914 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/corporate/systems/1password/setup/
2024-12-07 18:00:56,689 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/corporate/systems/1password/setup/'}, page_content='1Password Setup Guide\n\nYou will receive an invitation to get started in your email on your first day. You will get access to service or team-specific vaults in your onboarding or through access requests.\n\nAs an added benefit, we give all team members a free family account for securing your personal passwords as well in two separate accounts with respective vaults.\n\nVendor Docs - Getting Started\n\nVendor Docs - Install Password on Mac\n\n1Password Chrome Extension\n\nVendor Docs - Getting Started on Mac\n\nVendor Docs - Save and Fill Passwords\n\nVendor Docs - Sharing a Password Securely\n\nTroubleshooting Tips\n\nAdmin Account 1Password Extension Integration\n\nFor users with access to secondary 1Password accounts, please make sure that the 1Password Chrome extension in your Black Chrome profile is NOT set to automatically integrate with the desktop app. This setting may re-enable itself after a major 1Password or Chrome update.\n\nIn the top right corner of Chrome, click the plugin icon (puzzle piece), click the 3 dots dropdown menu next to 1Password, then choose Settings.\n\nIn the General section in the left sidebar, ensure that Integrate this extension with the 1Password desktop app is disabled.\n\nIn the left sidebar, navigate to Accounts & vaults.\n\nIf your normal user account ({handle}@gitlab.com and not {handle}-admin@gitlab.com) is listed, click the three dots and choose Sign Out. Repeat these actions for any other accounts that appear (ex. your personal 1Password email address).\n\nIf your admin account is not listed, click Sign in to another account. After redirecting to the 1Password website, choose the gitlab.1password.com tile and verify that your {handle}-admin@gitlab.com email address is shown, then type in your master password.\n\nThe 1Password extension in the top right corner should now show your admin creentials.\n\nLast modified November 1, 2024: Remove trailing spaces (6f6d0996)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:00:57,164 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:00:57,164 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/corporate/systems/1password/vault/
2024-12-07 18:01:03,253 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/corporate/systems/1password/vault/'}, page_content='1Password Vaults\n\nThis is a placeholder page. Please see the links below for any child pages that exist.\n\nLast modified July 1, 2024: Add Corporate Security handbook pages (b684cdaf)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:01:03,788 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:01:03,788 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/dod12/
2024-12-07 18:01:10,642 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/dod12/'}, page_content='2019 DevOps Dozen\n\n2019 DevOps Dozen - Best DevOps Solution Provider Executive: Sid Sijbrandij\n\nThis is one of two pages submitted for the 2019 DevOps Dozen Awards, supporting Sid Sijbrandij for Best DevOps Solution Provider Executive and supporting GitLab for Best DevOps Solution Provider. We thank MediaOps and DevOps.com for their consideration and their service to the DevOps community.\n\nSid Sijbrandij: True DevOps Practitioner-Executive\n\nSid leads GitLab by embracing and following DevOps practices for every aspect of building GitLab the company, its culture, and GitLab the product. He starts with ingraining DevOps philosophy into our core values. Two good examples are the values of Iteration and Transparency. Sid truly believes the smallest possible change that makes any improvement should be published, and with a low level of shame. This enables everyone at GitLab to push the smallest possible iteration to the world, get feedback from the community, and incorporate that feedback in rapid, fast improvements. These principles are applied to every aspect of the company, from engineering to product management, to marketing, and even sales.\n\n2019 DevOps Dozen - Best DevOps Solution Provider: GitLab\n\nThis is one of two pages submitted for the 2019 DevOps Dozen Awards, supporting GitLab for Best DevOps Solution Provider and supporting Sid Sijbrandij for Best DevOps Solution Provider Executive. We thank MediaOps and DevOps.com for their consideration and their service to the DevOps community.\n\nGitLab: A community and a product\n\nThe GitLab solution is the result of collaboration between thousands of community contributors, based on feedback from the over 100,000 organizations that have adopted GitLab to power their DevOps transformations. The GitLab community contributes code, documentation, translation, design, and product ideas based on their real world challenges, making GitLab more useful and valuable. Because of the community behind GitLab, in many cases, we see rapid adoption through better developer experience and collaboration. These naturally drive users to adopt and contribute more, enriching the application every day.\n\nLast modified November 16, 2023: Move brand and product marketing files in to place (42cea233)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:01:11,085 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:01:11,085 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/dod12/2019-best-executive/
2024-12-07 18:01:17,328 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/dod12/2019-best-executive/'}, page_content='2019 DevOps Dozen - Best DevOps Solution Provider Executive: Sid Sijbrandij\n\nThis is one of two pages submitted for the 2019 DevOps Dozen Awards, supporting Sid Sijbrandij for Best DevOps Solution Provider Executive and supporting GitLab for Best DevOps Solution Provider. We thank MediaOps and DevOps.com for their consideration and their service to the DevOps community.\n\nSid Sijbrandij: True DevOps Practitioner-Executive\n\nSid leads GitLab by embracing and following DevOps practices for every aspect of building GitLab the company, its culture, and GitLab the product. He starts with ingraining DevOps philosophy into our core values. Two good examples are the values of Iteration and Transparency. Sid truly believes the smallest possible change that makes any improvement should be published, and with a low level of shame. This enables everyone at GitLab to push the smallest possible iteration to the world, get feedback from the community, and incorporate that feedback in rapid, fast improvements. These principles are applied to every aspect of the company, from engineering to product management, to marketing, and even sales.\n\nTransparency is another core value that drives Sid’s vision and embracing of DevOps in every aspect of running the company. Everything is public by default, with few exceptions such as for confidential customer data. This helps us get continuous feedback from our community, a key tenant of DevOps.\n\nCommunity Leader\n\nSid not only leads GitLab, the company of 1095 employees, he is also a key driver in the creation and growth of the wider GitLab community. Over 2,700 contributors have shared their talents and are committed to improving GitLab as a solution to their DevOps challenges, making it possible for everyone to contribute.\n\nForging the future of work\n\nLike all successful companies, GitLab has carefully crafted values which our CEO, Sid both espouses and evangelizes. GitLab’s company values, however, are not only good things that all good employees should pursue, like integrity or innovation. Our values are key to GitLab’s success and in many ways they are mission critical.\n\nGitLab’s values are mission critical because our all-remote way of working would be impossible without them. GitLab has an uncommonly diverse and distributed workforce, with more than 1,095 employees in 65 countries and 0 offices. We also work asynchronously by default, requiring uncommonly strong culture and leadership.\n\nGitLab’s values can also be challenging. One of our top values, for example is transparency, toward which we believe all companies should strive, but without which an all-remote company cannot function. Because our values can be difficult to practice, we rely on Sid’s personal resolve and encouragement of us all, to be transparent even and especially when it is difficult.\n\nWe have intently defined our values and how they enable all-remote work. Those and all GitLab Handbook pages, including the one you are reading right now, are editable by GitLab team members and by anyone through our GitLab.com service. For the sake of transparency, everything we do is public by default, from the repository for this handbook and our web site to our issue trackers, infrastructure — even our marketing.\n\nWorking all-remotely underpins our other values, too like our value of diversity, inclusion and belonging in that all-remote work supports inclusion and bolsters communities. GitLab’s mission is “everyone can contribute.” We’re forging that future today, both through the product we build, and the ways in which we build it and run our company.\n\nIt’s not SidLab, it’s GitLab\n\nWhen creating a branch to work in git, you name the branch. During a recent, live-streamed coaching session on collaboration, Sid explained why he does not include his personal initials or name in his branch names. He doesn’t want to discourage others from contributing to his work. As he put it, “It’s not SidLab, it’s GitLab.”\n\nMany such anecdotes attest to Sid’s demonstration of collaboration, transparency, and our other values. A notable few of the many examples of his leadership include:\n\nSid’s README\n\nGitLab’s CEO Shadow Program\n\nOur GitLab Unfiltered YouTube channel, where Sid often shares recordings and live streams of his meetings, while encouraging us to do the same\n\nSid holds office hours to coach GitLab team members on our value of iteration, and meets with and coaches CEOs of other startups as well. His interactions are streamed or recordings shared, optimizing his contributions to the future of work.\n\nGitLab values have won Sid his share of fans. In June 2019, GitLab landed on Inc.’s annual Best Workplaces list as compiled from employee surveys, and Sid’s approval ratings by employees and community members alike are among the best in the business, as compiled by Glassdoor and Comparably.\n\nIn the Bloomberg interview below, Sid describes how being all-remote helps the company practice its values:\n\nThe proof of the pudding\n\nWith Sid’s leadership, GitLab is emboldened to capitalize on and share our own DevOps journey in pieces like this blog post. As converts we are zealots, all the better able to build software that helps our customers in their DevOps journeys. Thousands of GitLab community members and employees have contributed to making this work, but as our co-founder and CEO, we have Sid most of all to thank for enabling us to forge a better future for work.\n\nThe proof of the pudding is in the eating, and Sid’s way of working is not only generous, it’s also generative. Highlights of our growth in 2019 include:\n\n$268M in series E funding with a $2.75B valuation, doubling in less than a year\n\n143% growth rate in annual recurring revenue, showing customer satisfaction and strong demand, with an expectation of $100M ARR in January, 2020\n\n2.5x growth in team members from 431 to 1095, and very much still growing\n\nLast modified September 19, 2024: Fix broken links (38406a39)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:01:17,872 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:01:17,872 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/dod12/2019-best-solution/
2024-12-07 18:01:24,214 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/dod12/2019-best-solution/'}, page_content='2019 DevOps Dozen - Best DevOps Solution Provider: GitLab\n\nThis is one of two pages submitted for the 2019 DevOps Dozen Awards, supporting GitLab for Best DevOps Solution Provider and supporting Sid Sijbrandij for Best DevOps Solution Provider Executive. We thank MediaOps and DevOps.com for their consideration and their service to the DevOps community.\n\nGitLab: A community and a product\n\nThe GitLab solution is the result of collaboration between thousands of community contributors, based on feedback from the over 100,000 organizations that have adopted GitLab to power their DevOps transformations. The GitLab community contributes code, documentation, translation, design, and product ideas based on their real world challenges, making GitLab more useful and valuable. Because of the community behind GitLab, in many cases, we see rapid adoption through better developer experience and collaboration. These naturally drive users to adopt and contribute more, enriching the application every day.\n\nGitLab: A complete DevOps platform, in a single application\n\nGitLab fundamentally changes the way development, security, and ops teams collaborate and build software — helping customers on their DevOps journey in ways no other company can — by providing a single application for the entire DevOps lifecycle.\n\nDevOps toolchains are often complex, fragile, and expensive to maintain. Teams are further slowed by hand-offs and re-work. Across toolchains in a company, teams can be siloed by DevOps software that was supposed to help eliminate siloes.\n\nGitLab customers can have SCM, CI, security, and more in one browser window. They can minimize integrations and get back to releasing great software. GitLab CI and CD are truly continuous, speeding up releases and revenues. With one user experience, one permission model, and one conversation from portfolio management to production monitoring, companywide gains include visibility, collaboration, and speed — making good on the promise of DevOps.\n\nA partner like no other\n\nGitLab is uniquely open and transparent about our vision and roadmap, our internal processes, our product maturity, and we invite and encourage community and customer contributions and collaboration.\n\nThis short video summarizes our unique DevOps solution and bold way of working:\n\nWhat people are saying\n\nCustomer case studies\n\nOur case studies feature GitLab customers sharing their accomplishments, in their own words, including the few introduced below.\n\nGoldman Sachs had already started their DevOps journey, but progress had stalled before they began using GitLab. After reducing their toolchain complexity by implementing GitLab for development, source code control and reviews, builds, testing, QA, and production deployments, Goldman Sachs’ build velocity was dramatically improved, from 1 build every 2 weeks to over 1,000 per day.\n\nAt BI Worldwide, they had built multiple, complex DevOps toolchains resulting in issues like lost bug reports and constant context shifting. Now with broadening GitLab adoption, they describe their DevOps success:\n\n“One tool for SCM+CI/CD was a big initial win. Now wrapping security scans into that tool as well has already increased our visibility into security vulnerabilities. The integrated Docker registry has also been very helpful for us. Issue/Product management features let everyone operate in the same space regardless of role.”\n\n— Adam Dehnel, product architect, BI Worldwide\n\nFrom enterprise customers and an established retailer like Fanatics, to a growing startup like Glympse, GitLab’s singular approach offers efficiency, velocity, reliability, and more at levels only possible with a truly seamless, continuous solution.\n\nPeer reviews\n\nGitLab is a 2-time Gartner Peer Insights “Customers Choice” award winner, recently in the 2019 Enterprise Agile Planning Tools following on our recognition in the 2018 Application Release Orchestration. Below are a few select quotes from Gartner Peer Insights and G2 Crowd reviews:\n\n“GitLab, the central hub of DevOps. This is an overall application for the entire DevOps lifecycle, which is amazing.”\n\n“Makes you highly efficient while developing software with big group of people.”\n\n“Our developers do not have to mind shift between coding and tracking their work. Having the source code available next to planning boards makes the shift that much simpler.”\n\n“Powerful team collaboration tool for managing software development projects.”\n\n“GitLab is an amazing solution with a very fast-paced feature release cycle. They are great at listening to our feedback and incorporate in future roadmaps.”\n\nAnalysts\n\nGitLab’s unique breadth in DevOps has enabled us to enjoy similarly broad coverage across analysts’ categories and reports. A few highlights across the DevOps lifecycle include:\n\nGitLab named ‘Visionary’ in Gartner’s 2019 Enterprise Agile Planning Tool Magic Quadrant\n\nForrester named GitLab a leader in 2019 Wave for Cloud-Native Continuous Integration Tools\n\nForrester recognized GitLab as a Challenger in 2019 Wave for Software Composition Analysis\n\nGitLab’s vision\n\nGitLab’s vision is extensively documented and open to editing. Our mission, “Everyone can contribute” is already true within GitLab the company, where we leverage GitLab the product to run the company. With GitLab we collaborate and complete everyday tasks like organizing events, onboarding new employees, and documenting how we work with this handbook. The direction is clear: we will continue to broaden and deepen GitLab’s capabilities to make our mission true for all our users, making it faster and easier for them to share, collaborate, and contribute.\n\nLast modified November 26, 2024: Fix broken external links (bc83f2be)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:01:24,708 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:01:24,708 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/company/culture/inclusion/erg-minorities-in-tech/mentoring/projects/2020/
2024-12-07 18:01:30,573 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/company/culture/inclusion/erg-minorities-in-tech/mentoring/projects/2020/'}, page_content='2020 Projects\n\nThis page will display a list of the MIT Projects from 2020.\n\nThis year our Mentor / Mentee pairs collaborated on the following projects:\n\nEngineering\n\nSharing GitLab’s organization practices outside of GitLab (WINNER)\n\nRefine inactive bugs backlog\n\nA knowledge base and framework for engineering manages to share ideas\n\nFinance\n\nImproving Financial Forecasting (WINNER)\n\nShould GitLab provide data residency for EU customers\n\nMarketing\n\nCreate a sales portal in order to track the customer journey and increase sales efficiency (WINNER)\n\nIncrease the feedback loop between Field Sales and Product Management\n\nHow to improve the relationship between Field Marketing and Mid Market sales\n\nHow to improve the GitLab handbook\n\nComparing Open Source strategies vs. GitHub and how to improve\n\nSales\n\nIncreasing newly hired SAE’s performance and reducing their churn\n\nA cross fuctional shadow program for leadership development\n\nLATAM Growth and expansion plan\n\nCreating a GitLab customer referral program (WINNER)\n\nDiversity, Inclusion, & Belonging (DIB)\n\nImproving the use of misused terms\n\nHow to increase from 34 to 100 African American employees in 18 months\n\nImprove detection of inclusive candidates in interview process\n\nTo increase the percentage of diversity hires at GitLab through a rotational internship program (WINNER)\n\nMinorities in Tech Mentoring Program: Thank You\n\nThank You Page for Completing your Voting.\n\nLast modified June 27, 2024: Fix various vale errors (46417d02)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:01:31,160 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:01:31,160 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/security/corporate/services/account-resets/
2024-12-07 18:01:37,415 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/security/corporate/services/account-resets/'}, page_content='2FA and Password Account Resets for Team Members\n\nThis is a placeholder page. Please see the links below for any child pages that exist.\n\nLast modified July 1, 2024: Add Corporate Security handbook pages (b684cdaf)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:01:37,918 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:01:37,919 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/people-group/360-feedback/
2024-12-07 18:01:44,002 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/people-group/360-feedback/'}, page_content="360 Feedback\n\n360 Feedback is an opportunity where managers, direct reports, and cross functional team members will give feedback to each other.\n\n360 Feedback\n\nCross-functional feedback provides critical insights into strengths and improvement areas to support ongoing performance in role and career development. 360 Feedback can be a valuable tool in providing those insights, especially when specific growth areas are not already clear.\n\nThere are various ways to support team members’ performance and growth. Timely and direct feedback is often the best way to course correct efficiently and improve performance on an ongoing basis. 360 feedback is a useful tool to support specific development goals or surface blind spots, often for those in leadership positions. A 360 is not the best investment of time for team members who already have a clear understanding of their strengths and weaknesses, and an actionable development plan underway. Team members should take ownership of and leverage the tools that are most relevant and beneficial to them.\n\nThe optional 360 feedback cycle is timed after the Mid-Year Check In and after promotion calibrations to maintain the focus on development. Managers should check in with cross functional stakeholders informally when preparing for a Mid Year check in or Promotion Calibration vs waiting for a 360 feedback cycle.\n\nIs The 360 Process Right For Me?\n\nA 360 can be a very helpful development tool, but it should not be a replacement for regular, ongoing feedback that team members receive throughout the year. There may be situations and points in team member development where a 360 can supplement development and individual growth plans, and times when development areas are clear and 360 feedback may not be needed.\n\nBelow are a few key points to think through when determining in which situations the 360 tool may or may not be useful:\n\nDevelopment Oriented: The 360 process is meant to support the team member’s development and to provide feedback supporting individual growth and development. 360s should not be used as performance management tools.\n\nOngoing Feedback: Managers and team members should seek cross functional feedback throughout the year to inform performance discussions. A 360 should not serve as a replacement for asking stakeholders and peers how things are going.\n\nFocused Goals: 360 feedback is most useful when a team member is committed to working towards certain development goals, as the 360 can provide more specific feedback and focus towards those development goals, and also reveal some blind spots or hidden strengths.\n\nIndividual Growth Plan: In order for the 360 to lead to action, it is important to document and commit to a development plan that outlines the key findings and development actions. As noted above, before launching a 360, ensure an Individual Growth Plan (IGP) is in place. This ensures the 360 is aligned with development areas.\n\nSingle Data Point: It is important to remember that the 360 represents a single, anonymous point in time. While it can be helpful to supplement existing IGPs, it should not be the core data point.\n\nUncover Blind Spots: A 360 is best used when trying to uncover blind spots. If team members and their managers already have a good understanding of the growth areas, direct, transparent feedback is the most productive way to support continued growth and development.\n\nEligibility\n\nFor 360 feedback cycle we will only include team members with at least 6 months of tenure (start date on or before January 28th, 2023).\n\nParticipants should also ensure that they meet the requirements to participate in the process.\n\n360 Feedback Requirements\n\nTeam members who opt-in for the 360 feedback review cycle will be asked to:\n\n(required) Complete an Individual Growth Plan in partnership with your manager prior to the 360 nomination phase launch. 360 feedback should support your growth plan to ensure the investment of time drives results.\n\n(required) Contact team members who you are requesting feedback from to state your goals for the 360 process. For ex/ 1) why you are seeking feedback and 2) what you hope to achieve from the feedback. This will help the reviewer think about how to provide the right kind of information to support you. This can be done via Slack or email.\n\n(optional) We have a Feedback Training enablement issue available for all team members interested in learning more about giving and providing feedback, in addition to our 360 feedback process. We recommend team members that are requesting feedback or providing feedback complete this training.\n\n(optional) Following the 360, share the themes you heard and resulting actions you plan to take with stakeholders who can support your growth throughout the year. Update your Individual Growth Plan with your new development items and actions that you will take as a result of the feedback received in the 360 process.\n\nTimeline FY25 (Pending)\n\nWe are currently reviewing the process for 360 and peer-to-peer feedback and will pause our program for mid-year FY25.\n\nTimeline FY24 (Completed)\n\nThe 360 feedback process will be ongoing from July 31, 2023 - September 22, 2023.\n\nDates Event 2023-07-10 through 2023-07-28 @ 5pm PT Sign Up Window 2023-07-31 Feedback Cycle Launch 2023-07-31 through 2023-08-11 @ 5pm PT Nomination Phase 2023-08-14 through 2023-09-01 Feedback Phase 2023-09-04 through 2023-09-22 Review & Discussion Phase\n\nIMPORTANT: Each phase needs to be completed by the due dates indicated in the table above. To keep this process on track, extensions won’t be accommodated.\n\nSign Up Window - The period of time during which team members can sign up to participate in the 360 Feedback process. Information on how to sign up for the cycle can be found in the Sign Up Process section below.\n\nNomination Phase - Team member nominates peers, manager, and any direct reports they have. Managers have the opportunity to adjust/review team member’s feedback nominations during this window.\n\nFeedback Phase - Team member, managers, and peers complete reviews for themselves and each other. Managers will have visibility into all self and peer reviews for their direct reports as they are completed.\n\nReview Phase - At the close of the 360 feedback session CultureAmp will open the feedback report to the team member and their coach (direct manager) for review.\n\nDiscussion Phase - Manager and team member schedule a 360 feedback meeting.\n\nSign Up Process\n\nThe FY'24 360 Feedback Cycle will be optional company-wide. To sign up, all team members must complete this Google Form to participate. There are a few important things to keep in mind before signing up:\n\nYou must sign up before the or you will not be able to participate in the cycle.\n\nThis is to ensure we are able to launch the review cycle on time**\n\nEnsure you meet the tenure el**igibility requirement\n\nMake sure that you fulfill the requirements for participation and that you have an Individual Growth Plan (or equivalent) in place prior to the 360 Feedback launch\n\nReview the guidelines to determine whether the 360 Feedback process is right for you Team members that sign up and meet the eligibility requirements will receive an invtation from CultureAmp at the start of the Nomination Phase. Team members that sign up and do not meet the eligibility requirements will be notified by their People Business Partner.\n\n360 Structure\n\nWe utilize Culture Amp to administer 360 Feedback. The 360 Feedback cycle in CultureAmp consists of a Self review, Manager review and Peer reviews.\n\nManagers will be assigned as the coach for their direct reports. Managers should review and send out the 360 feedback within 48 hours once the feedback cycle closes and you are sent the results. For more information on the role a manager will play as the team member’s coach, please review Culture Amp Resources for Coaches\n\nIf a team member is in the process of migrating to a new role, the current manager and new manager should arrange a successful handover of the feedback, whether sync or async.\n\nIf your manager changes throughout the 360 process, please contact People Connect to make this change on Culture Amp.\n\nWe have recorded a training overview of the 360 process via Culture Amp for your review and created a slide-deck to provide guidance on 360-Feedback, kindly review before you give feedback.\n\n360 Questions\n\nDuring this 360 Feedback cycle we will be using the Individual Effectiveness 360 Feedback. This follows a Start, Stop, Continue format. The questions included are:\n\nStart: What is one thing that (X or you) could start doing to help your team to succeed?\n\nContinue: What do you believe (X or you) excel(s) at that should be continued?\n\nStop: What do you believe are (X’s or your) biggest opportunities to improve that could make a real difference?\n\nOpen question: Please add anything else, not listed above, that you’d like to continue, improve or do more of. Or use this opportunity to provide additional feedback.\n\nMultiselect Options\n\nTo help guide team members in giving feedback, CultureAmp is offering options under the Start, Continue and Stop questions. When giving feedback you can select up to three options that you would say are applicable. If there are no options that match your feedback please use the option “Other”. From there, you can elaborate in the comments section.\n\nThe options shown align with GitLab Competencies:\n\nCollaboration: Working effectively with a range of people from across the business.\n\nResults: Producing high quality work. Providing practical solutions to problems and finding ways to make improvements. Taking the lead and showing ownership of issues. Demonstrating a bias for action.\n\nEfficiency: Prioritizing work and managing time well.\n\nDiversity: Recognizes and avoids unconscious biases.\n\nInclusion: Recognizing the difference among teams and inviting people to contribute to remove barriers.\n\nBelonging: Is an ally, willing to take action in support of another person in order to remove barriers.\n\nIteration: Experimenting with innovative ideas and approaches / being open to new ways of doing things.\n\nTransparency: Actively keeping people informed about what is happening. Being open to contribution and collaboration.\n\nFeedback: Actively giving, seeking and responding positively to thoughtful feedback.\n\nGrowth mindset: Eager to learn and committed to ongoing development.\n\nTechnical Competence: Demonstrating a high level of domain, functional and/or technical capability.\n\nManager of One: Develops their daily priorities to achieve goals. Sets the tone for their work, assigns items and determines what needs to get done as a self-leader.\n\nEffective Communication: Uses our asynchronous communication guidelines; communicating with transparency and respect to stay connected and work efficiently.\n\nHandbook First: Actively contributes to the handbook, references the handbook to answer questions and clarify direction, uses judgment to contribute and leverage public and internal handbooks.\n\nUsing GitLab: Uses GitLab effectively for day-to-day work, opening, commenting and moving issues, submitting merge requests, and leveraging epics when appropriate.\n\nOther.\n\nManager Feedback\n\nDirect reports of managers that participate in the 360 feedback process will be asked to rate where their manager should better focus their efforts in order to support the team. Specific areas for rating are related to GitLab’s manager and leadership competencies. The rating scale is a normalized, 5-point scale from “much less focus” to “much more focus,” with an option for additional comment.\n\nCulture Amp Resources For Coaches\n\n360 feedback overview for coaches\n\nCoach’s guide to taking action on Effectiveness 360 feedback\n\nChecklist For Coaches\n\nUtilize this checklist to ensure all necessary steps are accomplished during the 360 process.\n\nReviewers - Check with the team member to see who they have nominated for reviewers\n\nProvide Feedback - As a coach, you may have been nominated to give feedback to your team member\n\nReview Feedback - As a coach and manager you should review the feedback with a growth mindset\n\nConduct Feedback Conversation\n\nTake Action on the feedback\n\nComplete the 360 process\n\nReviewer Nomination Process\n\nIn Culture Amp, a reviewer is anyone who is requested to provide feedback for a team member.\n\nIf you are unsure who to nominate as a reviewer, consider saving your nominations as a Draft in CultureAmp. This will allow you to sign back in and add or delete your nominations.\n\nReviewers can be managers, direct reports or co-workers(no participants outside of GitLab). Here are some best practices for selecting reviewers:\n\nNominate your manager, all of your direct reports (if applicable) and a selection of around three peers. Three peers is not a hard limit but we want to make sure the process remains manageable for all.\n\nIf you are in heavily cross-functional or in leadership roles, ensure you have cross-functional representation in line with your level of collaboration.\n\nEnsure to nominate team members who are operating at the same level as you to not overburden your skip-level leaders.\n\nSearch for team members using their email or last name, as CultureAmp does not support listing Preferred Name, only Legal Name and Email.\n\nReviewers need to be in a position to provide meaningful feedback, supported by examples, that will help you find a focus.\n\nChoose people who you have worked closely with for at least 3 months. An exception is where you may have worked very closely with someone, say on a project, but for a shorter amount of time.\n\nSelect reviewers who will provide you with honest and perhaps even “difficult to hear” feedback.\n\nDue to licensing, provisioning and security concerns we cannot include external stakeholders that are not GitLab team members in the 360 feedback process.\n\nExample of a reviewer selection of a Backend Engineer:\n\n1x Manager\n\n3x fellow team members (peers)\n\n1x Software Engineer in Test (cross-functional collaborator on a project for 3+ months)\n\nRemember you want to hear honest feedback so select reviewers you know will provide you meaningful data. In general, comments should be to the point and include specific examples. Helping your team member understand the impact of what they are, or are not doing, is an important part of making that feedback actionable. Feedback will be anonymous, however each team member is given a unique email link to provide feedback so please do not share. In Culture Amp reviewers are listed in 3 categories:\n\nManager\n\nDirect Reports\n\nCo-worker\n\nFeedback will not be tied back to a specific reviewer, however you only have 1 manager so you know that any feedback in that section came from directly from your manager. If you nominated 10 team members to provide feedback all 10 will be listed however any feedback is not tied directly back to a specific team member.\n\nFeedback Training Material\n\nIn addition to our Guidance on Feedback handbook page, we have a Feedback Training issue available for all team members interested in learning more about giving and receiving feedback, in addition to our 360 Feedback process.\n\nWe encourage all team members to complete this training, and recommend it specifically for those participating in the 360 Feedback process either requesting feedback for themselves or providing feedback to others.\n\nGiving Feedback in 360s\n\nGeneral Tips:\n\nIt is ok to skip a question by typing N/A if you don’t have meaningful feedback in that area. Don’t create a “story” where there is none.\n\nPrepare - Think about the individual beforehand. What do you value in them as a co-worker? Where do you think are their biggest opportunities to improve?\n\nSpeak from your own experience - avoid “I’ve heard…” statements.\n\nBe specific - provide examples wherever possible and avoid general statements like “really good” or “difficult to work with”. We recommend using the SBI Model to ensure clarity and specificity in feedback.\n\nKeep it actionable- always describe behaviors, not traits. Focus on what the person can actually do something about going forward (i.e. more of, less of, keep doing - “it would be good to see more of X as it leads to Y”.)\n\nBe respectful AND honest - feedback on improvement areas can at times be challenging to give. Keep in mind the purpose of the feedback is for development and not to judge or evaluate performance. Team members cannot improve and grow if they don’t know where to focus, so this type of feedback is also important and encouraged.\n\nTry to avoid comparing different team members and rather look at a person’s progress, comparing them against themselves only.\n\nEx: Person X’s performance in January compared to their performance in May, as opposed to person X’s performance compared to person Z’s performance.\n\nBelow are a couple of tips for team members who may have received a significant number of feedback requests to contribute to.\n\nTry to complete feedback for 1 or 2 people a day, versus waiting until the last minute. Spending 10-20 minutes a day on this can make thinking through and writing the feedback process less overwhelming. For those that may have a significant number of review requests.\n\nIf you receive an overwhelming amount of feedback requests, prioritize the requests based on the team members you work most closely with (I.E. the people you feel you can provide the most meaningful and holistic feedback to). Feedback is a gift and you should try to provide meaningful feedback to as many requesters as possible, but be mindful of your own bandwidth as well. Start with your core group, and expand from there as capacity allows.\n\nManaging Feedback Requests\n\nIf you feel overwhelmed by the number of team members that have requested feedback from you, keep in mind that you are providing your team members with a gift: the ability to learn and grow from the feedback they receive.\n\nHowever, you may not have feedback related to each of the questions asked. That is ok. If you don’t have anything meaningful to provide, you can put not-applicable. Focus on the team members and the questions for which you have meaningful and helpful feedback. If you feel like you are not in a position to complete a meaningful review in general, please let the team member know, so they can possibly select another reviewer instead. Be mindful of your own bandwidth when providing reviews: Start with your core group, and expand from there as capacity allows.\n\nBias\n\nAt this moment in time we do not have any integration tools in Culture Amp to help us combat bias. As an alternative and to help with this we have 2 Culture Amp training courses. One for team members and the other for managers. These training courses will combat bias.\n\nReceiving Feedback in 360s\n\nBe open to engaging in the conversation. Your peers have taken the time to provide you with their feedback. And the purpose of this feedback is to help you develop and reach your full potential. The perception they have of you is important information for you to have and to build into an action plan.\n\nBefore going into the conversation and reviewing feedback, check out the page on receiving feedback.\n\nBe accepting of positive feedback. Instead of deflecting compliments, hear and internalise them. They are strong indicators of where you have successfully developed your skills. Remember to maintain a focus on them so you can continue to develop the skill.\n\nDuring the 360 Feedback meeting:\n\nBreathe!\n\nAssume positive intent\n\nAvoid your first response as chances are it may be defensive\n\nAsk lots of questions to fully understand the feedback\n\nAsk for time to process the feedback and come back with any follow up questions & / or action\n\nSay thank you for their time\n\nIf you would like to learn more, we held a Receiving Feedback Live Learning course on 2020-02-25.\n\nGuidance for Managers\n\nThe feedback that your team member receives may reinforce excellent or under performance you have already observed, but shouldn’t be the only data point you use in evaluating performance. In cases where you’ve identified your top performer, we should learn from what makes that person successful to share with others. In cases where unsatisfactory performance is identified, you should also address that timely and honestly. The feedback included through the 360 process may help in talking through examples of strengths or improvement areas, but you should not wait for the 360 Feedback process to address performance matters.\n\nReviewing the Report as a Manager\n\nOnce the feedback cycle closes, managers and team members will be able to review the feedback prior to meeting to discuss. Giving and receiving feedback can be hard for both the manager and the team members. Remember to be open-minded and calm. Be open-minded to the fact that others may see something that you do not. If you disagree with the feedback, others may be seeing something that you are not aware of- we called these blind spots earlier. Allow for the fact that others may be right, and use that possibility to look within yourself. Managers, feedback should never be a surprise! It is meant to guide, mentor, support, enhance, and help the team member grow. Try and maintain the model that feedback is a gift- it is data. More data is always better because it provides us with choices we wouldn’t otherwise have.\n\n360 Feedback Conversation\n\nThis section outlines the conversation for a manager to have with their direct report after the cycle has closed. This dicussion should focus on leveraging peer feedback to accelerate the team member’s growth and development goals.\n\nThe high level recommended process is as follows:\n\nBefore the meeting: Review the 360 feedback before meeting your team member and summarize the key findings (possible recurring themes, patterns etc.)\n\nIn the meeting:\n\nWhen discussing the feedback, ask open ended questions such as: What do you think of the feedback? Were there any surprises?\n\nGive feedback using the S-B-I- model: situation - behavior - impact\n\nIdentify 1-2 development opportunities based on the feedback to focus on and identify concrete development actions. Ask open ended questions like “what would success look like?” which also engage the team member to take accountability for their own growth and development\n\nUpdate the IGP based on the 360 findings and development actions.\n\nAfter the meeting: periodically (quarterly) in 1:1s, review progress against the development goals and offer support as needed\n\nSome general guidance and tips for the conversations can be found below:\n\nNo surprises. Team members should not hear about positive feedback or performance in need of improvement for the first time at the 360 feedback meeting. Team members should have regular 1:1s where this is discussed. However, if new information is uncovered during the 360 Feedback process, you should discuss that new data.\n\nThe overall aim is providing meaningful feedback. Don’t allow the feedback meeting (document and conversation) to (d)evolve into a “todo” list.\n\nManagers should send the results within 48 hours of the feedback cycle closing so they can prepare and come to the meeting with questions and discussion points.\n\nMake sure you (Manager) are also prepared for the discussion, write down some notes and key points you want to make. What are the major themes coming out of the feedback?\n\nMake time to talk about the future career development and development opportunities.\n\nThis should be a conversation - remember to be an active listener. As a manager, you can help your team member process and understand the feedback, helping to avoid over/under reactions or defensiveness. Ask questions such as:\n\nIs there feedback that you received that is surprising or upsetting to you?\n\nAfter reading your feedback, what are the areas you would like to focus on and how can I help?\n\nHow can I be a better manager for you?\n\nWhat are you hoping to achieve at GitLab this coming year?\n\nFollow Up. Did you discuss pathways to career progress, or specific points of attention for improving performance? Make sure you add them to the top of the 1:1 doc so as to remind yourselves to follow up every so often.\n\nManagers are encouraged to share their key learnings with their teams. Making yourself open and vulnerable can help the rest of the team understand that it is ok to get hard feedback and we can grow from it. It also enlists the team is helping you grow.\n\nConsider asking each team member to share the top 2-3 Themes from their feedback, what they plan to do now, and how the team can help.\n\nIf there are areas that were indicated over the 360s that need immediate improvement, are not aligned with our values or go against our Code of Business Conduct and Ethics for Directors, Officers, Employees and Contractors, please reach out to our Team Member Relations Specialist via teammemberrelations@gitlab.com.\n\nAction Plans\n\nOnce feedback has been delivered, we recommend the manager and team member agree on a resulting action plan which can be captured in the Individual Growth Plan for ongoing reference and accountability.\n\nSharing 360 Feedback outside of the 360 Feedback Cycle\n\nIf a team member becomes a manager to direct reports after the 360 Feedback cycle has completed, and would like to see their new direct reports’ 360 Feedback reports, the new manager must reach out to the direct reports directly to ask permission for either the previous manager to download and send the reports, or for the direct reports to download their own reports and send them directly to the new manager. Any approval should be in writing by email, not Slack.\n\nDetailed instructions for sharing this report can be found here.\n\nCommon Questions\n\nTroubleshooting for common questions during the 360 process.\n\nI had a manager update during the 360 process, and I would like them to be my coach, how can I update this?\n\nReach out in #people-connect and request a coach update. Please provide the new coach’s email address.\n\nI will be out on PTO during the nomination period; what can I do?\n\nYou have two options\n\nYour manager/coach can update your nominations in CultureAmp -Or-\n\nYou can email #people-connect with the email addresses of your nominations.\n\nI submitted my 360 nominations but I want to make an adjustment, what can I do?\n\nFirst, sign into CultureAmp to see if you submitted your nominations or if you saved them as a draft. If it is in draft mode you can adjust the nominations yourself.\n\nIf it has been submitted - reach out to your coach/manager. They are able to make these adjustments within CultureAmp.\n\nWhere can I give feedback about the 360 feedback process?\n\nTeam members are encouraged to contribute to this issue with feedback based on their experience in the 360 feedback process.\n\nLast modified September 17, 2024: Timeline for FY25 (fafa91a8)\n\nView page source - Edit this page - please contribute.")]
2024-12-07 18:01:45,499 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:01:45,499 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/marketing/marketing-operations/6sense/
2024-12-07 18:01:51,911 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/marketing/marketing-operations/6sense/'}, page_content='6sense\n\n6sense is an Account Based Marketing platform that uses a predictive model to identify the right customers at the ideal time\n\nOverview\n\n6sense is a an Account Based Marketing platform that uses a predictive model to identify the right customers at the ideal time.\n\nThis page contains public information about 6sense and how we use it. In addition to this page, additional, non-public information for GitLab team members can be found in the internal handbook.\n\nIntegrations\n\n6sense is integrated with Salesforce, Marketo, Outreach, Qualified, and Slack. In addition, user management is managed through Okta.\n\nSalesforce\n\n6sense and Salesforce are integrated bi-directionally. Salesforce passes data to 6sense to inform and optimize the 6sense predictive data model, which is the foundation of our 6sense instance. The 6sense predictive data model takes in data from various sources including Salesforce campaign engagement acticity, to determine its intent model. 6sense also reviews the relevant opportunity definition in order to determine profile model. Finally, 6sense reviews Salesforce task and event activity to determine its reach model.\n\n6sense data is also pushed to Salesforce. 6sense fields can be seen on the Account, Contact, and Lead objects in Salesforce.\n\nSalesforce users with a 6sense log in can also leverage the 6sense iframe in Salesforce.\n\nMarketo\n\nMarketo activity is passed to 6sense to inform the predictive models. Marketo form fills and email activity are included in the intent model. Outbound email activity from Marketo is used in the reach model.\n\nAdditionally, Marketo monitors updates to the 6sense Account 6QA Start Date field, which is used to add 20 behavior based points to identified 6QA leads, with a limit to scoring on 6QA once every 3 months. Once leads clear the initial filters, they are placed into a 6 day wait step before receiving scoring based on 6QA. This delay allows Marketo to check that a lead has not been labeled Accepted, Qualifying, Qualified, Disqualified, Ineligible or Recycle since the checkbox status initially changed and prevents overscoring based on other lead behaviors, but still allows leads to receive points.\n\nOutreach\n\nQualified\n\nIntegrate (DAP)\n\nSlack\n\nThe 6sense <> Slack integration can be used to send 6sense alerts via Slack. Documentation for how to set Slack alerts can be found here(6sense login required).\n\nSupport\n\n6sense knowledge base (6sense user account required)\n\n#mktgops on Slack\n\n6sense customer support\n\nAccess\n\nThe following teams have role-based access to 6sense:\n\nAccount Based Marketing\n\nMarketing Campaigns\n\nDigital Marketing\n\nField Marketing\n\nSales & Business Development\n\n6sense is access is managed through Okta. To request access, open an access request. After receiving manager approval, tag the provisioner listed in the tech stack. When requesting access, please specify a role from the list below along with justification as to why this role is needed.\n\nUser Configuration\n\nThe following steps must be taken in order for users to access both the 6sense platform and the 6sense integration with Salesforce:\n\nAction Owner Owner User is added to the 6sense Okta Google Group. Marketing Ops This creates their 6sense account User activates their 6sense account by searching for and clicking on the 6sense Okta tile. User This activates their account in the 6sense platform User is assigned the appropriate role in the 6sense platform. Marketing Ops By default, they will be assigned View Only after activating their account in Okta. This ensures that the user is able to take appropriate actions in the platform User’s Salesforce profile is assigned the 6sense User permission set. Sales Systems This allows the user to see the 6sense dashboard iframe in Salesforce User’s Salesforce profile has the 6sense Sales Intelligence visual force enabled on their page layouts. Sales Systems This ensures that the 6sense custom fields and iframe appear on the Account page layouts in Salesforce\n\n6sense User Roles\n\nOperation User: This role has full access to 6sense insight features, orchestration, alerts, administrator reports, and settings related to integration and sales enablement. It also has view access to campaigns and some other settings.\n\nMarketing User: This role has full access to 6sense insight features, campaign features, alerts, administrator reports, and view access to some settings. Additionally, it has edit access to the Ad Inventory Exclusion list.\n\nView Only User (default): This role has view access to all features and settings that Marketing User has access to.\n\nInsights User: This role has full access to 6sense insights for segments and accounts.\n\nSales User: This role has full access to 6sense insights for segments and accounts.\n\n6sense User Seat\n\nWe have a limited user seat in 6sense, in order to manage our user seats and provide more seats for new users, we are eliminating inactive users.\n\nDuring our user audit review, if the user hasn’t logged into either the 6sense platform or the dashboards in Sales in the last 6 monmth, their seat willl be revoked.\n\nTraining Resources\n\nSales Dev Training Recordings\n\nEMEA 6Sense Training\n\nAMER 6Sense Training\n\nMarketing Trainings\n\n2023-09-27: 6sense Field Marketing Enablement Option 1\n\n2023-09-27: 6sense Field Marketing Enablement Option 2\n\nOrchestrations\n\nAdd Lead to Sequence from the Account\n\nWith 6Sense, you can use segments to monitor the intent and engagement of target accounts from the Sales Intelligence dashboard in Salesforce.\n\nIn the Sales Intelligence dashboard, review the Profile Fit, Account Reach and Buying Stage for accounts showing signals for buyer intent.\n\nUnder Persona Map, you’ll be able to identify the leads that fit the ideal customer profiles with a strong Engagement Grade.\n\nSelect the lead and add to Outreach\n\nOutreach will prompt you with Outreach Sequence, pick the sequence you would like to add the lead to.\n\nAcquire New Contacts to Outreach Sequence\n\nYou can add a segment to an Outreach Sequence directly on the 6Sense Naive Web Application. To do so, you’ll need to create a new orchestration with the criteria: I want to acquire new contacts and add them to an Outreach Sequence.\n\nRefer to the Knowledge Base (you must be logged in to access the knowledge base) for the step to step instructions.\n\nSegments\n\nSegments drive every use case within 6sense, and consist of groups of accounts created based on user-selected filters, list uploads, or CRM synchronizations. More information about 6sense segments can be found here.\n\n6sense segment names sync to Salesforce via an orchestration. In order for a segment to sync to Salesforce, the segment must be published. If a segment is unpublished, the record of that segment will be removed from Salesforce. This is a good way to keep the 6sense segment name field relevant, however is important to note for historical reporting purposes.\n\nPublishing Segments\n\nPublishing a 6sense segment extends its account membership to specific 6sense experiences and external system workflows. Publishing a segment enables us to better cross-reference segments and accounts, and is an effective method to communicate messaging recommendations, increase visibility into the status of segments and accounts, and facilitate internal alignment. Marketing users can use this issue request template to request a segment get published in 6sense.\n\nOnly admin users and operations users are able to publish segments in 6sense. If you need to publish a segment in 6sense, please open a new Marketing Operations issue.\n\nTo push a segment to Marketo, you’ll need an Add to Audience orchestration. You can open a request by using this Marketing Operations issue. For more information on how it works, see this internal handbook page.\n\nBest Practices\n\nFolder Naming Convention\n\nIn order to keep segments and the general platform organized, please use the following folder naming convention:\n\nTeam Name - FY## Q# - Name of Campaign/Account List\n\nFor example:\n\nABM - FY24 Q2 - Tier 1 Accounts\n\nXDR - FY24 Q3 - Campaign Name\n\nTags\n\nTags should be used to help organize lists by topic. For example, you may want to use a tag for a large campaign, segment (SMB, MM, etc.), tier, etc.\n\nSales Dev Naming Convention\n\nSales Dev users should name any lists with the same naming convention that is used in Outreach. The naming convention guidance can be found on the Outreach Handbook Page.\n\nUseful Terms\n\nReach Activities: Sales and Marketing activities performed by your team that engage with the account. This may include activities such as contacting people from the account or adding them to campaigns.\n\nEngagement Activities: Activities performed by people from the account that indicate interest in your company or product offerings. This may include activities such as email and ad clicks, form-fills, or web research related to your product.\n\nEngaged Contacts Generally means that the Account has been participating in MAP / CRM activities such as (email clicks, form fills, CRM Campaign Members which are tied to engagement ie: positive response, attended webinar, etc). So it’s based on taxonomy and then their engagement score is calculated based on how much a contacts/leads from the Account have been participating in those activities.\n\n6 Qualified Accounts (6QA) Qualified by 6sense, a 6QA is an account that is primed for sales engagement.\n\nDue to increases in intent, profile fit and engagement, a 6QA occurs when an account moves from an earlier buying stage (Target, Awareness or Consideration) to a later buying stage (Decision or Purchase), making them qualified for sales activity. It is marketing’s goal to drive accounts to either inbound or 6QA.\n\n6QA status is true when 1 AND 2 are met:\n\nAccount Profile Fit for GitLab is equal to Moderate or Strong.\n\nAccount In-Market Stage for GitLab is equal to Decision or Purchase.\n\n6sense Account Buying Stage Definitions\n\nTarget - The buyer may not realize a problem exists, but may fit within the seller’s TAM.\n\nAwareness - The buyer realizes they have a problem. The buyer is doing educational research to more clearly understand, frame, and identify their problem.\n\nConsideration - The buyer defines their problem and researches options to solve it. The buyer is researching all of the available options to solve the defined problem.\n\nDecision - The buyer chooses a solution. The buyer is narrowing a list of potential vendors to ultimately make a purchase decision.\n\nPurchase - The buyer commits to a specific solution and justifies the reasons for the purchase.\n\nIf you are looking for the definition of term not listed above, please visit the 6sense glossary.\n\nLast modified September 28, 2024: MktgOps: 20240916-20240929-v2 (60a894ed)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:01:52,562 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:01:52,562 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/company/culture/all-remote/remote-benefits/
2024-12-07 18:01:58,527 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/company/culture/all-remote/remote-benefits/'}, page_content='A complete guide to the benefits of an all-remote company\n\nThis guide provides a full overview of all the great benefits of a all remote company for both the organization and employees. Learn more here!\n\nA brief history of remote work\n\n1973: Jack Nilles creates the terms “telecommuting” and “teleworking”\n\n1979 Frank Schiff, VP and chief economist of the Committee for Economic Development states that “If 10 percent of those who commute to work each weekday were to start working at home two days each week, this would reduce the volume of such travel by 4 percent” in the Washington Post.\n\n1983: IBM runs an experiment and allows 5 employees to work from home. 4 years later nearly 2,000 of its employees were telecommuting.\n\n1987: 1.5 million Americans work remotely\n\n1991: Wi-Fi boosts the availability of remote work\n\n2015: GitLab, Inc. launches with 9 all-remote FTE’s\n\n2020: COVID-19 accelerates the validity of all-remote work\n\nWhat is the difference between “remote” and “hybrid”?\n\nRemote: a work arrangement in which employees do not commute to a central place of work\n\nHybrid: when workers split their time between conventional in-office work and working remotely\n\nRead more about the ten models of remote and hybrid teams.\n\nIn this video, GitLab Director of Global People Operations Carol Teskey shares her view on the many benefits of all-remote, and the competitive advantages that come along with it.\n\nBenefits of remote work\n\nReimagining how one’s day can be structured, and how that can easily vary from one 24-hour period to the next, is empowering. The freedom and flexibility that comes with all-remote enables employees to view work in an entirely new light.\n\nRather than forcing one to build their life about a predefined daily schedule that involves an unavoidable commute, all-remote shifts that responsibility back to the individual.\n\nA number of studies from the likes of Google, Buffer, FlexJobs, and IWG show that driven individuals who place a high degree of value on autonomy and flexibility can experience new levels of joy and productivity in an all-remote environment.\n\nIn the GitLab Unfiltered video above, two GitLab colleagues discuss the benefits of all-remote. For those with friends and family in various locales, team members are empowered to spend time with loved ones, investing in those relationships, without the dread of counting vacation days.\n\nAn added benefit that I didn’t anticipate, but have taken full advantage of, is being able to visit friends and family that are in locales that aren’t necessarily close to where my home base is. Otherwise, I’d have to take paid time off (PTO) just to visit them.\n\nI’ve seen friends and family in Nashville, Raleigh, Iowa, New York, Boston, and all over the west coast. It’s not just visiting for a weekend. It’s being there for friends, family, birthdays, baby showers, and weddings. Across the board it has been a huge benefit [of all-remote at GitLab]. - Jackie G., Manager, Marketing Programs at GitLab\n\nBenefits for all-remote employees\n\nIt’s important for employees to truly take advantage of the freedoms and possibilities enabled by remote, rather than simply remaining where they are and switching an office desk for a room in their home. This is the core benefit of remote as compared to work-from-home.\n\nConsider relocating to a lower cost-of-living environment, and look to integrate work into life rather than vice-versa. Remote work enables you to optimize for things like superior air quality and medical facilities, a healthier community environment, and better schools for your children. All of this requires premeditated action — to embrace the reality that work is now decoupled from geography.\n\nIn the home, aim to create a dedicated working space (or work from a coworking space, external office, or cafe). It’s vital to intentionally separate work and life to prevent burnout. Moreover, don’t stop engaging with people. You may not fill your social quota entirely from work interactions, which enables you to pay closer attention to family, neighbors, and community opportunities.\n\nBe intentional about replacing your recovered commute time. Whether it’s fitness, cooking, cleaning, spending time with family, or resting, be deliberate about reclaiming that time and using it to improve your overall well-being.\n\nYou have more flexibility in your daily life (for kids, parents, friends, groceries, sports, deliveries).\n\nNo more time, stress, or money wasted on a commute (subway and bus fees, gas, car maintenance, tolls, etc.).\n\nIt’s safer. With no commute, there’s no risk of getting into an accident traveling to and from work.\n\nYou can optimize your life for superior air quality and medical facilities, a healthier community environment, and better schools for your children, rather than access to onsite jobs.\n\nReduced interruption stress and increased productivity.\n\nAbility to travel to other places without taking vacation (family, fun, etc.).\n\nFreedom to relocate, be location independent, or even travel with other remote professionals.\n\nLess exposure to germs from sick coworkers.\n\nIt can be easier to communicate with difficult colleagues remotely, reducing distractions from interpersonal drama or office politics.\n\nYou can set up and decorate your office or workspace in whatever way works best for you.\n\nYou can choose your working hours based on when you’re most productive.\n\nYou have the opportunity to meet and work with people from many locations around the world, widening one’s view of the world and creating opportunities to learn about new cultures.\n\nOnboarding may be less stressful socially.\n\nEating at home is better (sometimes) and cheaper.\n\nTaxes can be cheaper in some countries.\n\nWork clothes are not required.\n\nFrom family time to travel plans, there are many examples and stories of how remote work has impacted the lives of GitLab team members around the world.\n\n“The flexibility makes family life exponentially easier, which reduces stress and makes you more productive and motivated. You can’t put a dollar value on it – it’s priceless.” - Haydn, Regional Sales Director, GitLab\n\nBenefits for all-remote organizations\n\nRemote enables a more diverse and inclusive workforce, greater efficiency in workflows, and broader global coverage in servicing clients. It significantly de-risks a business, making it more resilient in the face of crises and able to maintain continuity regardless of whether an office is open or closed.\n\nCompanies may need to create a remote leadership team and invest in manager training. However, there is little debate on whether this is an option. Remote work will soon simply be “work,” with global flexibility an expectation. Companies which have multiple offices already have teams which are remote to one another, and thus need a solid baseline of remote fluency to operate in optimal fashion.\n\nLimiting your company’s recruiting pipeline to a certain geographic region, or sourcing employees who are able and willing to relocate, is a competitive disadvantage.\n\nNot only does this create a less inclusive hiring process which reaches a less diverse set of candidates, it forces your organization to compete primarily on the basis of salary.\n\nYou’re able to hire great people no matter where they live.\n\nGitLab has a truly global footprint, with team members in 65+ countries.\n\nEmployees are more productive with fewer distractions, so long as leadership is supportive in equipping teams with the requisite tools, structure, and culture to thrive.\n\nFor example, GitLab has a KPI of 65 tickets closed per support staff per month.\n\nIncreased savings on office costs and compensation (due to hiring in lower-cost regions).\n\nGitLab maintains a more balanced payroll than other San Francisco Bay Area colocated companies. Learn more in the Compensation Calculator section of GitLab’s handbook.\n\nEach function has a new hire location factor target. As an example, marketing targets < 0.72 and finance targets < 0.69. (For reference, San Francisco is 1.00)\n\nWe have a people group KPI for our average overall location factor to be < 0.65.\n\nAll-remote naturally attracts self-motivated people.\n\nIt’s easier to quickly grow and scale your company.\n\nGitLab does not own/lease office space. As colocated companies scale in size, their spend related to real estate will swell. This not only encompasses office space, but related activities such as security, cleaning, remodeling, etc. It also hampers growth. Hiring too many people in too short a time span will force you to move offices in quick succession, creating massive cost and inefficiency.\n\nEmployees are increasingly expecting remote work options from their employers.\n\nGitLab sees over 3,000 applicants per week for open vacancies. Each applicant is given access to our strategy and an overview of what it’s like to work at GitLab before they are asked to invest time and energy in applying. We get more qualified applicants due to our transparency, showcased through examples like role description videos hosted on the GitLab Unfiltered YouTube channel.\n\nCompanies often experience lower employee turnover and higher morale with remote work.\n\nGitLab enjoys a strong year-over-year voluntary retention rate. All-remote contributes to our high retention of people, as they’re able to take their career with them through life’s changes.\n\nYou have fewer meetings and more focus on results and output of great work.\n\nEach meeting which is avoided by asynchronous communication and intentional documentation saves thousands of dollars in wages. Too, the time savings can be repurposed for generating additional value and empowering people to live richer lives as they work more efficiently.\n\nYou don’t have to pay to relocate someone to join your team.\n\nGitLab’s talent acquisition department tracks cost per hire, which currently does not have a target.\n\nWith employees located all over the world working asynchronously, contributions can continue even when one time zone’s working day is over.\n\nGitLab has a people group KPI stating that the percent of sent Slack messages that are not DMs be > 50%.\n\nThere’s also business continuity in the case of local disturbances or natural disasters (e.g. political or weather-related events).\n\nGreater flexibility can mean greater diversity in your organization.\n\nBenefits for the world\n\nIn the GitLab Unfiltered video above, two GitLab colleagues discuss the benefits of living in a lower cost-of-living environment near friends, family, and community.\n\nResearch from the University of New Hampshire has found that “35% of rural counties in the United States are experiencing protracted and significant population loss.” Speaking to shrinking towns across Europe, a 2016 report from the European Parliamentary Research Service notes that “younger members of society prefer to migrate to more economically vibrant regions and cities in search of better job prospects as, in most of these territories, professional opportunities remain limited and confined to specific fields (e.g. agriculture and tourism).”\n\nWe believe all-remote has the power to pause, and perhaps even reverse, these trends of depopulation.\n\nWorking remotely gives each person the autonomy to serve in a place that matters to them – a place that has shaped them – contributing significantly to the well-being of a population that may be at risk of losing its foundation, should talent continue to flee to the usual job centers.\n\nThere’s evidence that remote work can reduce the effects of urban crowding for many cities around the world. Some states and countries are even offering incentives to encourage remote work. Here are 13 examples around the world.\n\nFor global companies, bringing better-paying jobs to low-cost regions has positive economic impacts and works to reverse the trends of depopulation in rural regions.\n\nThe competitive advantage for companies that embrace remote work\n\nRemote enables a more diverse and inclusive workforce, greater efficiency in workflows, and broader global coverage in servicing clients. It significantly de-risks a business, making it more resilient in the face of crises and able to maintain continuity regardless of whether an office is open or closed.\n\nCompanies may need to create a remote leadership team and invest in manager training. However, there is little debate on whether this is an option. Remote work will soon simply be “work,” with global flexibility an expectation. Companies which have multiple offices already have teams which are remote to one another, and thus need a solid baseline of remote fluency to operate in optimal fashion.\n\nTop tier talent, without location being a factor\n\nLimiting your company’s recruiting pipeline to a certain geographic region, or sourcing employees who are able and willing to relocate, is a competitive disadvantage.\n\nNot only does this create a less inclusive hiring process which reaches a less diverse set of candidates, it forces your organization to compete primarily on the basis of salary.\n\nRemote organizations are able to hire great people no matter where they live. For example, GitLab has a truly global footprint, with team members in 65+ countries.\n\nFlexible working hours and availability\n\nWith employees located all over the world working asynchronously, contributions can continue even when one time zone’s working day is over.\n\nHappy staff and better productivity\n\nEmployees are more productive with fewer distractions, so long as leadership is supportive in equipping teams with the requisite tools, structure, and culture to thrive.\n\nChallenges to consider before embracing remote work\n\nDespite all-remote having many advantages, remote work isn’t for everyone. It can have disadvantages for employees depending on their lifestyle and work preferences, as well as the organization. In the spirit of transparency, we’ve outlined potential drawbacks and solutions to these challenges here.\n\nWhich is right for your organization?\n\nWe’re nearing a tipping point with all-remote. Instead of remote teams having to justify why they do it, it’s going to be colocated companies having to justify why they don’t.\n\nAll-remote work wouldn’t be possible without the constant evolution of technology, and the tools that enable this type of work are continuously being developed and improved.\n\nDetermining eligibility for hybrid or remote work\n\nWhile job sites and common conversation can lump each remote role into a single category, it’s important to realize that not every remote role is created equal. Just as colocated roles need to be evaluated in totality, those seeking to transition into a remote role for the first time should ask certain questions during the interview or evaluation phase.\n\nThere are various stages of remote work, which can be easily pictured as a sliding scale. From no-remote to hybrid-remote to all-remote, and all points in between, a remote worker’s experience in each setting will likely vary. Below, we’re highlighting key topics to cover when seeking an understanding of how you’ll be treated in a full-time remote role. Additional questions should be considered depending on your specific scenario and familiarity with the hiring company.\n\nWhile there are a growing number of freelance gigs which can be completed remotely, this article is centered around full-time remote careers.\n\nGitLab remote work manifesto\n\nAll-remote work promotes:\n\nHiring and working from all over the world (instead of from a central location).\n\nFlexible working hours (over set working hours).\n\nWriting down and recording knowledge (over verbal explanations).\n\nWritten processes (over on-the-job training).\n\nPublic sharing of information (over need-to-know access).\n\nOpening up documents for editing by anyone (over top-down control of documents).\n\nAsynchronous communication (over synchronous communication).\n\nThe results of work (over the hours put in).\n\nFormal communication channels (over informal communication channels).\n\n“Remote is not a challenge to overcome. It’s a clear business advantage.” -Victor, Product Manager, GitLab\n\nGitLab is one of the world’s largest all-remote companies with team members located in more than 65 countries around the world.\n\nOur all-remote workforce implementation is featured in The Journal of Organizational Design. It is also the centerpiece of case studies authored by Harvard Business School and INSEAD.\n\nClick around to learn more about what “all-remote” really means, how it works at GitLab, some tips and tricks for remote teams, and resources to learn more.\n\nContribute your lessons\n\nGitLab believes that all-remote is the future of work, and remote companies have a shared responsibility to show the way for other organizations who are embracing it. If you or your company has an experience that would benefit the greater world, consider creating a merge request and adding a contribution to this page.\n\nReturn to the main all-remote page.\n\nLast modified November 14, 2024: Fix broken external links (ac0e3d5e)\n\nView page source - Edit this page - please contribute.')]
2024-12-07 18:02:01,471 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:02:01,471 - service.py - INFO - Processing URL from sitemap: https://handbook.gitlab.com/handbook/support/workflows/escalations-support_manager/
2024-12-07 18:02:25,078 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 18:02:25,078 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 18:02:25,737 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 18:02:25,837 - vector_db.py - INFO - Faiss index loaded from faiss_index_file
2024-12-07 18:05:01,781 - instructai.py - ERROR - Error processing modify query: REFORMATIN_QUERY
2024-12-07 18:06:57,846 - service.py - INFO - Processing URL: https://handbook.gitlab.com/handbook/company/culture/all-remote/guide/
2024-12-07 18:06:57,847 - service.py - INFO - URL https://handbook.gitlab.com/handbook/company/culture/all-remote/guide/ is not a sitemap.
2024-12-07 18:06:57,847 - service.py - INFO - Processing regular URL: https://handbook.gitlab.com/handbook/company/culture/all-remote/guide/
2024-12-07 18:07:05,046 - vector_db.py - INFO - Document loaded successfully!: [Document(metadata={'source': 'https://handbook.gitlab.com/handbook/company/culture/all-remote/guide/'}, page_content="GitLab's Guide to All-Remote\n\nHow to work remotely - the GitLab guide\n\nGitLab is one of the world’s largest all-remote companies with over 1,500 team members located in more than 65 countries around the world.\n\nOur all-remote workforce implementation is featured in The Journal of Organizational Design. It is also the centerpiece of case studies authored by Harvard Business School and INSEAD.\n\nOn this page and subpages, we’ll share what “all-remote” really means, how it works at GitLab, some tips and tricks for remote teams, and resources to learn more.\n\nThe Remote Manifesto\n\nAll-remote work promotes:\n\nHiring and working from all over the world (instead of from a central location).\n\nFlexible working hours (over set working hours).\n\nWriting down and recording knowledge (over verbal explanations).\n\nWritten processes (over on-the-job training).\n\nPublic sharing of information (over need-to-know access).\n\nOpening up documents for editing by anyone (over top-down control of documents).\n\nAsynchronous communication (over synchronous communication).\n\nThe results of work (over the hours put in).\n\nFormal communication channels (over informal communication channels).\n\nWhy remote?\n\n“Remote is not a challenge to overcome. It’s a clear business advantage.” -Victor, Product Manager, GitLab\n\nFrom the cost savings on office space to more flexibility in employees’ daily lives, all-remote work offers a number of advantages to organizations and their people.\n\nBut we also recognize that being part of an all-remote company isn’t for everyone. Here’s a look at some of the advantages and disadvantages.\n\nOur long-term vision for remote work\n\nLearn more about GitLab’s long-term vision for remote work, and why we can embrace the future of work right now.\n\nWhy GitLab uses the term all-remote to describe its 100% remote workforce\n\nAll-remote means that each individual in an organization is empowered to work and live where they are most fulfilled. By including the word “all” in “all-remote,” it makes clear that every team member is equal. No one, not even the executive team, meets in-person on a daily basis.\n\nLearn more about why GitLab uses the term all-remote to describe its 100% remote workforce.\n\nThe Remote Work Report by GitLab\n\nCreated to foster collaboration, innovation, and evolution in the future of work, the 2020 Global Remote Work Report dissects the state of distributed work and surfaces key motivators for both employees and employers.\n\nDownload the full report now.\n\nWhy GitLab uses GitLab for remote collaboration\n\nGitLab is a collaboration tool designed to help people work better together whether they are in the same location or spread across multiple time zones. Originally, GitLab let software developers collaborate on writing code and packaging it up into software applications. Today, GitLab has a wide range of capabilities used by people around the globe in all kinds of companies and roles.\n\nYou can learn more at GitLab’s remote team solutions page.\n\nHow we built our all-remote team\n\nAs GitLab has grown, we’ve learned a lot about what it takes to build and manage a fully remote team, and want to share this knowledge to help others be successful.\n\nFind out how GitLab makes it work.\n\nAdvantages and benefits\n\nOperating in an all-remote environment provides a multitude of benefits and competitive advantages for employees, employers, and the world.\n\nLearn more about benefits and advantages to operating in an all-remote environment.\n\nDisadvantages\n\nDespite its many advantages, all-remote work isn’t for everyone. It can have disadvantages for potential employees depending on their lifestyle and work preferences, as well as the organization.\n\nLearn more about disadvantages to all-remote, along with solutions to these challenges.\n\nThe GitLab Test: 12 Steps to Better Remote\n\nBorrowing format from The Joel Test, this 12 question test helps leaders understand if you’re running a great remote operation.\n\nRemote work emergency plan: What to do (and where to start)\n\nDue to global issues concerning COVID-19 (Coronavirus), many employees and employers are facing a new reality: they’re remote, and they’re unsure of when they’ll be able to return to the office.\n\nFor leaders who are suddenly managing work-from-home teams, here are five things you can focus on right now to maximize stability.\n\nRemote work starter guide: how to adjust to work-from-home\n\nFor employees who are grappling with a new remote reality (or forced work-from-home), here are five tips to implement straight away in your journey to acclimate.\n\nThe phases of remote adaptation\n\nAs teams grapple with transitioning from a colocated environment to a remote one, it’s common to see differing levels of adaptability.\n\nLearn more about the phases of remote adaptation.\n\nGitLab pioneers the ‘Head of Remote’ role\n\nBy hiring a Head of Remote in 2019, GitLab triggered a global movement of appointing a dedicated leader to evolve a company’s remote fluency.\n\nThis page details the backstory of the movement’s origins, explains what a Head of Remote is, provides job description templates, and open source certifications to enhance your markability as a remote work leader.\n\nBeing a great remote manager\n\nMany traits found in superb remote managers are also found in managers of colocated teams, though there are nuances to serving, leading, and guiding when managing teams that you do not see in-person each day.\n\nLearn what it takes to be a great remote manager.\n\nPeople\n\nAll-remote organizations tend to attract people who place a high degree of value on autonomy, flexibility, empathy, and mobility. It also presents outsized opportunity for people who must live or prefer to live in rural areas, where well-paying careers in technical industries are few and far between.\n\nLearn more about the types of people who are adopting a remote lifestyle.\n\nNon-linear workday\n\nHow diverse, invigorating, gratifying, and productive could your day be if you threw away the notion that you had to stick to a daily routine?\n\nLearn more about what life can look and feel like when embracing a non-linear workday.\n\nValues\n\nWhile all-remote isn’t a value itself, it’s something we do in order to practice our values.\n\nLearn how a collection of values at GitLab contributes to a thriving all-remote environment.\n\nBuilding and reinforcing a sustainable culture\n\nCulture is best defined not by how a company or team acts when all is well; rather, by the behaviors shown during times of crisis or duress.\n\nLearn more about creating a thriving, lasting remote culture.\n\nCombating burnout, isolation, and anxiety\n\nMental health is an important topic for all companies, and creating a healthy remote workplace is essential to business success.\n\nLearn more about combating burnout, isolation, and anxiety in the remote workplace.\n\nJobs\n\nJob seekers are wise to point their efforts towards companies that are built to support 100% remote. You’re able to bypass hours of lobbying for a remote arrangement during the interview process, and you’re assured that the tools you need to operate effectively from anywhere will be included from the get-go.\n\nLearn more about all-remote and remote-first organizations leading the way, job boards that curate high-quality remote roles, and informal job searching tactics.\n\nHow to evaluate a remote role\n\nNot every remote job is created equal. Learn more about considerations and questions to ask when evaluating a remote role.\n\nGetting started in a remote role\n\nLearn more about considerations and tips for starting a new remote role.\n\nManagement\n\nManaging an all-remote company is much like managing any other company. It comes down to trust, communication, and company-wide support of shared goals.\n\nLearn more about what’s required to effectively and efficiently manage an all-remote company.\n\nForcing functions to work remote-first\n\nWhether it’s unwinding from offices entirely and going all-remote, or attempting to create a level playing field for in-office and remote team members in a hybrid-remote arrangement, leaders should consider key forcing functions to ensure a commitment to remote-first practices.\n\nLearn more about tactical, actionable steps that will send a clear message that leadership is serious about implementing remote in the organization.\n\nCollaboration and whiteboarding with remote teams\n\n“How do you collaborate and whiteboard in a remote environment?” is a frequently asked question. In a colocated setting, collaboration often happens face-to-face with a whiteboard on hand in a conference room. Working remotely sometimes feels like working on your own, with your own calendar, and your own schedule. With a common goal, strategic planning, and the right collaboration tools, working in a remote environment can be even more productive than working in an office.\n\nLearn more about collaboration and whiteboarding in remote work environments.\n\nRemote onboarding\n\nOnboarding remotely should focus on three key dimensions: the organizational, the technical, and the social. By using this integrated approach, top companies enable their employees to stay and thrive in their roles. We’ll show how you can focus on these three key dimensions of onboarding through an all-remote onboarding process.\n\nLearn more in GitLab’s guide to remote onboarding.\n\nScaling\n\nGitLab believes that all-remote is the future of work, and that it not only works well at scale, but works better at scale than antiquated colocated models.\n\nLearn more about challenges, solutions, and benefits of all-remote at scale.\n\nStages of remote work\n\nLearn more about the various stages of remote work, from no remote to all-remote.\n\nTips for working remotely\n\nBuilding a remote team or starting your first all-remote job? Check out our tips for working remotely.\n\nResources\n\nBrowse our resources page to learn more about GitLab’s approach, read about remote work in the news, and see what other companies are leading the way.\n\nWe’ve also compiled a list of companies that have been inspired by GitLab’s culture.\n\nHiring\n\nGitLab envisions a world where talented, driven individuals can find roles and seek employment based on business needs, rather than an oftentimes arbitrary location.\n\nHiring across the globe isn’t without its challenges. There are local regulations and risks unique to countries and regions around the globe. We believe that these challenges are worth overcoming, and opening our talent acquisition pipeline beyond the usual job centers creates a competitive advantage. We hope to see this advantage wane as more all-remote companies are created.\n\nLearn more about hiring in an all-remote environment.\n\nCompensation\n\nWhile there are certain complexities to paying team members who are spread out in over 50 countries, we believe that it’s worthwhile. Being an all-remote company enables us to hire the world’s best talent, not just the best talent from a few cities.\n\nLearn more about compensation in an all-remote environment.\n\nLearning and Development\n\nWe believe that all-remote companies are at a competitive advantage when it comes to educating and developing team members.\n\nLearn more on how to make learning and development a companywide mindset in an all-remote environment.\n\nSelf-service\n\nIt’s not what you know. It’s knowing where to look. This is true at GitLab and other organizations that are intentional about documenting processes, and it is entirely counter to how typical work environments are structured.\n\nLearn more about the importance of self-searching, self-learning, and self-service in an all-remote organization.\n\nInformal Communication\n\nIn an all-remote environment, informal communication should be formally addressed. Leaders should organize informal communication, and to whatever degree possible, design an atmosphere where team members all over the globe feel comfortable reaching out to anyone to converse about topics unrelated to work.\n\nLearn more about enabling informal communication in an all-remote company.\n\nAsynchronous communication\n\nIn an all-remote setting, where team members are empowered to live and work where they’re most fulfilled, mastering asynchronous workflows is vital to avoiding dysfunction and enjoying outsized efficiencies. Increasingly, operating asynchronously is necessary even in colocated companies which have team members on various floors or offices, especially when multiple time zones are involved.\n\nLearn more about implementing asynchronous workflows in your organization, and the benefits to both employee and employer.\n\nHandbook-first documentation\n\nA handbook-first organization is home to team members who benefit from having a single source of truth to lean on. This type of organization is able to operate with almost supernatural efficiency. An organization that does not put concerted effort into documenting has no choice but to watch its team members ask and re-ask for same bits of data in perpetuity, creating a torturous loop of interruptions, meetings, and suboptimal knowledge transfers.\n\nLearn more about the significance of handbook-first documentation.\n\nMeetings\n\nLearn how to decide when a meeting is necessary and how to optimize them in an all-remote environment.\n\nCommunicating effectively and responsibly through text\n\nEmbracing text communication and learning to use it effectively requires a mental shift. This can feel unusual or even uncomfortable for those who come from a colocated environment, where in-person meetings and vocalized communiques are the norm.\n\nLearn more about mastering the use of the written word in an all-remote setting.\n\nIn-person interactions\n\nWhile there are tremendous advantages to operating a 100% remote company, leaders should consider being intentional about planning in-person elements, even if they’re optional for team members.\n\nLearn more about considerations for in-person interactions in a remote company.\n\nWorkspace\n\nAll-remote enables the creation of a custom office, perfectly tailored for your desires and ergonomic needs.\n\nLearn more about key considerations when building and evolving your remote workspace.\n\nParenting as a remote worker\n\nParents who work from home have unique demands and expectations, as well as unique challenges. Being an excellent coworker and an excellent parent is a tall order, particularly when childcare and school are impacted by a global crisis.\n\nLearn more about balancing remote work and parenting.\n\nStories\n\nRead the stories of some of our team members and hear how remote work has impacted their lives.\n\nInterviews\n\nRead and listen to interviews on the topic of working remotely, hosted by GitLab team members.\n\nHistory\n\nLearn about historical milestones, inflection points, and prescient interviews in the evolution and expansion of remote work.\n\nHybrid-remote\n\nHybrid-remote companies have one or more offices where a subset of the company commutes to each day, paired with a subset of the company that works remotely.\n\nLearn more about advantages, challenges, and the primary differences between all-remote and other forms of remote working.\n\nComparing All-Remote Benefits vs. Hybrid-Remote Benefits\n\nLearn more about the differences in workplace experience by individuals who are remote by default in an all-remote setting vs. a hybrid-remote setting, working with colleagues who are onsite by default.\n\nTransitioning or adding remote\n\nLearn more about considerations for transitioning a colocated or hybrid-remote company to 100% remote.\n\nWhat not to do when implementing remote\n\nAn organization should not attempt to merely replicate the in-office/colocated experience, remotely.\n\nLearn more about what not to do when transitioning to remote, or moving towards remote.\n\nWorking while traveling\n\nWorking remotely enables a tremendous amount of freedom, enabling team members to work from anywhere so long as there is a reliable internet connection.\n\nLearn more about optimizing comfort and efficiency when taking your office with you while traveling.\n\nRemote work conferences, summits, and events\n\nParticularly for those who are seeking a new role with an all-remote or remote-first company, events can be a great place to meet others who have experience and connections in the space.\n\nLearn more about remote work conferences and summits, the power of networking, and the unique elements of experiencing a virtual event.\n\nRemote internships\n\nRemote internships are unique in one primary way: there is no physical office involved.\n\nLearn more about considerations for both employee and employer as it relates to remote internships (also referred to as apprenticeships and co-ops).\n\nAll-remote Certification\n\nGitLab is a pioneer in the all-remote space. As one of the world’s largest all-remote companies, we have developed a custom certification program to test and apply knowledge attained throughout the all-remote section of the handbook. Emerging leaders must quickly learn and deploy remote-first practices and skills while expanding their knowledge of remote management and overall remote fluency.\n\nRemote work guides for teams\n\nThese remote work guides are written specifically for external parties who wish to learn how specific divisions/departments function in a remote environment.\n\nRemote Guide for Finance Teams\n\nRemote Guide for Design Teams\n\nRemote Guide for People Operations\n\nRemote Guide for Legal Teams\n\nAll-remote Pick Your Brain interviews\n\nIf people want advice on structuring or managing an all-remote organization, we’d love to connect. Learn more about requesting a Pick Your Brain interview on all-remote.\n\nContribute to this page\n\nAt GitLab, we recognize that the whole idea of all-remote organizations is still quite new, and can only be successful with active participation from the whole community. Here’s how you can participate:\n\nPropose or suggest any change to this site by a merge request.\n\nCreate an issue if you have any questions or if you see an inconsistency.\n\nHelp spread the word about all-remote organizations by sharing it on social media.\n\nRemote Guide for Design Teams\n\nRemote Guide for Design Teams\n\nRemote Guide for Finance Teams\n\nRemote Guide for Finance Teams\n\nRemote Guide for Legal Teams\n\nRemote Guide for Legal Teams\n\nRemote Guide for People Operations\n\nRemote Guide for People Operations\n\nLast modified November 14, 2024: Fix broken external links (ac0e3d5e)\n\nView page source - Edit this page - please contribute.")]
2024-12-07 18:07:05,812 - vector_db.py - INFO - Faiss index saved to faiss_index_file
2024-12-07 18:07:05,813 - service.py - INFO - Successfully indexed documents from https://handbook.gitlab.com/handbook/company/culture/all-remote/guide/
2024-12-07 18:07:05,813 - controller.py - INFO - https://handbook.gitlab.com/handbook/company/culture/all-remote/guide/ uploaded successfully!
2024-12-07 18:07:26,403 - instructai.py - ERROR - Error processing modify query: REFORMATIN_QUERY
2024-12-07 19:21:55,807 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 19:21:55,808 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 19:21:56,517 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 19:21:56,621 - vector_db.py - INFO - Faiss index loaded from faiss_index_file
2024-12-07 20:46:03,472 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 20:46:03,474 - service.py - INFO - FaissIndexerService initialized with index file at faiss_index_file.index
2024-12-07 20:46:04,060 - vector_db.py - INFO - Faiss index not found, initialized a new vector store.
2024-12-07 20:46:04,162 - vector_db.py - INFO - Faiss index loaded from faiss_index_file
2024-12-07 21:05:25,953 - instructai.py - ERROR - Error processing modify query: REFORMATIN_QUERY
2024-12-07 21:06:19,873 - instructai.py - ERROR - Error processing modify query: REFORMATIN_QUERY
